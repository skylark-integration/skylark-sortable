{"version":3,"sources":["Draggable.js"],"names":["define","skylark","langx","isBrowser","isMobile","$","browser","noder","finder","geom","styler","eventer","transforms","scrollingElement","oriented","plugins","touch","autoscroll","containers","dnd","ghoster","lastDownEl","savedInputChecked","Plugin","inherit","klassName","pluginName","options","draggingClass","_construct","elm","this","overrided","el","_elm","fn","nativeDraggable","sortable","touchStartThreshold","charAt","bind","mousy","on","_onTapStart","evt","startIndex","startDraggableIndex","_this","preventOnFilter","type","touches","target","originalTarget","shadowRoot","path","composedPath","filter","root","length","inputs","getElementsByTagName","idx","checked","push","_saveInputCheckedState","dragEl","test","button","disabled","isContentEditable","closest","draggable","log","tagName","className","_index","call","_dispatchEvent","undefined","cancelable","preventDefault","split","some","criteria","trim","handle","_prepareDragStart","dragStartFn","rootEl","ownerDocument","oldIndex","parentEl","nextEl","oldDraggableIndex","parentNode","nextSibling","activeGroup","group","clientX","clientY","_lastX","_lastY","style","transition","transform","_disableDelayedDragEvents","_triggerDragStart","toggleClass","chosenClass","ignore","forEach","ctx","iterator","list","i","n","_find","_disableDraggable","delay","delayOnTouchOnly","Edge","IE11OrLess","_disableDelayedDrag","_delayedDragTouchMoveHandler","_dragStartTimer","setTimeout","e","Math","max","abs","floor","window","devicePixelRatio","clearTimeout","off","prepare","_onDragEnd","_onDragStart","document","selection","defer","empty","getSelection","removeAllRanges","err","fallback","dataTransfer","cloneEl","clone","_hideClone","_cloneId","removeCloneOnHide","insertBefore","dragClass","ignoreNextClick","_loopId","setInterval","_emulateDragOver","effectAllowed","setData","css","awaitingDragStarted","_dragStartId","_dragStarted","start","ghostClass","active","_appendGhost","_nulling","cloneHidden","hide","removeChild","_showClone","putSortable","lastPutMode","contains","revertClone","appendChild","_animate","show","clearInterval","_clearAutoScrolls","_cancelThrottle","stop","end"],"mappings":"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","file":"../Draggable.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-langx-hoster/isBrowser\",\r\n    \"skylark-langx-hoster/isMobile\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-transforms\",\r\n    \"skylark-domx-scrolls/scrollingElement\",\r\n    \"skylark-domx-layouts/oriented\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-devices-points/touch\",\r\n    \"./autoscroll\",\r\n    \"./containers\",\r\n    \"./dnd\",\r\n    \"./ghoster\"\r\n],function(\r\n    skylark,\r\n    langx,\r\n    isBrowser,\r\n    isMobile,\r\n    $,\r\n    browser,\r\n    noder,\r\n    finder,\r\n    geom,\r\n    styler,\r\n    eventer,\r\n    transforms,\r\n    scrollingElement,\r\n    oriented,\r\n    plugins,\r\n    touch,\r\n    autoscroll,\r\n    containers,\r\n    dnd,\r\n    ghoster\r\n){\r\n\r\n    'use strict';\r\n\r\n    var \r\n        lastDownEl,\r\n        tapEvt,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"intg.sortable.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n            var el = this._elm;\r\n\r\n            // Setup drag mode\r\n            this.nativeDraggable = options.nativeDraggable;\r\n            this.sortable = options.sortable;\r\n\r\n            if (this.nativeDraggable) {\r\n                // Touch start threshold cannot be greater than the native dragstart threshold\r\n                this.options.touchStartThreshold = 1;\r\n            }\r\n\r\n\r\n            // Bind all private methods\r\n            for (var fn in this) {\r\n                if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\r\n                    this[fn] = this[fn].bind(this);\r\n                }\r\n            }\r\n\r\n\r\n            // Bind events\r\n            touch.mousy(el);\r\n            eventer.on(el, 'mousedown', this._onTapStart);\r\n\r\n        },\r\n\r\n        // handle moudedown event\r\n        _onTapStart: function (/** Event|TouchEvent */evt) {\r\n            //if (!evt.cancelable) return;\r\n            var _this = this,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                type = evt.type,\r\n                touch = evt.touches && evt.touches[0],\r\n                target = (touch || evt).target,\r\n                originalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n            // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\r\n            if (dnd.dragEl) {\r\n                return;\r\n            }\r\n\r\n            if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\r\n                return; // only left button and enabled\r\n            }\r\n\r\n            // cancel dnd if original target is content editable\r\n            if (originalTarget.isContentEditable) {\r\n                return;\r\n            }\r\n\r\n            target = finder.closest(target, options.draggable, el, false);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                // Ignoring duplicate `down`\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = containers._index(target);\r\n            startDraggableIndex = containers._index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    dnd._dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        dnd._dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n                return;\r\n            }\r\n\r\n            // Prepare `dragstart`\r\n            this._prepareDragStart(evt, touch, target, startIndex, startDraggableIndex);\r\n        },\r\n\r\n        _prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex, /** Number */startDraggableIndex) {\r\n            var _this = this,\r\n                el = _this._elm,\r\n                options = _this.options,\r\n                ownerDocument = el.ownerDocument,\r\n                dragStartFn,\r\n                dragEl = dnd.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = dnd.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.sortable.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: (touch || evt).clientX,\r\n                    clientY: (touch || evt).clientY\r\n                };\r\n\r\n                this._lastX = (touch || evt).clientX;\r\n                this._lastY = (touch || evt).clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                dragStartFn = function () {\r\n                    // Delayed drag has been triggered\r\n                    // we can re-enable the events: touchmove/mousemove\r\n                    _this._disableDelayedDragEvents();\r\n\r\n                    if ( _this.nativeDraggable) {\r\n                        dragEl.draggable = true;\r\n                    }\r\n\r\n                    // Bind the events: dragstart/dragend\r\n                    _this._triggerDragStart(evt, touch);\r\n\r\n                    // Drag start event\r\n                    dnd._dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                    // Chosen item\r\n                    styler.toggleClass(dragEl, options.chosenClass, true);\r\n                };\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                //eventer.on(ownerDocument, 'mouseup', _this._onDrop); // TODO : lwf\r\n                ///eventer.on(ownerDocument, 'touchend', _this._onDrop);\r\n                ///eventer.on(ownerDocument, 'touchcancel', _this._onDrop);\r\n\r\n                // Make dragEl draggable (must be before delay for FireFox)\r\n                ///if (FireFox && this.nativeDraggable) {\r\n                if (this.nativeDraggable) {\r\n                   this.options.touchStartThreshold = 4;\r\n                    dragEl.draggable = true;\r\n                }\r\n\r\n                // Delay is impossible for native DnD in Edge or IE\r\n                if (options.delay && (options.delayOnTouchOnly ? touch : true) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\r\n                    // If the user moves the pointer or let go the click or touch\r\n                    // before the delay has been reached:\r\n                    // disable the delayed drag\r\n                    eventer.on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\r\n                    //eventer.on(ownerDocument, 'touchend', _this._disableDelayedDrag);\r\n                    //eventer.on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\r\n                    eventer.on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\r\n                    //eventer.on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\r\n                    //options.supportPointer && eventer.on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\r\n\r\n                    _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\r\n                } else {\r\n                    dragStartFn();\r\n                }\r\n            }\r\n        },\r\n\r\n        _delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {\r\n            var touch = e.touches ? e.touches[0] : e;\r\n            if (Math.max( Math.abs(touch.clientX - this._lastX),  Math.abs(touch.clientY - this._lastY))\r\n                    >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))\r\n            ) {\r\n                this._disableDelayedDrag();\r\n            }\r\n        },\r\n\r\n        _disableDelayedDrag: function () {\r\n            dnd.dragEl && dnd._disableDraggable(dnd.dragEl);\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n            this._disableDelayedDragEvents();\r\n        },\r\n\r\n        _disableDelayedDragEvents: function () {\r\n            var ownerDocument = this._elm.ownerDocument;\r\n            eventer.off(ownerDocument, 'mouseup', this._disableDelayedDrag);\r\n            eventer.off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\r\n        },\r\n\r\n        //native dnd mode : register _OnDragStart for dragstart event handler \r\n        //moused dnd mode : register  _onTouchMove for mousemove event hander, _onTouchMove calls _OnDragStart\r\n        _triggerDragStart: function (/** Event */evt, /** Touch */touch) {\r\n            dnd.log(\"_triggerDragStart\",\"start\");\r\n            dnd.log(\"_triggerDragStart\",\"nativeDraggable is \" +  this.nativeDraggable);\r\n\r\n            dnd.prepare(this);\r\n\r\n            if (!this.nativeDraggable) {\r\n                ////eventer.on(document, 'mousemove', this._onTouchMove);\r\n            } else {\r\n                eventer.on(dnd.dragEl, 'dragend', this._onDragEnd);\r\n                eventer.on(dnd.dragEl, 'dragstart', this._onDragStart);\r\n            }\r\n\r\n            try {\r\n                if (document.selection) {\r\n                    // Timeout neccessary for IE9\r\n                    langx.defer(function () {\r\n                        document.selection.empty();\r\n                    });\r\n                } else {\r\n                    window.getSelection().removeAllRanges();\r\n                }\r\n            } catch (err) {\r\n            }\r\n        },\r\n\r\n        _onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\r\n            var _this = this,\r\n                dragEl = dnd.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                dnd._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            !fallback && styler.toggleClass(dragEl, options.dragClass, true);\r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                dnd.ignoreNextClick = true;\r\n                _this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n            _this._dragStartId = langx.defer(_this._dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        },\r\n\r\n        //\r\n        //\r\n        _dragStarted: function (fallback, evt) {\r\n            dnd.awaitingDragStarted = false;\r\n            var dragEl = dnd.dragEl,\r\n                rootEl = this._elm,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n            if (rootEl && dragEl) {\r\n                //if (this.nativeDraggable) {\r\n                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n                //}\r\n                dnd.start(this);\r\n                var options = this.options;\r\n\r\n                // Apply effect\r\n                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n                // In case dragging an animated element\r\n                styler.css(dragEl, 'transform', '');\r\n\r\n                dnd.active = this.sortable;\r\n\r\n                fallback && this._appendGhost();\r\n\r\n                // Drag start event\r\n                dnd._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n            } else {\r\n                this._nulling();\r\n            }\r\n        },\r\n\r\n        _nulling: function() {\r\n            lastDownEl = null;\r\n            tapEvt = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n        },\r\n\r\n        _hideClone: function() {\r\n            if (!dnd.cloneEl.cloneHidden) {\r\n                styler.hide(dnd.cloneEl);\r\n                dnd.cloneEl.cloneHidden = true;\r\n                if (dnd.cloneEl.parentNode && this.options.removeCloneOnHide) {\r\n                    dnd.cloneEl.parentNode.removeChild(dnd.cloneEl);\r\n                }\r\n            }\r\n        },\r\n\r\n        _showClone: function(putSortable) {\r\n            var rootEl = dnd.active.el,\r\n                nextEl = dnd.nextEl;\r\n\r\n            if (putSortable.lastPutMode !== 'clone') {\r\n                this._hideClone();\r\n                return;\r\n            }\r\n\r\n            if (dnd.cloneEl.cloneHidden) {\r\n                // show clone at dragEl or original position\r\n                if (rootEl.contains(dnd.dragEl) && !this.options.group.revertClone) {\r\n                    rootEl.insertBefore(dnd.cloneEl, dnd.dragEl);\r\n                } else if (nextEl) {\r\n                    rootEl.insertBefore(dnd.cloneEl, nextEl);\r\n                } else {\r\n                    rootEl.appendChild(dnd.cloneEl);\r\n                }\r\n\r\n                if (this.options.group.revertClone) {\r\n                    this._animate(dnd.dragEl, dnd.cloneEl);\r\n                }\r\n                styler.show(dnd.cloneEl);\r\n                dnd.cloneEl.cloneHidden = false;\r\n            }\r\n        },\r\n\r\n        _onDragEnd: function (/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = dnd.dragEl,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n            autoscroll._nulling();\r\n            \r\n            autoscroll._clearAutoScrolls();\r\n            autoscroll._cancelThrottle();\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.stop();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.stop();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n\r\n            if (this.nativeDraggable) {\r\n                eventer.off(dnd.dragEl, 'dragstart', this._onDragStart);\r\n                eventer.off(dnd.dragEl, 'dragend', this._onDragEnd);\r\n            }\r\n            dnd.end();\r\n            this._nulling();\r\n\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return Draggable;\r\n\r\n});"]}