{"version":3,"sources":["fallback/MousedDragDrop.js"],"names":["define","langx","$","eventer","styler","transforms","ghoster","autoscroll","Emitter","inherit","_construct","dnd","this","$doc","document","listenTo","_onMouseMove","_onMouseUp","evt","putSortable","droppable","_onDrop","dragging","_onDragEnd","remove","destroy","forAutoScroll","ghostEl","draggable","dragEl","tapEvt","options","fallbackTolerance","fallbackOffset","matrix","scaleX","a","scaleY","d","relativeScrollOffset","getRelativeScrollOffset","dx","clientX","x","ghostRelativeParentInitialScroll","dy","clientY","y","translate3d","touches","_dragStarted","awaitingDragStarted","Math","min","abs","_lastX","_lastY","_onDragStart","_appendGhost","body","_loopId","setInterval","_emulateDragOver","bind","_handleAutoScroll","touchEvt","css","preventDefault","target","elementFromPoint","parent","shadowRoot","expando","_onDragOver","rootEl","parentNode","fallback","active","scroll","unlistenTo","clearInterval","_nulling","_clearAutoScrolls","_cancelThrottle"],"mappings":"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","file":"../../fallback/MousedDragDrop.js","sourcesContent":["define([\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-transforms\",\n\t\"./ghoster\",\n\t\"./autoscroll\"\n],function(\n\tlangx,\n\t$,\n\teventer,\n\tstyler,\n\ttransforms,\n\tghoster,\n\tautoscroll\n){\n\tvar MousedDragDrop = langx.Emitter.inherit({\n\t\t_construct : function(dnd) {\n\t\t\tthis.dnd = dnd;\n\n\t\t\tvar $doc = $(document);\n\n\t\t\tthis.listenTo($doc,\"mousemove\",this._onMouseMove);\n\t\t\tthis.listenTo($doc,\"mouseup\",this._onMouseUp);\n\n\t\t},\n\n\t\t_onMouseUp : function(evt) {\n\t\t\tvar dnd = this.dnd;\n        \tif (dnd.putSortable) {\n        \t\tdnd.putSortable.droppable._onDrop(evt)\n        \t}\n        \tif (dnd.dragging) {\n        \t\tdnd.dragging._onDragEnd(evt);\n        \t}\n        \tghoster.remove();\n        \tthis.destroy();\n\t\t},\n\n        _onMouseMove: function (/**TouchEvent*/evt, forAutoScroll) {\n            //dnd.log(\"_onMouseMove\",\"start\");\n            var dnd = this.dnd,\n            \tghostEl = ghoster.ghostEl,\n            \tdraggable = dnd.dragging,\n            \tdragEl = dnd.dragEl,\n            \ttapEvt = dnd.tapEvt;\n            if (tapEvt) {\n                var options =  draggable.options,\n                    fallbackTolerance = options.fallbackTolerance,\n                    fallbackOffset = options.fallbackOffset,\n                    matrix = ghostEl && transforms.matrix(ghostEl),\n                    scaleX = ghostEl && matrix && matrix.a,\n                    scaleY = ghostEl && matrix && matrix.d,\n                    relativeScrollOffset = ghoster.getRelativeScrollOffset(),\n                    dx = ((evt.clientX - tapEvt.clientX)\n                            + fallbackOffset.x) / (scaleX || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n                    dy = ((evt.clientY - tapEvt.clientY)\n                            + fallbackOffset.y) / (scaleY || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n                    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n                // only set the status to dragging, when we are actually dragging\n                if (!this._dragStarted && !dnd.awaitingDragStarted) {\n                    if (fallbackTolerance &&\n                        Math.min( Math.abs(evt.clientX - draggable._lastX),  Math.abs(evt.clientY - draggable._lastY)) < fallbackTolerance\n                    ) {\n                        return;\n                    }\n                    draggable._onDragStart(evt, true);\n\n                    ghoster._appendGhost(dragEl,document.body,draggable.options);\n\n                \t///dnd.ignoreNextClick = true;\n\n                \tthis._dragStarted = true;\n                \tthis._loopId = setInterval(this._emulateDragOver.bind(this), 50);\n\n                }\n\n                !forAutoScroll && this._handleAutoScroll(evt, true);\n\n                ///moved = true;\n                ///dnd.touchEvt = touch;\n                this.touchEvt = evt;\n\n                if (ghostEl) {\n                    styler.css(ghostEl, 'transform', translate3d);\n\n                }\n\n                //evt.cancelable && evt.preventDefault();\n                evt.preventDefault()\n            }\n        },\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tvar dnd = this.dnd,\n\t\t\t\tdragEl = dnd.dragEl,\n\t\t\t\t///touchEvt = dnd.touchEvt;\n\t\t\t\ttouchEvt = this.touchEvt;\n\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t//_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tif (target === parent) break;\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[dnd.expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[dnd.expando].droppable._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//if (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\tif (inserted) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\t///dragEl.parentNode[dnd.expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t//_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tvar dnd = this.dnd;\n\n\t\t\tif (!dnd.dragEl || !dnd.active.options.scroll) return;\n\n\t\t\treturn autoscroll._handleAutoScroll(evt,dnd.active.options,fallback,dnd.expando);\n\t\t},\n\n\t\tdestroy : function() {\n\t\t\tthis.unlistenTo();\n        \tif (this._loopId) {\n        \t\tclearInterval(this._loopId);\n        \t}\n\n            autoscroll._nulling();\n            \n            autoscroll._clearAutoScrolls();\n            autoscroll._cancelThrottle();\n            this._dragStarted = false;\n\t\t}\n\t});\n\n\treturn MousedDragDrop;\n});"]}