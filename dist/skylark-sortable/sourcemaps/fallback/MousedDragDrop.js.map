{"version":3,"sources":["fallback/MousedDragDrop.js"],"names":["define","langx","$","eventer","styler","transforms","ghoster","autoscroll","Emitter","inherit","_construct","dnd","this","$doc","document","listenTo","_onMouseMove","bind","_onMouseUp","evt","putSortable","_onDrop","dragging","_onDragEnd","remove","destroy","forAutoScroll","ghostEl","draggable","active","dragEl","tapEvt","options","fallbackTolerance","fallbackOffset","touch","touches","matrix","scaleX","a","scaleY","d","relativeScrollOffset","getRelativeScrollOffset","dx","clientX","x","ghostRelativeParentInitialScroll","dy","clientY","y","translate3d","_dragStarted","awaitingDragStarted","Math","min","abs","_lastX","_lastY","_onDragStart","_appendGhost","body","_loopId","setInterval","_emulateDragOver","_handleAutoScroll","touchEvt","css","preventDefault","target","elementFromPoint","parent","shadowRoot","expando","_onDragOver","rootEl","parentNode","_computeIsAligned","fallback","scroll","unlistenTo","clearInterval","_nulling","_clearAutoScrolls","_cancelThrottle"],"mappings":";;;;;;;AAAAA,QACC,sBACA,qBACA,uBACA,sBACA,0BACA,YACA,gBACC,SACDC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAkKA,OAhKqBN,EAAMO,QAAQC,SAClCC,WAAa,SAASC,GACrBC,KAAKD,IAAMA,EAEX,IAAIE,EAAOX,EAAEY,UAEbF,KAAKG,SAASF,EAAK,YAAYD,KAAKI,aAAaC,KAAKL,OACtDA,KAAKG,SAASF,EAAK,UAAUD,KAAKM,WAAWD,KAAKL,QAInDM,WAAa,SAASC,GACrB,IAAIR,EAAMC,KAAKD,IACLA,EAAIS,aACPT,EAAIS,YAAYC,QAAQF,GAErBR,EAAIW,UACPX,EAAIW,SAASC,WAAWJ,GAEzBb,EAAQkB,SACRZ,KAAKa,WAGNT,aAAc,SAAyBG,EAAKO,GAExC,IAAIf,EAAMC,KAAKD,IACdgB,EAAUrB,EAAQqB,QAClBC,EAAYjB,EAAIkB,OAChBC,EAASnB,EAAImB,OACbC,EAASpB,EAAIoB,OACd,GAAIA,EAAQ,CACR,IAAIC,EAAWJ,EAAUI,QACrBC,EAAoBD,EAAQC,kBAC5BC,EAAiBF,EAAQE,eACzBC,EAAQhB,EAAIiB,QAAUjB,EAAIiB,QAAQ,GAAKjB,EACvCkB,EAASV,GAAWtB,EAAWgC,OAAOV,GACtCW,EAASX,GAAWU,GAAUA,EAAOE,EACrCC,EAASb,GAAWU,GAAUA,EAAOI,EACrCC,EAAuBpC,EAAQqC,0BAC/BC,GAAOT,EAAMU,QAAUd,EAAOc,QACpBX,EAAeY,IAAMR,GAAU,IAC9BI,EAAwBA,EAAqB,GAAKK,iCAAiC,GAAM,IAAMT,GAAU,GACpHU,GAAOb,EAAMc,QAAUlB,EAAOkB,QACpBf,EAAegB,IAAMV,GAAU,IAC9BE,EAAwBA,EAAqB,GAAKK,iCAAiC,GAAM,IAAMP,GAAU,GACpHW,EAAchC,EAAIiB,QAAU,eAAiBQ,EAAK,MAAQI,EAAK,QAAU,aAAeJ,EAAK,MAAQI,EAAK,MAG9G,IAAKpC,KAAKwC,eAAiBzC,EAAI0C,oBAAqB,CAChD,GAAIpB,GACAqB,KAAKC,IAAKD,KAAKE,IAAIrB,EAAMU,QAAUjB,EAAU6B,QAAUH,KAAKE,IAAIrB,EAAMc,QAAUrB,EAAU8B,SAAWzB,EAErG,OAEJL,EAAU+B,aAAaxC,GAAK,GAE5Bb,EAAQsD,aAAa9B,EAAOhB,SAAS+C,KAAKjC,EAAUI,SAIvDpB,KAAKwC,cAAe,EACpBxC,KAAKkD,QAAUC,YAAYnD,KAAKoD,iBAAiB/C,KAAKL,MAAO,KAI7Dc,GAAiBd,KAAKqD,kBAAkB9B,GAAO,GAIhDvB,KAAKsD,SAAW/B,EAEZR,GAIAvB,EAAO+D,IAAIxC,EAAS,YAAawB,GAKrChC,EAAIiD,mBAIlBJ,iBAAkB,SAAUtC,GAC3B,IAAIf,EAAMC,KAAKD,IACdmB,EAASnB,EAAImB,OAEboC,EAAWtD,KAAKsD,SAEjB,GAAIA,EAAU,CACb,GAAItD,KAAK6C,SAAWS,EAASrB,SAAWjC,KAAK8C,SAAWQ,EAASjB,UAAYvB,EAC5E,OAEDd,KAAK6C,OAASS,EAASrB,QACvBjC,KAAK8C,OAASQ,EAASjB,QAOvB,IAHA,IAAIoB,EAASvD,SAASwD,iBAAiBJ,EAASrB,QAASqB,EAASjB,SAC9DsB,EAASF,EAENA,GAAUA,EAAOG,aACvBH,EAASA,EAAOG,WAAWF,iBAAiBJ,EAASrB,QAASqB,EAASjB,YACxDsB,GACfA,EAASF,EAGV,GAAIE,EACH,EAAG,CACF,GAAIA,EAAO5D,EAAI8D,SAWd,GARWF,EAAO5D,EAAI8D,SAASC,aAC9B7B,QAASqB,EAASrB,QAClBI,QAASiB,EAASjB,QAClBoB,OAAQA,EACRM,OAAQJ,IAKR,MAIFF,EAASE,QAGHA,EAASA,EAAOK,YAExB9C,EAAO8C,WAAWjE,EAAI8D,SAASI,kBAAkBX,KAOnDD,kBAAmB,SAAS9C,EAAK2D,GAChC,IAAInE,EAAMC,KAAKD,IAEf,GAAKA,EAAImB,QAAWnB,EAAIkB,OAAOG,QAAQ+C,OAEvC,OAAOxE,EAAW0D,kBAAkB9C,EAAIR,EAAIkB,OAAOG,QAAQ8C,EAASnE,EAAI8D,UAGzEhD,QAAU,WACTb,KAAKoE,aACKpE,KAAKkD,SACRmB,cAAcrE,KAAKkD,SAGjBvD,EAAW2E,WAEX3E,EAAW4E,oBACX5E,EAAW6E,kBACXxE,KAAKwC,cAAe","file":"../../fallback/MousedDragDrop.js","sourcesContent":["define([\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-transforms\",\n\t\"./ghoster\",\n\t\"./autoscroll\"\n],function(\n\tlangx,\n\t$,\n\teventer,\n\tstyler,\n\ttransforms,\n\tghoster,\n\tautoscroll\n){\n\tvar MousedDragDrop = langx.Emitter.inherit({\n\t\t_construct : function(dnd) {\n\t\t\tthis.dnd = dnd;\n\n\t\t\tvar $doc = $(document);\n\n\t\t\tthis.listenTo($doc,\"mousemove\",this._onMouseMove.bind(this));\n\t\t\tthis.listenTo($doc,\"mouseup\",this._onMouseUp.bind(this));\n\n\t\t},\n\n\t\t_onMouseUp : function(evt) {\n\t\t\tvar dnd = this.dnd;\n        \tif (dnd.putSortable) {\n        \t\tdnd.putSortable._onDrop(evt)\n        \t}\n        \tif (dnd.dragging) {\n        \t\tdnd.dragging._onDragEnd(evt);\n        \t}\n        \tghoster.remove();\n        \tthis.destroy();\n\t\t},\n\n        _onMouseMove: function (/**TouchEvent*/evt, forAutoScroll) {\n            //dnd.log(\"_onMouseMove\",\"start\");\n            var dnd = this.dnd,\n            \tghostEl = ghoster.ghostEl,\n            \tdraggable = dnd.active,\n            \tdragEl = dnd.dragEl,\n            \ttapEvt = dnd.tapEvt;\n            if (tapEvt) {\n                var options =  draggable.options,\n                    fallbackTolerance = options.fallbackTolerance,\n                    fallbackOffset = options.fallbackOffset,\n                    touch = evt.touches ? evt.touches[0] : evt,\n                    matrix = ghostEl && transforms.matrix(ghostEl),\n                    scaleX = ghostEl && matrix && matrix.a,\n                    scaleY = ghostEl && matrix && matrix.d,\n                    relativeScrollOffset = ghoster.getRelativeScrollOffset(),\n                    dx = ((touch.clientX - tapEvt.clientX)\n                            + fallbackOffset.x) / (scaleX || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n                    dy = ((touch.clientY - tapEvt.clientY)\n                            + fallbackOffset.y) / (scaleY || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n                    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n                // only set the status to dragging, when we are actually dragging\n                if (!this._dragStarted && !dnd.awaitingDragStarted) {\n                    if (fallbackTolerance &&\n                        Math.min( Math.abs(touch.clientX - draggable._lastX),  Math.abs(touch.clientY - draggable._lastY)) < fallbackTolerance\n                    ) {\n                        return;\n                    }\n                    draggable._onDragStart(evt, true);\n\n                    ghoster._appendGhost(dragEl,document.body,draggable.options);\n\n                \t///dnd.ignoreNextClick = true;\n\n                \tthis._dragStarted = true;\n                \tthis._loopId = setInterval(this._emulateDragOver.bind(this), 50);\n\n                }\n\n                !forAutoScroll && this._handleAutoScroll(touch, true);\n\n                ///moved = true;\n                ///dnd.touchEvt = touch;\n                this.touchEvt = touch;\n\n                if (ghostEl) {\n                    //styler.css(ghostEl, 'webkitTransform', translate3d);\n                    //styler.css(ghostEl, 'mozTransform', translate3d);\n                    //styler.css(ghostEl, 'msTransform', translate3d);\n                    styler.css(ghostEl, 'transform', translate3d);\n\n                }\n\n                //evt.cancelable && evt.preventDefault();\n                evt.preventDefault()\n            }\n        },\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tvar dnd = this.dnd,\n\t\t\t\tdragEl = dnd.dragEl,\n\t\t\t\t///touchEvt = dnd.touchEvt;\n\t\t\t\ttouchEvt = this.touchEvt;\n\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t//_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tif (target === parent) break;\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[dnd.expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[dnd.expando]._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//if (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\tif (inserted) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\tdragEl.parentNode[dnd.expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t//_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tvar dnd = this.dnd;\n\n\t\t\tif (!dnd.dragEl || !dnd.active.options.scroll) return;\n\n\t\t\treturn autoscroll._handleAutoScroll(evt,dnd.active.options,fallback,dnd.expando);\n\t\t},\n\n\t\tdestroy : function() {\n\t\t\tthis.unlistenTo();\n        \tif (this._loopId) {\n        \t\tclearInterval(this._loopId);\n        \t}\n\n            autoscroll._nulling();\n            \n            autoscroll._clearAutoScrolls();\n            autoscroll._cancelThrottle();\n            this._dragStarted = false;\n\t\t}\n\t});\n\n\treturn MousedDragDrop;\n});"]}