{"version":3,"sources":["fallback/DragDropTouch.js"],"names":["define","DragDropTouch","this","_lastClick","_instance","supportsPassive","document","addEventListener","passive","d","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","prototype","e","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","target","preventDefault","_reset","src","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_ISPRESSHOLDMODE","_pressHoldInterval","_isDragEnabled","_PRESSHOLDAWAIT","_shouldCancelPressHoldMove","_shouldHandleMove","_shouldHandlePressHoldMove","_getTarget","_shouldStartDragging","_createImage","_lastTarget","_moveImage","_isDropZone","_destroyImage","type","indexOf","defaultPrevented","touches","length","_getDelta","_PRESSHOLDMARGIN","delta","_THRESHOLD","_PRESSHOLDTHRESHOLD","_dataTransfer","DataTransfer","clearInterval","page","x","pageX","clientX","y","pageY","clientY","p","Math","abs","pt","el","elementFromPoint","getComputedStyle","pointerEvents","parentElement","_imgCustom","cloneNode","_copyStyle","style","top","left","rc","getBoundingClientRect","_imgOffset","opacity","_OPACITY","toString","body","appendChild","removeChild","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","props","i","_rmvAtts","forEach","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","height","getContext","drawImage","cs","key","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dataTransfer","dispatchEvent","hasAttribute","draggable","split"],"mappings":"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","file":"../../fallback/DragDropTouch.js","sourcesContent":["define([],function(){\r\n    /**\r\n     * Initializes the single instance of the @see:DragDropTouch class.\r\n     */\r\n    function DragDropTouch() {\r\n        this._lastClick = 0;\r\n        // enforce singleton pattern\r\n        if (DragDropTouch._instance) {\r\n            throw 'DragDropTouch instance already created.';\r\n        }\r\n        // detect passive event support\r\n        // https://github.com/Modernizr/Modernizr/issues/1894\r\n        var supportsPassive = false;\r\n        document.addEventListener('test', function () { }, {\r\n            get passive() {\r\n                supportsPassive = true;\r\n                return true;\r\n            }\r\n        });\r\n        // listen to touch events\r\n        if ('ontouchstart' in document) {\r\n            var d = document, ts = this._touchstart.bind(this), tm = this._touchmove.bind(this), te = this._touchend.bind(this), opt = supportsPassive ? { passive: false, capture: false } : false;\r\n            d.addEventListener('touchstart', ts, opt);\r\n            d.addEventListener('touchmove', tm, opt);\r\n            d.addEventListener('touchend', te);\r\n            d.addEventListener('touchcancel', te);\r\n        }\r\n    }\r\n    /**\r\n     * Gets a reference to the @see:DragDropTouch singleton.\r\n     */\r\n    DragDropTouch.getInstance = function () {\r\n        return DragDropTouch._instance;\r\n    };\r\n    // ** event handlers\r\n    DragDropTouch.prototype._touchstart = function (e) {\r\n        var _this = this;\r\n        if (this._shouldHandle(e)) {\r\n            // raise double-click and prevent zooming\r\n            if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                    e.preventDefault();\r\n                    this._reset();\r\n                    return;\r\n                }\r\n            }\r\n            // clear all variables\r\n            this._reset();\r\n            // get nearest draggable element\r\n            var src = this._closestDraggable(e.target);\r\n            if (src) {\r\n                // give caller a chance to handle the hover/move events\r\n                if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                    !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                    // get ready to start dragging\r\n                    this._dragSource = src;\r\n                    this._ptDown = this._getPoint(e);\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    // show context menu if the user hasn't started dragging after a while\r\n                    setTimeout(function () {\r\n                        if (_this._dragSource == src && _this._img == null) {\r\n                            if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                _this._reset();\r\n                            }\r\n                        }\r\n                    }, DragDropTouch._CTXMENU);\r\n                    if (DragDropTouch._ISPRESSHOLDMODE) {\r\n                        this._pressHoldInterval = setTimeout(function () {\r\n                            _this._isDragEnabled = true;\r\n                            _this._touchmove(e);\r\n                        }, DragDropTouch._PRESSHOLDAWAIT);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    DragDropTouch.prototype._touchmove = function (e) {\r\n        if (this._shouldCancelPressHoldMove(e)) {\r\n          this._reset();\r\n          return;\r\n        }\r\n        if (this._shouldHandleMove(e) || this._shouldHandlePressHoldMove(e)) {\r\n            // see if target wants to handle move\r\n            var target = this._getTarget(e);\r\n            if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                this._lastTouch = e;\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            // start dragging\r\n            if (this._dragSource && !this._img && this._shouldStartDragging(e)) {\r\n                this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                this._createImage(e);\r\n                this._dispatchEvent(e, 'dragenter', target);\r\n            }\r\n            // continue dragging\r\n            if (this._img) {\r\n                this._lastTouch = e;\r\n                e.preventDefault(); // prevent scrolling\r\n                if (target != this._lastTarget) {\r\n                    this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                    this._dispatchEvent(e, 'dragenter', target);\r\n                    this._lastTarget = target;\r\n                }\r\n                this._moveImage(e);\r\n                this._isDropZone = this._dispatchEvent(e, 'dragover', target);\r\n            }\r\n        }\r\n    };\r\n    DragDropTouch.prototype._touchend = function (e) {\r\n        if (this._shouldHandle(e)) {\r\n            // see if target wants to handle up\r\n            if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n            // user clicked the element but didn't drag, so clear the source and simulate a click\r\n            if (!this._img) {\r\n                this._dragSource = null;\r\n                this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                this._lastClick = Date.now();\r\n            }\r\n            // finish dragging\r\n            this._destroyImage();\r\n            if (this._dragSource) {\r\n                if (e.type.indexOf('cancel') < 0 && this._isDropZone) {\r\n                    this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                }\r\n                this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                this._reset();\r\n            }\r\n        }\r\n    };\r\n    // ** utilities\r\n    // ignore events that have been handled or that involve more than one touch\r\n    DragDropTouch.prototype._shouldHandle = function (e) {\r\n        return e &&\r\n            !e.defaultPrevented &&\r\n            e.touches && e.touches.length < 2;\r\n    };\r\n\r\n    // use regular condition outside of press & hold mode\r\n    DragDropTouch.prototype._shouldHandleMove = function (e) {\r\n      return !DragDropTouch._ISPRESSHOLDMODE && this._shouldHandle(e);\r\n    };\r\n\r\n    // allow to handle moves that involve many touches for press & hold\r\n    DragDropTouch.prototype._shouldHandlePressHoldMove = function (e) {\r\n      return DragDropTouch._ISPRESSHOLDMODE &&\r\n          this._isDragEnabled && e && e.touches && e.touches.length;\r\n    };\r\n\r\n    // reset data if user drags without pressing & holding\r\n    DragDropTouch.prototype._shouldCancelPressHoldMove = function (e) {\r\n      return DragDropTouch._ISPRESSHOLDMODE && !this._isDragEnabled &&\r\n          this._getDelta(e) > DragDropTouch._PRESSHOLDMARGIN;\r\n    };\r\n\r\n    // start dragging when specified delta is detected\r\n    DragDropTouch.prototype._shouldStartDragging = function (e) {\r\n        var delta = this._getDelta(e);\r\n        return delta > DragDropTouch._THRESHOLD ||\r\n            (DragDropTouch._ISPRESSHOLDMODE && delta >= DragDropTouch._PRESSHOLDTHRESHOLD);\r\n    }\r\n\r\n    // clear all members\r\n    DragDropTouch.prototype._reset = function () {\r\n        this._destroyImage();\r\n        this._dragSource = null;\r\n        this._lastTouch = null;\r\n        this._lastTarget = null;\r\n        this._ptDown = null;\r\n        this._isDragEnabled = false;\r\n        this._isDropZone = false;\r\n        this._dataTransfer = new DataTransfer();\r\n        clearInterval(this._pressHoldInterval);\r\n    };\r\n    // get point for a touch event\r\n    DragDropTouch.prototype._getPoint = function (e, page) {\r\n        if (e && e.touches) {\r\n            e = e.touches[0];\r\n        }\r\n        return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n    };\r\n    // get distance between the current touch event and the first one\r\n    DragDropTouch.prototype._getDelta = function (e) {\r\n        if (DragDropTouch._ISPRESSHOLDMODE && !this._ptDown) { return 0; }\r\n        var p = this._getPoint(e);\r\n        return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n    };\r\n    // get the element at a given touch event\r\n    DragDropTouch.prototype._getTarget = function (e) {\r\n        var pt = this._getPoint(e), el = document.elementFromPoint(pt.x, pt.y);\r\n        while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n            el = el.parentElement;\r\n        }\r\n        return el;\r\n    };\r\n    // create drag image from source element\r\n    DragDropTouch.prototype._createImage = function (e) {\r\n        // just in case...\r\n        if (this._img) {\r\n            this._destroyImage();\r\n        }\r\n        // create drag image from custom element or drag source\r\n        var src = this._imgCustom || this._dragSource;\r\n        this._img = src.cloneNode(true);\r\n        this._copyStyle(src, this._img);\r\n        this._img.style.top = this._img.style.left = '-9999px';\r\n        // if creating from drag source, apply offset and opacity\r\n        if (!this._imgCustom) {\r\n            var rc = src.getBoundingClientRect(), pt = this._getPoint(e);\r\n            this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n            this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n        }\r\n        // add image to document\r\n        this._moveImage(e);\r\n        document.body.appendChild(this._img);\r\n    };\r\n    // dispose of drag image element\r\n    DragDropTouch.prototype._destroyImage = function () {\r\n        if (this._img && this._img.parentElement) {\r\n            this._img.parentElement.removeChild(this._img);\r\n        }\r\n        this._img = null;\r\n        this._imgCustom = null;\r\n    };\r\n    // move the drag image element\r\n    DragDropTouch.prototype._moveImage = function (e) {\r\n        var _this = this;\r\n        requestAnimationFrame(function () {\r\n            if (_this._img) {\r\n                var pt = _this._getPoint(e, true), s = _this._img.style;\r\n                s.position = 'absolute';\r\n                s.pointerEvents = 'none';\r\n                s.zIndex = '999999';\r\n                s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n            }\r\n        });\r\n    };\r\n    // copy properties from an object to another\r\n    DragDropTouch.prototype._copyProps = function (dst, src, props) {\r\n        for (var i = 0; i < props.length; i++) {\r\n            var p = props[i];\r\n            dst[p] = src[p];\r\n        }\r\n    };\r\n    DragDropTouch.prototype._copyStyle = function (src, dst) {\r\n        // remove potentially troublesome attributes\r\n        DragDropTouch._rmvAtts.forEach(function (att) {\r\n            dst.removeAttribute(att);\r\n        });\r\n        // copy canvas content\r\n        if (src instanceof HTMLCanvasElement) {\r\n            var cSrc = src, cDst = dst;\r\n            cDst.width = cSrc.width;\r\n            cDst.height = cSrc.height;\r\n            cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n        }\r\n        // copy style (without transitions)\r\n        var cs = getComputedStyle(src);\r\n        for (var i = 0; i < cs.length; i++) {\r\n            var key = cs[i];\r\n            if (key.indexOf('transition') < 0) {\r\n                dst.style[key] = cs[key];\r\n            }\r\n        }\r\n        dst.style.pointerEvents = 'none';\r\n        // and repeat for all children\r\n        for (var i = 0; i < src.children.length; i++) {\r\n            this._copyStyle(src.children[i], dst.children[i]);\r\n        }\r\n    };\r\n    DragDropTouch.prototype._dispatchEvent = function (e, type, target) {\r\n        if (e && target) {\r\n            var evt = document.createEvent('Event'), t = e.touches ? e.touches[0] : e;\r\n            evt.initEvent(type, true, true);\r\n            evt.button = 0;\r\n            evt.which = evt.buttons = 1;\r\n            this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n            this._copyProps(evt, t, DragDropTouch._ptProps);\r\n            evt.dataTransfer = this._dataTransfer;\r\n            target.dispatchEvent(evt);\r\n            return evt.defaultPrevented;\r\n        }\r\n        return false;\r\n    };\r\n    // gets an element's closest draggable ancestor\r\n    DragDropTouch.prototype._closestDraggable = function (e) {\r\n        for (; e; e = e.parentElement) {\r\n            if (e.hasAttribute('draggable') && e.draggable) {\r\n                return e;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n\r\n    /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    DragDropTouch._ISPRESSHOLDMODE = false; // decides of press & hold mode presence\r\n    DragDropTouch._PRESSHOLDAWAIT = 400; // ms to wait before press & hold is detected\r\n    DragDropTouch._PRESSHOLDMARGIN = 25; // pixels that finger might shiver while pressing\r\n    DragDropTouch._PRESSHOLDTHRESHOLD = 0; // pixels to move before drag starts\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY,offsetX,offsetY'.split(',');\r\n\r\n\r\n\r\n    return DragDropTouch;\r\n});"]}