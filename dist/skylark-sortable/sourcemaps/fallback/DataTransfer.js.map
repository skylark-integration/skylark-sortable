{"version":3,"sources":["fallback/DataTransfer.js"],"names":["define","DataTransfer","this","_dropEffect","_effectAllowed","_data","Object","defineProperty","prototype","get","set","value","enumerable","configurable","keys","clearData","type","getData","setData","setDragImage","img","offsetX","offsetY","ddt","DragDropTouch","_instance","_imgCustom","_imgOffset","x","y"],"mappings":";;;;;;;AAAAA,UAAU,WACN,aAWA,SAASC,IACLC,KAAKC,YAAc,OACnBD,KAAKE,eAAiB,MACtBF,KAAKG,SAmGT,OAhGAC,OAAOC,eAAeN,EAAaO,UAAW,cAK1CC,IAAK,WACD,OAAOP,KAAKC,aAEhBO,IAAK,SAAUC,GACXT,KAAKC,YAAcQ,GAEvBC,YAAY,EACZC,cAAc,IAGlBP,OAAOC,eAAeN,EAAaO,UAAW,iBAM1CC,IAAK,WACD,OAAOP,KAAKE,gBAEhBM,IAAK,SAAUC,GACXT,KAAKE,eAAiBO,GAE1BC,YAAY,EACZC,cAAc,IAGlBP,OAAOC,eAAeN,EAAaO,UAAW,SAI1CC,IAAK,WACD,OAAOH,OAAOQ,KAAKZ,KAAKG,QAE5BO,YAAY,EACZC,cAAc,IAYlBZ,EAAaO,UAAUO,UAAY,SAAUC,GAC7B,MAARA,SACOd,KAAKG,MAAMW,GAGlBd,KAAKG,MAAQ,MAUrBJ,EAAaO,UAAUS,QAAU,SAAUD,GACvC,OAAOd,KAAKG,MAAMW,IAAS,IAY/Bf,EAAaO,UAAUU,QAAU,SAAUF,EAAML,GAC7CT,KAAKG,MAAMW,GAAQL,GAUvBV,EAAaO,UAAUW,aAAe,SAAUC,EAAKC,EAASC,GAC1D,IAAIC,EAAMC,cAAcC,UACxBF,EAAIG,WAAaN,EACjBG,EAAII,YAAeC,EAAGP,EAASQ,EAAGP,IAG/BrB","file":"../../fallback/DataTransfer.js","sourcesContent":["define([],function(){\r\n    'use strict';\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    function DataTransfer() {\r\n        this._dropEffect = 'move';\r\n        this._effectAllowed = 'all';\r\n        this._data = {};\r\n    }\r\n\r\n    Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n        /**\r\n         * Gets or sets the type of drag-and-drop operation currently selected.\r\n         * The value must be 'none',  'copy',  'link', or 'move'.\r\n         */\r\n        get: function () {\r\n            return this._dropEffect;\r\n        },\r\n        set: function (value) {\r\n            this._dropEffect = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    \r\n    Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n        /**\r\n         * Gets or sets the types of operations that are possible.\r\n         * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n         * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n         */\r\n        get: function () {\r\n            return this._effectAllowed;\r\n        },\r\n        set: function (value) {\r\n            this._effectAllowed = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n\r\n    Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n        /**\r\n         * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n         */\r\n        get: function () {\r\n            return Object.keys(this._data);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n\r\n    /**\r\n     * Removes the data associated with a given type.\r\n     *\r\n     * The type argument is optional. If the type is empty or not specified, the data\r\n     * associated with all types is removed. If data for the specified type does not exist,\r\n     * or the data transfer contains no data, this method will have no effect.\r\n     *\r\n     * @param type Type of data to remove.\r\n     */\r\n    DataTransfer.prototype.clearData = function (type) {\r\n        if (type != null) {\r\n            delete this._data[type];\r\n        }\r\n        else {\r\n            this._data = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieves the data for a given type, or an empty string if data for that type does\r\n     * not exist or the data transfer contains no data.\r\n     *\r\n     * @param type Type of data to retrieve.\r\n     */\r\n    DataTransfer.prototype.getData = function (type) {\r\n        return this._data[type] || '';\r\n    };\r\n\r\n    /**\r\n     * Set the data for a given type.\r\n     *\r\n     * For a list of recommended drag types, please see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n     *\r\n     * @param type Type of data to add.\r\n     * @param value Data to add.\r\n     */\r\n    DataTransfer.prototype.setData = function (type, value) {\r\n        this._data[type] = value;\r\n    };\r\n\r\n    /**\r\n     * Set the image to be used for dragging if a custom one is desired.\r\n     *\r\n     * @param img An image element to use as the drag feedback image.\r\n     * @param offsetX The horizontal offset within the image.\r\n     * @param offsetY The vertical offset within the image.\r\n     */\r\n    DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {\r\n        var ddt = DragDropTouch._instance;\r\n        ddt._imgCustom = img;\r\n        ddt._imgOffset = { x: offsetX, y: offsetY };\r\n    };\r\n\r\n    return DataTransfer;\r\n});"]}