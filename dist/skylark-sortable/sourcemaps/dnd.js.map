{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","$","browser","noder","finder","geom","styler","eventer","MousedDragDrop","expando","Date","getTime","dnd","log","category","message","append","activeGroup","active","putSortable","sortables","cloneEl","ignoreNextClick","awaitingDragStarted","touchEvt","prepare","draggable","this","nativeDraggable","_fallbacker","start","event","ownerDocument","elm","on","nearestEmptyInsertDetectEvent","document","_checkAlignment","over","evt","end","dropped","off","_nulling","dragEl","nearest","_detectNearestEmptySortable","clientX","clientY","i","target","rootEl","preventDefault","stopPropagation","_onDragOver","x","y","length","lastChild","ignoreHidden","excluding","ghostEl","rect","boundingRect","threshold","options","emptyInsertThreshold","insideHorizontally","left","right","insideVertically","top","bottom","parentNode","_computeIsAligned","_disableDraggable","el","parentEl","nextEl","tapEvt","oldIndex"],"mappings":";;;;;;;AAAAA,QACC,wBACA,sBACA,qBACA,uBACA,qBACA,sBACA,oBACA,sBACA,uBACA,6BACC,SACDC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEG,aAGH,IAAIC,EAAU,YAAa,IAAKC,MAAMC,UAGlCC,GACHC,IAAM,SAAaC,EAASC,GAC3Bd,EAAE,YAAYe,OAAO,QAAQF,EAAS,IAAIC,EAAQ,WAGnDN,QAAAA,EAEAQ,YAAc,KACdC,OAAS,KACTC,YAAc,KACdC,aAGAC,QAAU,KAEVC,iBAAkB,EACZC,qBAAsB,EAG5BC,SAAW,KAELC,QAAS,SAASC,GACjBC,KAAKD,UAAYA,EACTA,EAAUE,kBACdD,KAAKE,YAAc,IAAIrB,EAAemB,QAK3CG,MAAO,SAASJ,EAAWK,GAC1BJ,KAAKD,UAAYA,EAGvB,IACCM,EADQN,EAAUO,MACCD,cAGpBzB,EAAQ2B,GAAGF,EAAe,WAAYL,KAAKQ,+BAIvCR,KAAKD,UAAUE,iBAENrB,EAAQ2B,GAAGE,SAAU,WAAYT,KAAKU,kBAM9CC,KAAO,SAASC,KAIhBC,IAAK,SAASC,GACjBlC,EAAQmC,IAAIN,SAAU,WAAYT,KAAKQ,+BAGrCR,KAAKD,UAAUE,iBAElBrB,EAAQmC,IAAIN,SAAU,WAAYT,KAAKU,iBAOlCV,KAAKgB,YAGZR,8BAA+B,SAAUI,GACxC,GAAI3B,EAAIc,UAAUkB,OAAQ,CAEzB,IAAIC,EAAUjC,EAAIkC,4BAA4BP,EAAIQ,QAASR,EAAIS,SAE/D,GAAIH,EAAS,CAEZ,IAAId,KACJ,IAAK,IAAIkB,KAAKV,EACbR,EAAMkB,GAAKV,EAAIU,GAEhBlB,EAAMmB,OAASnB,EAAMoB,OAASN,EAC9Bd,EAAMqB,oBAAiB,EACvBrB,EAAMsB,qBAAkB,EACxBR,EAAQpC,GAAS6C,YAAYvB,MAWhCe,4BAA8B,SAASS,EAAGC,GAGzC,IAFA,IAAIpC,EAAYO,KAAKP,UAEZ6B,EAAI,EAAGA,EAAI7B,EAAUqC,OAAQR,IACrC,IAAI7C,EAAOsD,UAAUtC,EAAU6B,IAAIU,cAAe,EAAKC,WAAajC,KAAKkC,WAAzE,CAEA,IAAIC,EAAOzD,EAAK0D,aAAa3C,EAAU6B,IACtCe,EAAY5C,EAAU6B,GAAGxC,GAASwD,QAAQC,qBAC1CC,EAAqBZ,GAAMO,EAAKM,KAAOJ,GAAcT,GAAMO,EAAKO,MAAQL,EACxEM,EAAmBd,GAAMM,EAAKS,IAAMP,GAAcR,GAAMM,EAAKU,OAASR,EAEvE,GAAIA,GAAaG,GAAsBG,EACtC,OAAOlD,EAAU6B,KAKpBZ,gBAAkB,SAASE,GACrB3B,EAAIc,UAAUkB,QAAWhC,EAAIc,UAAUkB,OAAO6B,YACnD7D,EAAIc,UAAUgD,kBAAkBnC,IAIjCoC,kBAAoB,SAAUC,GAC7BA,EAAGlD,WAAY,GAGhBiB,SAAU,WAET/B,EAAIuC,OACJvC,EAAIiE,SAEJjE,EAAIkE,OACJlE,EAAIS,QAIJT,EAAImE,OACJnE,EAAIY,SAEJZ,EAAIoE,SAEJpE,EAAIO,YACJP,EAAIK,YACJL,EAAIM,OAAS,OAQf,OAAON","file":"../dnd.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"./fallback/MousedDragDrop\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer,\r\n\tMousedDragDrop\r\n){\r\n    'use strict';\r\n\r\n\r\n\tvar expando = 'Sortable' + (new Date).getTime();\r\n\r\n\r\n\tvar dnd = {\r\n\t\tlog : function log(category,message) {\r\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\r\n\t\t},\r\n\r\n\t\texpando,\r\n\r\n\t\tactiveGroup : null,\r\n\t\tactive : null,\r\n\t\tputSortable : null,\r\n\t\tsortables : [],\r\n\r\n\r\n\t\tcloneEl : null,\r\n\r\n\t\tignoreNextClick : false,\r\n        awaitingDragStarted : false,\r\n\r\n\r\n\t\ttouchEvt : null,\r\n\r\n        prepare: function(draggable) {\r\n        \tthis.draggable = draggable;\r\n            if (!draggable.nativeDraggable) {\r\n            \tthis._fallbacker = new MousedDragDrop(this);\r\n            }\r\n\r\n\t\t},\r\n\r\n        start: function(draggable, event) {\r\n        \tthis.draggable = draggable;\r\n\r\n\r\n\t\t\tvar el = draggable.elm(),\r\n\t\t\t\townerDocument = el.ownerDocument;\r\n\r\n\r\n\t\t\teventer.on(ownerDocument, 'dragover', this.nearestEmptyInsertDetectEvent);\r\n\t\t\t///eventer.on(ownerDocument, 'mousemove', this.nearestEmptyInsertDetectEvent);\r\n\t\t\t///eventer.on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\r\n\r\n\t\t\tif (this.draggable.nativeDraggable) {\r\n                ///eventer.on(document, 'dragover', this._handleAutoScroll);\r\n                eventer.on(document, 'dragover', this._checkAlignment);\r\n            } else {\r\n                ///eventer.on(document, 'mousemove', this._handleAutoScroll);\r\n            }\r\n        },\r\n\r\n        over : function(evt) {\r\n\t\t\t//this._handleAutoScroll(evt);\r\n        },\r\n\r\n        end: function(dropped) {\r\n\t  \t\teventer.off(document, 'dragover', this.nearestEmptyInsertDetectEvent);\r\n\t  \t\t///eventer.off(document, 'mousemove', this.nearestEmptyInsertDetectEvent);\r\n\t\r\n\t\t\tif (this.draggable.nativeDraggable) {\r\n\t\t\t\t///eventer.off(document, 'dragover', this._handleAutoScroll);\r\n\t\t\t\teventer.off(document, 'dragover', this._checkAlignment);\r\n\t\t\t} else {\r\n\t\t        // Unbind events\r\n\t            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\t\t\t}\r\n\r\n        \tthis._nulling();\r\n \t\t},\r\n\r\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\r\n\t\t\tif (dnd.draggable.dragEl) {\r\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\r\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\r\n\r\n\t\t\t\tif (nearest) {\r\n\t\t\t\t\t// Create imitation event\r\n\t\t\t\t\tvar event = {};\r\n\t\t\t\t\tfor (var i in evt) {\r\n\t\t\t\t\t\tevent[i] = evt[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.target = event.rootEl = nearest;\r\n\t\t\t\t\tevent.preventDefault = void 0;\r\n\t\t\t\t\tevent.stopPropagation = void 0;\r\n\t\t\t\t\tnearest[expando]._onDragOver(event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, \r\n\r\n\t\t/**\r\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\r\n\t\t * @param  {Number} x      X position\r\n\t\t * @param  {Number} y      Y position\r\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\r\n\t\t */\r\n\t\t_detectNearestEmptySortable : function(x, y) {\r\n\t\t\tvar sortables = this.sortables;\r\n\r\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\r\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\r\n\r\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\r\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\r\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\r\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\r\n\r\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\r\n\t\t\t\t\treturn sortables[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_checkAlignment : function(evt) {\r\n\t\t\tif (!dnd.draggable.dragEl || !dnd.draggable.dragEl.parentNode) return;\r\n\t\t\tdnd.draggable._computeIsAligned(evt);\r\n\t\t},\r\n\r\n\r\n\t\t_disableDraggable : function (el) {\r\n\t\t\tel.draggable = false;\r\n\t\t},\r\n\r\n\t\t_nulling: function() {\r\n\r\n\t\t\tdnd.rootEl =\r\n\t\t\tdnd.parentEl =\r\n\t\t\t//ghoster.ghostEl =\r\n\t\t\tdnd.nextEl =\r\n\t\t\tdnd.cloneEl =\r\n\t\t\t///lastDownEl =\r\n\r\n\r\n\t\t\tdnd.tapEvt =\r\n\t\t\tdnd.touchEvt =\r\n\r\n\t\t\tdnd.oldIndex =\r\n\r\n\t\t\tdnd.putSortable =\r\n\t\t\tdnd.activeGroup =\r\n\t\t\tdnd.active = null;\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\r\n\treturn dnd;\r\n\t\r\n});"]}