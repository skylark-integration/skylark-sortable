{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","$","browser","noder","finder","geom","styler","eventer","expando","Date","getTime","dnd","log","category","message","append","activeGroup","active","putSortable","sortables","rootEl","dragEl","cloneEl","nextEl","parentEl","oldIndex","awaitingDragStarted","prepare","draggable","this","dragging","sortable","start","event","over","evt","end","dropped","_nulling","nearestEmptyInsertDetectEvent","nearest","_detectNearestEmptySortable","clientX","clientY","i","target","preventDefault","stopPropagation","_onDragOver","x","y","length","lastChild","ignoreHidden","excluding","ghostEl","rect","boundingRect","threshold","options","emptyInsertThreshold","insideHorizontally","left","right","insideVertically","top","bottom","_disableDraggable","el","tapEvt"],"mappings":";;;;;;;AAAAA,OAAO,CACN,wBACA,sBACA,qBACA,uBACA,qBACA,sBACA,oBACA,sBACA,wBACC,SACDC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEG,aAGH,IAAIC,EAAU,YAAa,IAAKC,MAAMC,QAAQ,EAG1CC,EAAM,CACTC,IAAM,SAAaC,EAASC,GAC3Bb,EAAE,UAAU,EAAEc,OAAO,QAAQF,EAAS,IAAIC,EAAQ,QAAQ,CAC3D,EAEAN,QAAAA,EAEAQ,YAAc,KACdC,OAAS,KACTC,YAAc,KACdC,UAAY,GAGZC,OAAS,KACTC,OAAS,KACTC,QAAU,KACVC,OAAS,KACTC,SAAW,KAEXC,SAAW,KAILC,oBAAsB,CAAA,EAGtBC,QAAS,SAASC,EAAUP,GAC3BQ,KAAKC,SAAWF,EAChBC,KAAKZ,OAASW,EAAUG,SAExBF,KAAKR,OAASA,CAGrB,EAEMW,MAAO,SAASJ,EAAWK,GAC1BJ,KAAKC,SAAWF,EAChBC,KAAKZ,OAASW,EAAUG,QAEzB,EAEAG,KAAO,SAASC,KAIhBC,IAAK,SAASC,GAGbR,KAAKS,SAAS,CACpB,EAEDC,8BAA+B,SAAUJ,GACxC,GAAIxB,EAAIU,OAAQ,CAEf,IAAImB,EAAU7B,EAAI8B,4BAA4BN,EAAIO,QAASP,EAAIQ,OAAO,EAEtE,GAAIH,EAAS,CAEZ,IACSI,EADLX,EAAQ,GACZ,IAASW,KAAKT,EACbF,EAAMW,GAAKT,EAAIS,GAEhBX,EAAMY,OAASZ,EAAMb,OAASoB,EAC9BP,EAAMa,eAAiB,KAAA,EACvBb,EAAMc,gBAAkB,KAAA,EACxBP,EAAQhC,GAASwC,YAAYf,CAAK,CACnC,CACD,CACD,EAQAQ,4BAA8B,SAASQ,EAAGC,GAGzC,IAFA,IAAI/B,EAAYU,KAAKV,UAEZyB,EAAI,EAAGA,EAAIzB,EAAUgC,OAAQP,CAAC,GACtC,GAAIxC,CAAAA,EAAOgD,UAAUjC,EAAUyB,GAAG,CAACS,aAAe,CAAA,EAAKC,UAAY,CAACzB,KAAK0B,QAAQ,CAAC,EAAlF,CAEA,IAAIC,EAAOnD,EAAKoD,aAAatC,EAAUyB,EAAE,EACxCc,EAAYvC,EAAUyB,GAAGpC,GAASmD,QAAQC,qBAC1CC,EAAqBZ,GAAMO,EAAKM,KAAOJ,GAAcT,GAAMO,EAAKO,MAAQL,EACxEM,EAAmBd,GAAMM,EAAKS,IAAMP,GAAcR,GAAMM,EAAKU,OAASR,EAEvE,GAAIA,GAAaG,GAAsBG,EACtC,OAAO7C,EAAUyB,EAR2E,CAW/F,EAEAuB,kBAAoB,SAAUC,GAC7BA,EAAGxC,UAAY,CAAA,CAChB,EAEAU,SAAU,WAET3B,EAAIU,OACJV,EAAIS,OACJT,EAAIa,SAEJb,EAAIY,OACJZ,EAAIW,QAIJX,EAAI0D,OAGJ1D,EAAIc,SAEJd,EAAIO,YACJP,EAAIK,YACJL,EAAIM,OAAS,IAEd,CAGD,EAGA,OAAON,CAER,CAAC","file":"../dnd.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer\r\n){\r\n    'use strict';\r\n\r\n\r\n\tvar expando = 'Sortable' + (new Date).getTime();\r\n\r\n\r\n\tvar dnd = {\r\n\t\tlog : function log(category,message) {\r\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\r\n\t\t},\r\n\r\n\t\texpando,\r\n\r\n\t\tactiveGroup : null,\r\n\t\tactive : null,\r\n\t\tputSortable : null,\r\n\t\tsortables : [],\r\n\r\n\r\n\t\trootEl : null,\r\n\t\tdragEl : null,\r\n\t\tcloneEl : null,\r\n\t\tnextEl : null,\r\n\t\tparentEl : null,\r\n\r\n\t\toldIndex : null,\r\n\r\n\r\n\t\t///ignoreNextClick : false,\r\n        awaitingDragStarted : false,\r\n\t\t///touchEvt : null,\r\n\r\n        prepare: function(draggable,dragEl) {\r\n        \tthis.dragging = draggable;\r\n        \tthis.active = draggable.sortable;\r\n\r\n        \tthis.dragEl = dragEl;\r\n \r\n\r\n\t\t},\r\n\r\n        start: function(draggable, event) {\r\n        \tthis.dragging = draggable;\r\n        \tthis.active = draggable.sortable;\r\n\r\n        },\r\n\r\n        over : function(evt) {\r\n\t\t\t//this._handleAutoScroll(evt);\r\n        },\r\n\r\n        end: function(dropped) {\r\n\r\n\r\n        \tthis._nulling();\r\n \t\t},\r\n\r\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\r\n\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\r\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\r\n\r\n\t\t\t\tif (nearest) {\r\n\t\t\t\t\t// Create imitation event\r\n\t\t\t\t\tvar event = {};\r\n\t\t\t\t\tfor (var i in evt) {\r\n\t\t\t\t\t\tevent[i] = evt[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.target = event.rootEl = nearest;\r\n\t\t\t\t\tevent.preventDefault = void 0;\r\n\t\t\t\t\tevent.stopPropagation = void 0;\r\n\t\t\t\t\tnearest[expando]._onDragOver(event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, \r\n\r\n\t\t/**\r\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\r\n\t\t * @param  {Number} x      X position\r\n\t\t * @param  {Number} y      Y position\r\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\r\n\t\t */\r\n\t\t_detectNearestEmptySortable : function(x, y) {\r\n\t\t\tvar sortables = this.sortables;\r\n\r\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\r\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\r\n\r\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\r\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\r\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\r\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\r\n\r\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\r\n\t\t\t\t\treturn sortables[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_disableDraggable : function (el) {\r\n\t\t\tel.draggable = false;\r\n\t\t},\r\n\r\n\t\t_nulling: function() {\r\n\r\n\t\t\tdnd.dragEl = \r\n\t\t\tdnd.rootEl =\r\n\t\t\tdnd.parentEl =\r\n\t\t\t//ghoster.ghostEl =\r\n\t\t\tdnd.nextEl =\r\n\t\t\tdnd.cloneEl =\r\n\t\t\t///lastDownEl =\r\n\r\n\r\n\t\t\tdnd.tapEvt =\r\n\t\t\t///dnd.touchEvt =\r\n\r\n\t\t\tdnd.oldIndex =\r\n\r\n\t\t\tdnd.putSortable =\r\n\t\t\tdnd.activeGroup =\r\n\t\t\tdnd.active = null;\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\r\n\treturn dnd;\r\n\t\r\n});"]}