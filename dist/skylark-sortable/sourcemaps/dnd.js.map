{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","$","browser","noder","finder","geom","styler","eventer","expando","Date","getTime","dnd","log","category","message","append","activeGroup","active","putSortable","sortables","rootEl","dragEl","cloneEl","nextEl","parentEl","oldIndex","awaitingDragStarted","prepare","draggable","this","dragging","sortable","start","event","over","evt","end","dropped","_nulling","nearestEmptyInsertDetectEvent","nearest","_detectNearestEmptySortable","clientX","clientY","i","target","preventDefault","stopPropagation","_onDragOver","x","y","length","lastChild","ignoreHidden","excluding","ghostEl","rect","boundingRect","threshold","options","emptyInsertThreshold","insideHorizontally","left","right","insideVertically","top","bottom","_disableDraggable","el","tapEvt"],"mappings":";;;;;;;AAAAA,QACC,wBACA,sBACA,qBACA,uBACA,qBACA,sBACA,oBACA,sBACA,wBACC,SACDC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEG,aAGH,IAAIC,EAAU,YAAa,IAAKC,MAAMC,UAGlCC,GACHC,IAAM,SAAaC,EAASC,GAC3Bb,EAAE,YAAYc,OAAO,QAAQF,EAAS,IAAIC,EAAQ,WAGnDN,QAAAA,EAEAQ,YAAc,KACdC,OAAS,KACTC,YAAc,KACdC,aAGAC,OAAS,KACTC,OAAS,KACTC,QAAU,KACVC,OAAS,KACTC,SAAW,KAEXC,SAAW,KAILC,qBAAsB,EAGtBC,QAAS,SAASC,EAAUP,GAC3BQ,KAAKC,SAAWF,EAChBC,KAAKZ,OAASW,EAAUG,SAExBF,KAAKR,OAASA,GAKfW,MAAO,SAASJ,EAAWK,GAC1BJ,KAAKC,SAAWF,EAChBC,KAAKZ,OAASW,EAAUG,UAIzBG,KAAO,SAASC,KAIhBC,IAAK,SAASC,GAGbR,KAAKS,YAGZC,8BAA+B,SAAUJ,GACxC,GAAIxB,EAAIU,OAAQ,CAEf,IAAImB,EAAU7B,EAAI8B,4BAA4BN,EAAIO,QAASP,EAAIQ,SAE/D,GAAIH,EAAS,CAEZ,IAAIP,KACJ,IAAK,IAAIW,KAAKT,EACbF,EAAMW,GAAKT,EAAIS,GAEhBX,EAAMY,OAASZ,EAAMb,OAASoB,EAC9BP,EAAMa,oBAAiB,EACvBb,EAAMc,qBAAkB,EACxBP,EAAQhC,GAASwC,YAAYf,MAWhCQ,4BAA8B,SAASQ,EAAGC,GAGzC,IAFA,IAAI/B,EAAYU,KAAKV,UAEZyB,EAAI,EAAGA,EAAIzB,EAAUgC,OAAQP,IACrC,IAAIxC,EAAOgD,UAAUjC,EAAUyB,IAAIS,cAAe,EAAKC,WAAazB,KAAK0B,WAAzE,CAEA,IAAIC,EAAOnD,EAAKoD,aAAatC,EAAUyB,IACtCc,EAAYvC,EAAUyB,GAAGpC,GAASmD,QAAQC,qBAC1CC,EAAqBZ,GAAMO,EAAKM,KAAOJ,GAAcT,GAAMO,EAAKO,MAAQL,EACxEM,EAAmBd,GAAMM,EAAKS,IAAMP,GAAcR,GAAMM,EAAKU,OAASR,EAEvE,GAAIA,GAAaG,GAAsBG,EACtC,OAAO7C,EAAUyB,KAKpBuB,kBAAoB,SAAUC,GAC7BA,EAAGxC,WAAY,GAGhBU,SAAU,WAET3B,EAAIU,OACJV,EAAIS,OACJT,EAAIa,SAEJb,EAAIY,OACJZ,EAAIW,QAIJX,EAAI0D,OAGJ1D,EAAIc,SAEJd,EAAIO,YACJP,EAAIK,YACJL,EAAIM,OAAS,OAQf,OAAON","file":"../dnd.js","sourcesContent":["define([\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\"\n],function(\n\tskylark,\n\tlangx,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer\n){\n    'use strict';\n\n\n\tvar expando = 'Sortable' + (new Date).getTime();\n\n\n\tvar dnd = {\n\t\tlog : function log(category,message) {\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\n\t\t},\n\n\t\texpando,\n\n\t\tactiveGroup : null,\n\t\tactive : null,\n\t\tputSortable : null,\n\t\tsortables : [],\n\n\n\t\trootEl : null,\n\t\tdragEl : null,\n\t\tcloneEl : null,\n\t\tnextEl : null,\n\t\tparentEl : null,\n\n\t\toldIndex : null,\n\n\n\t\t///ignoreNextClick : false,\n        awaitingDragStarted : false,\n\t\t///touchEvt : null,\n\n        prepare: function(draggable,dragEl) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        \tthis.dragEl = dragEl;\n \n\n\t\t},\n\n        start: function(draggable, event) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        },\n\n        over : function(evt) {\n\t\t\t//this._handleAutoScroll(evt);\n        },\n\n        end: function(dropped) {\n\n\n        \tthis._nulling();\n \t\t},\n\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\n\t\t\tif (dnd.dragEl) {\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\t\tif (nearest) {\n\t\t\t\t\t// Create imitation event\n\t\t\t\t\tvar event = {};\n\t\t\t\t\tfor (var i in evt) {\n\t\t\t\t\t\tevent[i] = evt[i];\n\t\t\t\t\t}\n\t\t\t\t\tevent.target = event.rootEl = nearest;\n\t\t\t\t\tevent.preventDefault = void 0;\n\t\t\t\t\tevent.stopPropagation = void 0;\n\t\t\t\t\tnearest[expando]._onDragOver(event);\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable : function(x, y) {\n\t\t\tvar sortables = this.sortables;\n\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\n\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDraggable : function (el) {\n\t\t\tel.draggable = false;\n\t\t},\n\n\t\t_nulling: function() {\n\n\t\t\tdnd.dragEl = \n\t\t\tdnd.rootEl =\n\t\t\tdnd.parentEl =\n\t\t\t//ghoster.ghostEl =\n\t\t\tdnd.nextEl =\n\t\t\tdnd.cloneEl =\n\t\t\t///lastDownEl =\n\n\n\t\t\tdnd.tapEvt =\n\t\t\t///dnd.touchEvt =\n\n\t\t\tdnd.oldIndex =\n\n\t\t\tdnd.putSortable =\n\t\t\tdnd.activeGroup =\n\t\t\tdnd.active = null;\n\n\t\t}\n\n\n\t};\n\n\n\treturn dnd;\n\t\n});"]}