{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","isBrowser","isMobile","$","browser","noder","finder","geom","styler","eventer","transforms","scrollingElement","oriented","touch","expando","Date","getTime","dnd","active","putSortable","sortables","dragEl","cloneEl","touchEvt","prepare","draggable","ownerDocument","el","on","this","nearestEmptyInsertDetectEvent","start","event","over","end","dropped","evt","touches","nearest","_detectNearestEmptySortable","clientX","clientY","i","target","rootEl","preventDefault","stopPropagation","_onDragOver","x","y","length","lastChild","ignoreHidden","excluding","ghostEl","rect","boundingRect","threshold","options","emptyInsertThreshold","insideHorizontally","left","right","insideVertically","top","bottom","_checkAlignment","parentNode","_computeIsAligned","_emulateDragOver","forAutoScroll","_lastX","_lastY","document","elementFromPoint","parent","shadowRoot","_onMove","fromEl","toEl","dragRect","targetEl","targetRect","originalEvt","willInsertAfter","retVal","sortable","onMoveFn","onMove","create","to","from","dragged","draggedRect","related","relatedRect","originalEvent","dispatchEvent","call","_dispatchEvent","name","startIndex","newIndex","startDraggableIndex","newDraggableIndex","onName","charAt","toUpperCase","substr","item","clone","oldIndex","oldDraggableIndex","pullMode","lastPutMode","undefined"],"mappings":"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","file":"../dnd.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-hoster/isBrowser\",\r\n\t\"skylark-langx-hoster/isMobile\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-transforms\",\r\n\t\"skylark-domx-scrolls/scrollingElement\",\r\n\t\"skylark-domx-layouts/oriented\",\r\n\t\"skylark-devices-points/touch\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\tisBrowser,\r\n\tisMobile,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer,\r\n\ttransforms,\r\n\tscrollingElement,\r\n\toriented,\r\n\ttouch\r\n){\r\n\r\n\tvar expando = 'Sortable' + (new Date).getTime();\r\n\r\n\r\n\tvar dnd = {\r\n\t\texpando,\r\n\r\n\t\tactive : null,\r\n\t\tputSortable : null,\r\n\t\tsortables : [],\r\n\r\n\r\n\t\tdragEl : null,\r\n\t\tcloneEl : null,\r\n\r\n\t\ttouchEvt : null,\r\n\r\n        prepare: function(draggable) {\r\n\t\t\tvar el = draggable.el,\r\n\t\t\t\townerDocument = el.ownerDocument;\r\n\r\n\t\t\teventer.on(ownerDocument, 'dragover', this.nearestEmptyInsertDetectEvent);\r\n\t\t\teventer.on(ownerDocument, 'mousemove', this.nearestEmptyInsertDetectEvent);\r\n\t\t\t///eventer.on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\r\n\t\t},\r\n\r\n        start: function(draggable, event) {\r\n        },\r\n\r\n        over : function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n \t\t},\r\n\r\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\r\n\t\t\tif (dnd.dragEl) {\r\n\t\t\t\tevt = evt.touches ? evt.touches[0] : evt;\r\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\r\n\r\n\t\t\t\tif (nearest) {\r\n\t\t\t\t\t// Create imitation event\r\n\t\t\t\t\tvar event = {};\r\n\t\t\t\t\tfor (var i in evt) {\r\n\t\t\t\t\t\tevent[i] = evt[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.target = event.rootEl = nearest;\r\n\t\t\t\t\tevent.preventDefault = void 0;\r\n\t\t\t\t\tevent.stopPropagation = void 0;\r\n\t\t\t\t\tnearest[expando]._onDragOver(event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, \r\n\r\n\t\t/**\r\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\r\n\t\t * @param  {Number} x      X position\r\n\t\t * @param  {Number} y      Y position\r\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\r\n\t\t */\r\n\t\t_detectNearestEmptySortable : function(x, y) {\r\n\t\t\tvar sortables = this.sortables;\r\n\r\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\r\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\r\n\r\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\r\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\r\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\r\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\r\n\r\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\r\n\t\t\t\t\treturn sortables[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_checkAlignment : function(evt) {\r\n\t\t\tif (!this.dragEl || !this.dragEl.parentNode) return;\r\n\t\t\tthis.dragEl.parentNode[expando] && this.dragEl.parentNode[expando]._computeIsAligned(evt);\r\n\t\t},\r\n\r\n\t\t_emulateDragOver: function (forAutoScroll) {\r\n\t\t\tvar dragEl = this.dragEl,\r\n\t\t\t\ttouchEvt = this.touchEvt;\r\n\r\n\t\t\tif (touchEvt) {\r\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._lastX = touchEvt.clientX;\r\n\t\t\t\tthis._lastY = touchEvt.clientY;\r\n\r\n\t\t\t\t//_hideGhostForTarget();\r\n\r\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\r\n\t\t\t\tvar parent = target;\r\n\r\n\t\t\t\twhile (target && target.shadowRoot) {\r\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\r\n\t\t\t\t\tif (target === parent) break;\r\n\t\t\t\t\tparent = target;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (parent[expando]) {\r\n\t\t\t\t\t\t\tvar inserted;\r\n\r\n\t\t\t\t\t\t\tinserted = parent[expando]._onDragOver({\r\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\r\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\r\n\t\t\t\t\t\t\t\ttarget: target,\r\n\t\t\t\t\t\t\t\trootEl: parent\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t//if (inserted && !this.options.dragoverBubble) {\r\n\t\t\t\t\t\t\tif (inserted) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttarget = parent; // store last element\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* jshint boss:true */\r\n\t\t\t\t\twhile (parent = parent.parentNode);\r\n\t\t\t\t}\r\n\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(touchEvt);\r\n\r\n\t\t\t\t//_unhideGhostForTarget();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onMove : function (fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\t\tvar evt,\r\n\t\t\t\tsortable = fromEl[expando],\r\n\t\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\t\tretVal;\r\n\r\n\t\t\tevt = eventer.create(\"move\",{\r\n\t\t\t\tto : toEl,\r\n\t\t\t\tfrom : fromEl,\r\n\t\t\t\tdragged : dragEl,\r\n\t\t\t\tdraggedRect: dragRect,\r\n\t\t\t\trelated : targetEl || toEl,\r\n\t\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\t\toriginalEvent : originalEvt\r\n\t\t\t});\r\n\r\n\t\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\t\tif (onMoveFn) {\r\n\t\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t},\r\n\r\n\t\t_dispatchEvent : function (\r\n\t\t\tsortable, rootEl, name,\r\n\t\t\ttargetEl, toEl, fromEl,\r\n\t\t\tstartIndex, newIndex,\r\n\t\t\tstartDraggableIndex, newDraggableIndex,\r\n\t\t\toriginalEvt\r\n\t\t) {\r\n\t\t\tsortable = (sortable || rootEl[expando]);\r\n\t\t\tvar evt,\r\n\t\t\t\toptions = sortable.options,\r\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1),\r\n\t\t\t\tputSortable = this.putSortable;\r\n\r\n\t\t\tevt = eventer.create(name,{\r\n\t\t\t\tto : toEl || rootEl,\r\n\t\t\t\tfrom : fromEl || rootEl,\r\n\t\t\t\titem : targetEl || rootEl,\r\n\t\t\t\tclone : this.cloneEl,\r\n\t\t\t\toldIndex : startIndex,\r\n\t\t\t\tnewIndex : newIndex,\r\n\t\t\t\toldDraggableIndex : startDraggableIndex,\r\n\t\t\t\tnewDraggableIndex : newDraggableIndex,\r\n\t\t\t\toriginalEvent : originalEvt,\r\n\t\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\r\n\t\t\t});\r\n\t\t\tif (rootEl) {\r\n\t\t\t\trootEl.dispatchEvent(evt);\r\n\t\t\t}\r\n\r\n\t\t\tif (options[onName]) {\r\n\t\t\t\toptions[onName].call(sortable, evt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t};\r\n\r\n\r\n\treturn dnd;\r\n\t\r\n});"]}