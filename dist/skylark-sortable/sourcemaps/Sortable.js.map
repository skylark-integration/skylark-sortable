{"version":3,"sources":["Sortable.js"],"names":["define","skylark","langx","isBrowser","isMobile","$","browser","noder","finder","geom","styler","eventer","transforms","scrollingElement","oriented","plugins","touch","containers","dnd","lastDownEl","savedInputChecked","newIndex","newDraggableIndex","moved","win","window","document","parseInt","setTimeout","supportDraggable","Polymer","ie","edge","firefox","safari","apple","device","createElement","_silent","support","cssPointerEvents","_alignedSilent","_prepareGroup","options","toFn","value","pull","to","from","dragEl","evt","sameGroup","group","name","otherGroup","join","indexOf","originalGroup","checkPull","checkPut","put","revertClone","Sortable","Plugin","inherit","klassName","pluginName","sort","disabled","store","handle","scroll","scrollSensitivity","scrollSpeed","bubbleScroll","swapThreshold","invertSwap","invertedSwapThreshold","removeCloneOnHide","direction","target","ghostEl","this","el","mixin","excluding","ghostClass","chosenClass","dragClass","ignore","filter","preventOnFilter","animation","easing","setData","dataTransfer","textContent","dropBubble","dragoverBubble","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","devicePixelRatio","fallbackOnBody","forceFallback","fallbackClass","fallbackTolerance","fallbackOffset","x","y","emptyInsertThreshold","_construct","fn","overrided","expando","draggable","test","nodeName","charAt","bind","nativeDraggable","mousy","on","_onMouseDown","sortables","push","get","startIndex","startDraggableIndex","_this","_elm","type","touches","originalTarget","shadowRoot","path","composedPath","root","length","inputs","getElementsByTagName","idx","checked","_saveInputCheckedState","button","isContentEditable","closest","log","tagName","className","_index","call","_dispatchEvent","undefined","cancelable","preventDefault","split","some","criteria","trim","_prepareDragStart","dragStartFn","rootEl","ownerDocument","oldIndex","parentEl","nextEl","oldDraggableIndex","tapEvt","parentNode","nextSibling","activeGroup","clientX","clientY","_lastX","_lastY","style","transition","transform","_triggerDragStart","toggleClass","forEach","ctx","iterator","list","i","n","_find","_disableDraggable","prepare","_onDragEnd","_onDragStart","selection","defer","empty","getSelection","removeAllRanges","err","fallback","cloneEl","clone","_cloneId","insertBefore","effectAllowed","css","awaitingDragStarted","_dragStartId","_dragStarted","start","active","_nulling","putSortable","clearTimeout","_dragStartTimer","stop","off","end","_onMove","fromEl","toEl","dragRect","targetEl","targetRect","originalEvt","willInsertAfter","retVal","sortable","onMoveFn","onMove","create","dragged","draggedRect","related","relatedRect","boundingRect","originalEvent","dispatchEvent","_computeIsAligned","children","sortableMouseAligned","_isClientInRowColumn","_getDirection","_animate","prevRect","ms","currentRect","nodeType","left","width","top","height","matrix","scaleX","a","scaleY","d","_repaint","animated","offsetWidth","_offUpEvents","_onDrop","_onDragOver","revert","activeSortable","isOwner","canSort","elm","contains","completed","ignoreNextClick","lastPutMode","axis","_hideClone","appendChild","elLastChild","lastChild","ignoreHidden","_lastChild","elRect","mouseOnAxis","mouseOnOppAxis","targetS2","bottom","right","targetS1Opp","targetS2Opp","_ghostIsLast","_showClone","changed","nextElementSibling","after","moveVector","_unsilent","insertion","over","nearestEmptyInsertDetectEvent","stopPropagation","remove","save","cloneHidden","hide","show","handleEvent","dropEffect","_globalDragOver","onName","toUpperCase","substr","item","pullMode","toArray","order","getAttribute","generateId","items","id","removeChild","set","selector","option","destroy","_onTapStart","Array","prototype","querySelectorAll","removeAttribute","splice","version","attach"],"mappings":"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","file":"../Sortable.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-hoster/isBrowser\",\r\n\t\"skylark-langx-hoster/isMobile\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-transforms\",\r\n\t\"skylark-domx-scrolls/scrollingElement\",\r\n\t\"skylark-domx-layouts/oriented\",\r\n    \"skylark-domx-plugins\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./containers\",\r\n\t\"./dnd\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\tisBrowser,\r\n\tisMobile,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer,\r\n\ttransforms,\r\n\tscrollingElement,\r\n\toriented,\r\n\tplugins,\r\n\ttouch,\r\n\tcontainers,\r\n\tdnd\r\n){\r\n\r\n\t'use strict';\r\n    var \r\n        lastDownEl,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n\r\n\t function _ghostIsLast(evt, axis, el) {\r\n\t\tvar elRect = geom.boundingRect(finder.lastChild(el,{ignoreHidden : true,excluding : []})),\r\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\r\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\r\n\t\t\tspacer = 10;\r\n\r\n\t\treturn (\r\n\t\t\taxis === 'vertical' ?\r\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\r\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n\t * @param  {HTMLElement} el       Parent element\r\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\r\n\t */\r\n\tfunction _lastChild(el) {\r\n\t\t/*\r\n\t\tvar last = el.lastElementChild;\r\n\r\n\t\twhile (last && (last === ghostEl || styler.css(last, 'display') === 'none')) {\r\n\t\t\tlast = last.previousElementSibling;\r\n\t\t}\r\n\r\n\t\treturn last || null;\r\n\t\t*/\r\n\t\treturn finder.lastChild(el,{\r\n\t\t\tignoreHidden : true,\r\n\t\t\texcluding : [null]\r\n\t\t})\r\n\t}\r\n\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\r\n\tvar \r\n\t\t//parentEl,\r\n\t\t//ghostEl,\r\n\t\t//cloneEl,\r\n\t\t///rootEl,\r\n\t\t///nextEl,\r\n\t\t//lastDownEl,\r\n\r\n\t\t//scrollEl,\r\n\t\t//scrollParentEl,\r\n\t\t//scrollCustomFn,\r\n\r\n\t\t//oldIndex,\r\n\t\tnewIndex,\r\n\t\t//oldDraggableIndex,\r\n\t\tnewDraggableIndex,\r\n\r\n\t\t///activeGroup,\r\n\t\t//putSortable,\r\n\r\n\t\t//awaitingDragStarted = false,\r\n\t\t//ignoreNextClick = false,\r\n\t\t//sortables = [],\r\n\r\n\t\t//pointerElemChangedInterval,\r\n\r\n\t\t//tapEvt,\r\n\t\t//touchEvt,\r\n\r\n\t\tmoved,\r\n\r\n\t\tlastTarget,\r\n\t\tlastDirection,\r\n\t\tpastFirstInvertThresh = false,\r\n\t\tisCircumstantialInvert = false,\r\n\t\tlastMode, // 'swap' or 'insert'\r\n\r\n\t\ttargetMoveDistance,\r\n\r\n\r\n\t\trealDragElRect, // dragEl rect after current animation\r\n\r\n\t\t/** @const */\r\n\t\tR_SPACE = /\\s+/g,\r\n\r\n\t\twin = window,\r\n\t\tdocument = win.document,\r\n\t\tparseInt = win.parseInt,\r\n\t\tsetTimeout = win.setTimeout,\r\n\r\n\t\tPolymer = win.Polymer,\r\n\r\n\t\tcaptureMode = {\r\n\t\t\tcapture: false,\r\n\t\t\tpassive: false\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\r\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\r\n\t\tFireFox = !!navigator.userAgent.match(/firefox/i),\r\n\t\tSafari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),\r\n\r\n\t\tIOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),\r\n\t\t*/\r\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\r\n\t\tEdge = isBrowser && isBrowser.edge,\r\n\t\tFireFox = isBrowser && isBrowser.firefox,\r\n\t\tSafari = isBrowser && isBrowser.safari,\r\n\r\n\t\tIOS = isMobile && isMobile.apple.device,\r\n\r\n\t\t//CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\r\n\r\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\r\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\r\n\r\n\t\t/*\r\n\t\tsupportCssPointerEvents = (function() {\r\n\t\t\t// false when <= IE11\r\n\t\t\tif (IE11OrLess) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar el = document.createElement('x');\r\n\t\t\tel.style.cssText = 'pointer-events:auto';\r\n\t\t\treturn el.style.pointerEvents === 'auto';\r\n\t\t})(),\r\n\t\t*/\r\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents,\r\n\r\n\t\t_silent = false,\r\n\t\t_alignedSilent = false,\r\n\r\n\t\t//savedInputChecked = [],\r\n\r\n\r\n\t\t_prepareGroup = function (options) {\r\n\t\t\tfunction toFn(value, pull) {\r\n\t\t\t\treturn function(to, from, dragEl, evt) {\r\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\r\n\r\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\r\n\t\t\t\t\t\t// Default pull value\r\n\t\t\t\t\t\t// Default pull and put value if same group\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else if (value == null || value === false) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t} else if (pull && value === 'clone') {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t} else if (typeof value === 'function') {\r\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\r\n\r\n\t\t\t\t\t\treturn (value === true ||\r\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\r\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar group = {};\r\n\t\t\tvar originalGroup = options.group;\r\n\r\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\r\n\t\t\t\toriginalGroup = {name: originalGroup};\r\n\t\t\t}\r\n\r\n\t\t\tgroup.name = originalGroup.name;\r\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\r\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\r\n\t\t\tgroup.revertClone = originalGroup.revertClone;\r\n\r\n\t\t\toptions.group = group;\r\n\t\t};\r\n\r\n\r\n\t\t//_hideGhostForTarget = function() {\r\n\t\t//\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t//\t\tstyler.css(ghostEl, 'display', 'none');\r\n\t\t//\t}\r\n\t\t//},\r\n\r\n\t\t//_unhideGhostForTarget = function() {\r\n\t\t//\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t//\t\tstyler.css(ghostEl, 'display', '');\r\n\t\t//\t}\r\n\t\t//};\r\n\r\n\r\n\t/*\r\n\r\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\r\n\tdocument.addEventListener('click', function(evt) {\r\n\t\tif (ignoreNextClick) {\r\n\t\t\tevt.preventDefault();\r\n\t\t\tevt.stopPropagation && evt.stopPropagation();\r\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\r\n\t\t\tignoreNextClick = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}, true);\r\n\r\n\r\n\t// Fixed #973:\r\n\teventer.on(document, 'touchmove', function(evt) {\r\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\r\n\t\t\tevt.preventDefault();\r\n\t\t}\r\n\t});\r\n\t*/\r\n\r\n\r\n\tvar Sortable =  plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n        \r\n        pluginName : \"intg.sortable\",\r\n\r\n\r\n\t\toptions : {\r\n\t\t\tgroup: null,\r\n\t\t\tsort: true,\r\n\t\t\tdisabled: false,\r\n\t\t\tstore: null,\r\n\t\t\thandle: null,\r\n\t\t\tscroll: true,\r\n\t\t\tscrollSensitivity: 30,\r\n\t\t\tscrollSpeed: 10,\r\n\t\t\tbubbleScroll: true,\r\n\t\t\t//draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\r\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\r\n\t\t\tinvertSwap: false, // invert always\r\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\r\n\t\t\tremoveCloneOnHide: true,\r\n\t\t\tdirection: function(evt, target, dragEl,ghostEl) {\r\n\t\t\t\treturn oriented(this.el, langx.mixin({\r\n\t\t\t\t\t\t\t\t\texcluding : [ghostEl,dragEl]\r\n\t\t\t\t\t\t\t\t},this.options));\r\n\t\t\t},\r\n\t\t\tghostClass: 'sortable-ghost',\r\n\t\t\tchosenClass: 'sortable-chosen',\r\n\t\t\tdragClass: 'sortable-drag',\r\n\t\t\tignore: 'a, img',\r\n\t\t\tfilter: null,\r\n\t\t\tpreventOnFilter: true,\r\n\t\t\tanimation: 0,\r\n\t\t\teasing: null,\r\n\t\t\tsetData: function (dataTransfer, dragEl) {\r\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\r\n\t\t\t},\r\n\t\t\tdropBubble: false,\r\n\t\t\tdragoverBubble: false,\r\n\t\t\tdataIdAttr: 'data-id',\r\n\t\t\tdelay: 0,\r\n\t\t\tdelayOnTouchOnly: false,\r\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\r\n\r\n\r\n\t\t\tfallbackOnBody: true,  //fix\r\n\r\n\t\t\tforceFallback: false,\r\n\t\t\tfallbackClass: 'sortable-fallback',\r\n\t\t\tfallbackTolerance: 0,\r\n\t\t\tfallbackOffset: {x: 0, y: 0},\r\n\t\t\t//supportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\r\n\t\t\temptyInsertThreshold: 5\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * @class  Sortable\r\n\t\t * @param  {HTMLElement}  el\r\n\t\t * @param  {Object}       [options]\r\n\t\t */\r\n\t\t_construct : function Sortable(el, options) {\r\n            this.overrided(el,options);\r\n\r\n\t\t\tthis.el = el; // root element\r\n\r\n\t\t\t// Export instance\r\n\t\t\tel[dnd.expando] = this;\r\n\r\n\t\t\toptions = this.options;\r\n\r\n\t\t\toptions.draggable = options.draggable || /[uo]l/i.test(el.nodeName) ? '>li' : '>*';\r\n\r\n\r\n\t\t\t_prepareGroup(options);\r\n\r\n\t\t\t// Bind all private methods\r\n\t\t\tfor (var fn in this) {\r\n\t\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\r\n\t\t\t\t\tthis[fn] = this[fn].bind(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Setup drag mode\r\n\t\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\r\n\t\t\t\tthis.options.touchStartThreshold = 1;\r\n\t\t\t}\r\n\r\n\r\n            // Bind events\r\n            touch.mousy(el);\r\n            eventer.on(el, 'mousedown', this._onMouseDown);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.on(el, 'dragover', this);\r\n\t\t\t\teventer.on(el, 'dragenter', this);\r\n\t\t        eventer.on(el, 'drop', this);\r\n\t\t\t}\r\n\r\n\t\t\tdnd.sortables.push(this.el);\r\n\r\n\t\t\t// Restore sorting\r\n\t\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\r\n\r\n\r\n\t        eventer.on(el, 'selectstart', this);\r\n\r\n\t\t},\r\n\r\n\r\n\t\t//drag start \r\n        // handle moudedown event\r\n        _onMouseDown: function (/** Event|TouchEvent */evt) {\r\n            //if (!evt.cancelable) return;\r\n            var _this = this,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                type = evt.type,\r\n                touch = evt.touches && evt.touches[0],\r\n                target = (touch || evt).target,\r\n                originalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n            // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\r\n            ///if (dnd.dragEl) {\r\n            ///    return;\r\n            ///}\r\n\r\n            if (/mousedown/.test(type) && evt.button !== 0 || options.disabled) {\r\n                return; // only left button and enabled\r\n            }\r\n\r\n            // cancel dnd if original target is content editable\r\n            if (originalTarget.isContentEditable) {\r\n                return;\r\n            }\r\n\r\n            target = finder.closest(target, options.draggable, el, false);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                // Ignoring duplicate `down`\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = containers._index(target);\r\n            startDraggableIndex = containers._index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    _this._dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        _this._dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n                return;\r\n            }\r\n\r\n            // Prepare `dragstart`\r\n            this._prepareDragStart(evt, touch, target, startIndex, startDraggableIndex);\r\n        },\r\n\r\n        _prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex, /** Number */startDraggableIndex) {\r\n            var _this = this,\r\n                el = _this._elm,\r\n                options = _this.options,\r\n                ownerDocument = el.ownerDocument,\r\n                dragStartFn,\r\n                dragEl = this.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex,\r\n                tapEvt = dnd.tapEvt;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = this.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = dnd.tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: (touch || evt).clientX,\r\n                    clientY: (touch || evt).clientY\r\n                };\r\n\r\n                this._lastX = (touch || evt).clientX;\r\n                this._lastY = (touch || evt).clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                dragStartFn = function () {\r\n                    if ( _this.nativeDraggable) {\r\n                        dragEl.draggable = true;\r\n                    }\r\n\r\n                    // Bind the events: dragstart/dragend\r\n                    _this._triggerDragStart(evt, touch);\r\n\r\n                    // Drag start event\r\n                    _this._dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                    // Chosen item\r\n                    styler.toggleClass(dragEl, options.chosenClass, true);\r\n                };\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                //eventer.on(ownerDocument, 'mouseup', _this._onDrop); // TODO : lwf\r\n                ///eventer.on(ownerDocument, 'touchend', _this._onDrop);\r\n                ///eventer.on(ownerDocument, 'touchcancel', _this._onDrop);\r\n\r\n                // Make dragEl draggable (must be before delay for FireFox)\r\n                ///if (FireFox && this.nativeDraggable) {\r\n                if (this.nativeDraggable) {\r\n                   this.options.touchStartThreshold = 4;\r\n                    dragEl.draggable = true;\r\n                }\r\n\r\n                dragStartFn();\r\n            }\r\n        },\r\n\r\n        //native dnd mode : register _OnDragStart for dragstart event handler \r\n        //moused dnd mode : register  _onTouchMove for mousemove event hander, _onTouchMove calls _OnDragStart\r\n        _triggerDragStart: function (/** Event */evt, /** Touch */touch) {\r\n            dnd.log(\"_triggerDragStart\",\"start\");\r\n            dnd.log(\"_triggerDragStart\",\"nativeDraggable is \" +  this.nativeDraggable);\r\n\r\n            dnd.prepare(this);\r\n\r\n            if (!this.nativeDraggable) {\r\n                ////eventer.on(document, 'mousemove', this._onTouchMove);\r\n            } else {\r\n                eventer.on(this.dragEl, 'dragend', this._onDragEnd);\r\n                eventer.on(this.dragEl, 'dragstart', this._onDragStart);\r\n            }\r\n\r\n            try {\r\n                if (document.selection) {\r\n                    // Timeout neccessary for IE9\r\n                    langx.defer(function () {\r\n                        document.selection.empty();\r\n                    });\r\n                } else {\r\n                    window.getSelection().removeAllRanges();\r\n                }\r\n            } catch (err) {\r\n            }\r\n        },\r\n\r\n        _onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\r\n            dnd.log(\"_onDragStart\",\"start\");\r\n            var _this = this,\r\n                dragEl = this.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            //this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                _this._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            if (!fallback){\r\n                styler.toggleClass(dragEl, options.dragClass, true);\r\n            } \r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                //dnd.ignoreNextClick = true;\r\n                //_this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n            _this._dragStartId = langx.defer(_this._dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        },\r\n\r\n        //\r\n        //\r\n        _dragStarted: function (fallback, evt) {\r\n            dnd.awaitingDragStarted = false;\r\n            var dragEl = this.dragEl,\r\n                rootEl = this._elm,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n            if (rootEl && dragEl) {\r\n                //if (this.nativeDraggable) {\r\n                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n                //}\r\n                dnd.start(this);\r\n                var options = this.options;\r\n\r\n                // Apply effect\r\n                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n                // In case dragging an animated element\r\n                styler.css(dragEl, 'transform', '');\r\n\r\n                dnd.active = this;\r\n\r\n                //fallback && this._appendGhost();\r\n\r\n                // Drag start event\r\n                this._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n            } else {\r\n                this._nulling();\r\n            }\r\n        },\r\n\r\n        _onDragEnd: function (/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = this.dragEl,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            //clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.stop();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.stop();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n\r\n            if (this.nativeDraggable) {\r\n                eventer.off(this.dragEl, 'dragstart', this._onDragStart);\r\n                eventer.off(this.dragEl, 'dragend', this._onDragEnd);\r\n            }\r\n\r\n            lastDownEl = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n           \tthis.dragEl = null;\r\n\r\n            dnd.end();\r\n\r\n        },\r\n\r\n\r\n\t\t_onMove : function (fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\t\tvar evt,\r\n\t\t\t\tsortable = fromEl[dnd.expando],\r\n\t\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\t\tretVal;\r\n\r\n\t\t\tevt = eventer.create(\"move\",{\r\n\t\t\t\tto : toEl,\r\n\t\t\t\tfrom : fromEl,\r\n\t\t\t\tdragged : dragEl,\r\n\t\t\t\tdraggedRect: dragRect,\r\n\t\t\t\trelated : targetEl || toEl,\r\n\t\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\t\toriginalEvent : originalEvt\r\n\t\t\t});\r\n\r\n\t\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\t\tif (onMoveFn) {\r\n\t\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t},\r\n\r\n\t\t_computeIsAligned: function(evt) {\r\n\t\t\tvar target,\r\n\t\t\t\tdragEl = dnd.draggable.dragEl;\r\n\r\n\t\t\t//if (ghostEl && !supportCssPointerEvents) {\r\n\t\t\t//\t_hideGhostForTarget();\r\n\t\t\t//\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\r\n\t\t\t//\t_unhideGhostForTarget();\r\n\t\t\t//} else {\r\n\t\t\t\ttarget = evt.target;\r\n\t\t\t//}\r\n\r\n\t\t\ttarget = finder.closest(target, this.options.draggable, this.el, false);\r\n\t\t\tif (_alignedSilent) return;\r\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\r\n\r\n\t\t\tvar children = this.el.children;\r\n\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\r\n\t\t\t\tif (finder.closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\r\n\t\t\t\t\tchildren[i].sortableMouseAligned = containers._isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\r\n\t\t\tif (!finder.closest(target, this.options.draggable, this.el, true)) {\r\n\t\t\t\tlastTarget = null;\r\n\t\t\t}\r\n\r\n\t\t\t_alignedSilent = true;\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\t_alignedSilent = false;\r\n\t\t\t}, 30);\r\n\r\n\t\t},\r\n\r\n\t\t_getDirection: function(evt, target) {\r\n\t\t\tvar  dragEl = dnd.draggable.dragEl;\r\n\r\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl,null) : this.options.direction;\r\n\t\t},\r\n\r\n\r\n\r\n\t\t_animate: function (prevRect, target) {\r\n\t\t\tvar ms = this.options.animation,\r\n\t\t\t\tdragEl = dnd.draggable.dragEl;\r\n\r\n\t\t\tif (ms) {\r\n\t\t\t\tvar currentRect = geom.boundingRect(target);\r\n\r\n\t\t\t\tif (target === dragEl) {\r\n\t\t\t\t\trealDragElRect = currentRect;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (prevRect.nodeType === 1) {\r\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if actually moving position\r\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\r\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\r\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\r\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\r\n\r\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\r\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\r\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis._repaint(target);\r\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\r\n\t\t\t\ttarget.animated = setTimeout(function () {\r\n\t\t\t\t\tstyler.css(target, 'transition', '');\r\n\t\t\t\t\tstyler.css(target, 'transform', '');\r\n\t\t\t\t\ttarget.animated = false;\r\n\t\t\t\t}, ms);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_repaint: function(target) {\r\n\t\t\treturn target.offsetWidth;\r\n\t\t},\r\n\r\n\t\t//_offMoveEvents: function() {\r\n\t   //\t\teventer.off(document, 'dragover', dnd.nearestEmptyInsertDetectEvent);\r\n\t   //\t\teventer.off(document, 'mousemove', dnd.nearestEmptyInsertDetectEvent);\r\n       //\t},\r\n\r\n\t\t_offUpEvents: function () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t},\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = dnd.active,\r\n\t\t\t\tisOwner = (dnd.activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\t_this = this,\r\n\t\t\t\tdragEl = dnd.draggable.dragEl,\r\n\t\t\t\trootEl = dnd.draggable.elm(),\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex;\r\n            //dnd.log(\"_onDragOver\",\"start\");\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(_this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== _this && _this !== dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable = _this;\r\n\t\t\t\t\t} else if (_this === dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable =  null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && _this._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && _this._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t//_this._handleAutoScroll(evt);\r\n\t\t\t\t\tdnd.over(evt);\r\n\t\t\t\t\tdragEl.parentNode[dnd.expando]._computeIsAligned(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && dnd.nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\t_this._dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, containers._index(dragEl), oldDraggableIndex, containers._index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = containers._index(dragEl),\r\n\t\t\t\t\ttargetIndex = containers._index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (target !== dragEl) {\r\n\t\t\t\tdnd.ignoreNextClick = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = dnd.activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = this._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tdnd.parentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = _lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tdnd.parentEl = el; // actualization\r\n\t\t\t\t\t\trealDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = autoscroll._isScrolledPast(target, 'top') || autoscroll._isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tcontainers._isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tvar direction = 1;\r\n\r\n\t\t\t\t\trealDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\t//if (scrolledPastTop) {\r\n\t\t\t\t\t\t//\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t//}\r\n\r\n\t\t\t\t\t\tdnd.parentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\t//if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t//\ttargetMoveDistance =  Math.abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t_onDrop: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\trootEl = dnd.draggable.elm(),\r\n\t\t\t\tdragEl = dnd.draggable.dragEl,\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tparentEl = dnd.parentEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\t\t\t\tnextEl = dnd.nextEl;\r\n\r\n\t\t\t/*\r\n\t\t\tawaitingDragStarted = false;\r\n\t\t\tscrolling = false;\r\n\r\n\t\t\tclearInterval(this._loopId);\r\n\r\n\t\t\tclearInterval(pointerElemChangedInterval);\r\n\t\t\t\r\n\t\t\tautoscroll._clearAutoScrolls();\r\n\t\t\tautoscroll._cancelThrottle();\r\n\r\n\t\t\tclearTimeout(this._dragStartTimer);\r\n\r\n\t\t\t_cancelNextTick(this._cloneId);\r\n\t\t\t_cancelNextTick(this._dragStartId);\r\n\t\t\t*/\r\n\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t// Unbind events\r\n\t\t\t//eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t\t///eventer.off(el, 'dragstart', this._onDragStart);\r\n\t\t\t\t//eventer.off(document, 'dragover', this._handleAutoScroll);\r\n\t\t\t\t//eventer.off(document, 'dragover', dnd._checkAlignment);\r\n\t\t\t}\r\n\r\n\t\t\t///if (Safari) {\r\n\t\t\t///\tstyler.css(document.body, 'user-select', '');\r\n\t\t\t///}\r\n\r\n\t\t\t//this._offMoveEvents();\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//ghoster.remove();\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tnoder.remove(dnd.cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\t\t\t\t\t///if (this.nativeDraggable) {\r\n\t\t\t\t\t///\teventer.off(dragEl, 'dragend', this);\r\n\t\t\t\t\t///}\r\n\r\n\t\t\t\t\tdnd._disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class'sd\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = containers._index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = containers._index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\tthis._dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\tthis._dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = containers._index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = containers._index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis._dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tthis.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t},\r\n\r\n\t\t_nulling: function() {\r\n\r\n\r\n\r\n\t\t\t/*\r\n\t\t\tdnd.rootEl =\r\n\t\t\tdnd.dragEl =\r\n\t\t\tdnd.parentEl =\r\n\t\t\tghoster.ghostEl =\r\n\t\t\tdnd.nextEl =\r\n\t\t\tdnd.cloneEl =\r\n\t\t\t///lastDownEl =\r\n\r\n\t\t\tautoscroll.scrollEl =\r\n\t\t\tautoscroll.scrollParentEl =\r\n\t\t\tautoscroll.autoScrolls.length =\r\n\t\t\t*/\r\n\t\t\t//pointerElemChangedInterval =\r\n\r\n\t\t\t//tapEvt =\r\n\t\t\t//dnd.touchEvt =\r\n\r\n\t\t\tmoved =\r\n\t\t\tnewIndex =\r\n\t\t\t//dnd.oldIndex =\r\n\r\n\t\t\tlastTarget =\r\n\t\t\tlastDirection =\r\n\r\n\t\t\trealDragElRect =\r\n\r\n\t\t\t//dnd.putSortable =\r\n\t\t\t//dnd.activeGroup =\r\n\t\t\t//dnd.active = \r\n\t\t\tnull;\r\n\r\n\t\t},\r\n\r\n        _hideClone: function() {\r\n            if (!dnd.cloneEl.cloneHidden) {\r\n                styler.hide(dnd.cloneEl);\r\n                dnd.cloneEl.cloneHidden = true;\r\n                if (dnd.cloneEl.parentNode && this.options.removeCloneOnHide) {\r\n                    noder.remove(dnd.cloneEl);\r\n                }\r\n            }\r\n        },\r\n\r\n        _showClone: function(putSortable) {\r\n            var rootEl = dnd.active.el,\r\n                nextEl = dnd.nextEl;\r\n\r\n            if (putSortable.lastPutMode !== 'clone') {\r\n                this._hideClone();\r\n                return;\r\n            }\r\n\r\n            if (dnd.cloneEl.cloneHidden) {\r\n                // show clone at dragEl or original position\r\n                if (rootEl.contains(dnd.draggable.dragEl) && !this.options.group.revertClone) {\r\n                    rootEl.insertBefore(dnd.cloneEl, dnd.draggable.dragEl);\r\n                } else if (nextEl) {\r\n                    rootEl.insertBefore(dnd.cloneEl, nextEl);\r\n                } else {\r\n                    rootEl.appendChild(dnd.cloneEl);\r\n                }\r\n\r\n                if (this.options.group.revertClone) {\r\n                    this._animate(dnd.draggable.dragEl, dnd.cloneEl);\r\n                }\r\n                styler.show(dnd.cloneEl);\r\n                dnd.cloneEl.cloneHidden = false;\r\n            }\r\n        },\r\n\r\n\t\thandleEvent: function (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dnd.draggable.dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t_dispatchEvent : function (\r\n\t\t\tsortable, rootEl, name,\r\n\t\t\ttargetEl, toEl, fromEl,\r\n\t\t\tstartIndex, newIndex,\r\n\t\t\tstartDraggableIndex, newDraggableIndex,\r\n\t\t\toriginalEvt\r\n\t\t) {\r\n\t\t\tsortable = (sortable || rootEl[expando]);\r\n\t\t\tvar evt,\r\n\t\t\t\toptions = sortable.options,\r\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1),\r\n\t\t\t\tputSortable = this.putSortable;\r\n\r\n\t\t\tevt = eventer.create(name,{\r\n\t\t\t\tto : toEl || rootEl,\r\n\t\t\t\tfrom : fromEl || rootEl,\r\n\t\t\t\titem : targetEl || rootEl,\r\n\t\t\t\tclone : this.cloneEl,\r\n\t\t\t\toldIndex : startIndex,\r\n\t\t\t\tnewIndex : newIndex,\r\n\t\t\t\toldDraggableIndex : startDraggableIndex,\r\n\t\t\t\tnewDraggableIndex : newDraggableIndex,\r\n\t\t\t\toriginalEvent : originalEvt,\r\n\t\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\r\n\t\t\t});\r\n\t\t\tif (rootEl) {\r\n\t\t\t\trootEl.dispatchEvent(evt);\r\n\t\t\t}\r\n\r\n\t\t\tif (options[onName]) {\r\n\t\t\t\toptions[onName].call(sortable, evt);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Serializes the item into an array of string.\r\n\t\t * @returns {String[]}\r\n\t\t */\r\n\t\ttoArray: function () {\r\n\t\t\tvar order = [],\r\n\t\t\t\tel,\r\n\t\t\t\tchildren = this.el.children,\r\n\t\t\t\ti = 0,\r\n\t\t\t\tn = children.length,\r\n\t\t\t\toptions = this.options;\r\n\r\n\t\t\tfor (; i < n; i++) {\r\n\t\t\t\tel = children[i];\r\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\r\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || noder.generateId(el));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn order;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Sorts the elements according to the array.\r\n\t\t * @param  {String[]}  order  order of the items\r\n\t\t */\r\n\t\tsort: function (order) {\r\n\t\t\tvar items = {}, rootEl = this.el;\r\n\r\n\t\t\tthis.toArray().forEach(function (id, i) {\r\n\t\t\t\tvar el = rootEl.children[i];\r\n\r\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\r\n\t\t\t\t\titems[id] = el;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\torder.forEach(function (id) {\r\n\t\t\t\tif (items[id]) {\r\n\t\t\t\t\trootEl.removeChild(items[id]);\r\n\t\t\t\t\trootEl.appendChild(items[id]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Save the current sorting\r\n\t\t */\r\n\t\tsave: function () {\r\n\t\t\tvar store = this.options.store;\r\n\t\t\tstore && store.set && store.set(this);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\r\n\t\t * @param   {HTMLElement}  el\r\n\t\t * @param   {String}       [selector]  default: `options.draggable`\r\n\t\t * @returns {HTMLElement|null}\r\n\t\t */\r\n\t\tclosest: function (el, selector) {\r\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set/get option\r\n\t\t * @param   {string} name\r\n\t\t * @param   {*}      [value]\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\toption: function (name, value) {\r\n\t\t\tvar options = this.options;\r\n\r\n\t\t\tif (value === void 0) {\r\n\t\t\t\treturn options[name];\r\n\t\t\t} else {\r\n\t\t\t\toptions[name] = value;\r\n\r\n\t\t\t\tif (name === 'group') {\r\n\t\t\t\t\t_prepareGroup(options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Destroy\r\n\t\t */\r\n\t\tdestroy: function () {\r\n\t\t\tvar el = this.el;\r\n\r\n\t\t\tel[dnd.expando] = null;\r\n\r\n\t\t\teventer.off(el, 'mousedown', this._onTapStart);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(el, 'dragover', this);\r\n\t\t\t\teventer.off(el, 'dragenter', this);\r\n\t\t\t}\r\n\t\t\t// Remove draggable attributes\r\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\r\n\t\t\t\tel.removeAttribute('draggable');\r\n\t\t\t});\r\n\r\n\t\t\tthis._onDrop();\r\n\r\n\t\t\tdnd.sortables.splice(dnd.sortables.indexOf(this.el), 1);\r\n\r\n\t\t\tthis.el = el = null;\r\n\t\t}\r\n\t});\r\n\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Create sortable instance\r\n\t * @param {HTMLElement}  el\r\n\t * @param {Object}      [options]\r\n\t */\r\n\tSortable.create = function (el, options) {\r\n\t\treturn new Sortable(el, options);\r\n\t};\r\n\r\n\r\n\t// Export\r\n\tSortable.version = '1.9.0';\r\n\r\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\r\n});"]}