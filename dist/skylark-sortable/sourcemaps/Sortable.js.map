{"version":3,"sources":["Sortable.js"],"names":["define","skylark","langx","isBrowser","isMobile","$","browser","noder","finder","geom","styler","eventer","transforms","scrollingElement","oriented","plugins","touch","autoscroll","containers","dnd","ghoster","Draggable","newIndex","newDraggableIndex","moved","lastTarget","lastDirection","lastMode","targetMoveDistance","pastFirstInvertThresh","isCircumstantialInvert","win","window","document","parseInt","setTimeout","supportDraggable","Polymer","ie","edge","firefox","safari","apple","device","createElement","_silent","support","cssPointerEvents","_alignedSilent","_prepareGroup","options","toFn","value","pull","to","from","dragEl","evt","sameGroup","group","name","otherGroup","join","indexOf","originalGroup","checkPull","checkPut","put","revertClone","Sortable","Plugin","inherit","klassName","pluginName","sort","disabled","store","handle","scroll","scrollSensitivity","scrollSpeed","bubbleScroll","swapThreshold","invertSwap","invertedSwapThreshold","removeCloneOnHide","direction","target","ghostEl","this","el","mixin","excluding","ghostClass","chosenClass","dragClass","ignore","filter","preventOnFilter","animation","easing","setData","dataTransfer","textContent","dropBubble","dragoverBubble","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","devicePixelRatio","forceFallback","fallbackClass","fallbackOnBody","fallbackTolerance","fallbackOffset","x","y","emptyInsertThreshold","_construct","fn","overrided","expando","draggable","test","nodeName","charAt","bind","nativeDraggable","sortable","on","sortables","push","get","_computeIsAligned","closest","parentNode","children","i","length","sortableMouseAligned","_isClientInRowColumn","clientX","clientY","_getDirection","call","_animate","prevRect","ms","currentRect","boundingRect","nodeType","left","width","top","height","matrix","scaleX","a","scaleY","d","css","_repaint","animated","clearTimeout","offsetWidth","_offUpEvents","ownerDocument","off","_onDrop","_onDragOver","dragRect","targetRect","revert","activeSortable","active","isOwner","activeGroup","canSort","_this","rootEl","elm","putSortable","nextEl","oldIndex","oldDraggableIndex","preventDefault","cancelable","contains","completed","ignoreNextClick","lastPutMode","axis","_hideClone","parentEl","insertBefore","appendChild","elLastChild","_lastChild","_ghostIsLast","_showClone","_onMove","changed","targetBeforeFirstSwap","aligned","differentLevel","side1","scrolledPastTop","_isScrolledPast","scrollBefore","scrollTop","_isElInRowColumn","isLastTarget","mouseOnAxis","targetLength","targetS1","targetS2","bottom","right","invert","_getInsertDirection","_getSwapDirection","nextSibling","nextElementSibling","after","moveVector","_unsilent","scrollBy","undefined","Math","abs","insertion","toggleClass","over","nearestEmptyInsertDetectEvent","stopPropagation","_dispatchEvent","_index","remove","cloneEl","removeChild","_disableDraggable","style","save","_nulling","handleEvent","type","dropEffect","_globalDragOver","toArray","order","n","getAttribute","generateId","items","forEach","id","set","selector","option","destroy","_onTapStart","Array","prototype","querySelectorAll","removeAttribute","splice","create","version","attach"],"mappings":"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","file":"../Sortable.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-hoster/isBrowser\",\r\n\t\"skylark-langx-hoster/isMobile\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-transforms\",\r\n\t\"skylark-domx-scrolls/scrollingElement\",\r\n\t\"skylark-domx-layouts/oriented\",\r\n    \"skylark-domx-plugins\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./autoscroll\",\r\n\t\"./containers\",\r\n\t\"./dnd\",\r\n\t\"./ghoster\",\r\n\t\"./Draggable\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\tisBrowser,\r\n\tisMobile,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer,\r\n\ttransforms,\r\n\tscrollingElement,\r\n\toriented,\r\n\tplugins,\r\n\ttouch,\r\n\tautoscroll,\r\n\tcontainers,\r\n\tdnd,\r\n\tghoster,\r\n\tDraggable\r\n){\r\n\r\n\t'use strict';\r\n\r\n\tvar \r\n\t\t//parentEl,\r\n\t\t//ghostEl,\r\n\t\t//cloneEl,\r\n\t\t///rootEl,\r\n\t\t///nextEl,\r\n\t\t//lastDownEl,\r\n\r\n\t\t//scrollEl,\r\n\t\t//scrollParentEl,\r\n\t\t//scrollCustomFn,\r\n\r\n\t\t//oldIndex,\r\n\t\tnewIndex,\r\n\t\t//oldDraggableIndex,\r\n\t\tnewDraggableIndex,\r\n\r\n\t\t///activeGroup,\r\n\t\t//putSortable,\r\n\r\n\t\t//awaitingDragStarted = false,\r\n\t\t//ignoreNextClick = false,\r\n\t\t//sortables = [],\r\n\r\n\t\t//pointerElemChangedInterval,\r\n\t\tlastPointerElemX,\r\n\t\tlastPointerElemY,\r\n\r\n\t\t//tapEvt,\r\n\t\t//touchEvt,\r\n\r\n\t\tmoved,\r\n\r\n\t\tlastTarget,\r\n\t\tlastDirection,\r\n\t\tpastFirstInvertThresh = false,\r\n\t\tisCircumstantialInvert = false,\r\n\t\tlastMode, // 'swap' or 'insert'\r\n\r\n\t\ttargetMoveDistance,\r\n\r\n\r\n\t\trealDragElRect, // dragEl rect after current animation\r\n\r\n\t\t/** @const */\r\n\t\tR_SPACE = /\\s+/g,\r\n\r\n\t\twin = window,\r\n\t\tdocument = win.document,\r\n\t\tparseInt = win.parseInt,\r\n\t\tsetTimeout = win.setTimeout,\r\n\r\n\t\tPolymer = win.Polymer,\r\n\r\n\t\tcaptureMode = {\r\n\t\t\tcapture: false,\r\n\t\t\tpassive: false\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\r\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\r\n\t\tFireFox = !!navigator.userAgent.match(/firefox/i),\r\n\t\tSafari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),\r\n\r\n\t\tIOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),\r\n\t\t*/\r\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\r\n\t\tEdge = isBrowser && isBrowser.edge,\r\n\t\tFireFox = isBrowser && isBrowser.firefox,\r\n\t\tSafari = isBrowser && isBrowser.safari,\r\n\r\n\t\tIOS = isMobile && isMobile.apple.device,\r\n\r\n\t\t//CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\r\n\r\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\r\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\r\n\r\n\t\t/*\r\n\t\tsupportCssPointerEvents = (function() {\r\n\t\t\t// false when <= IE11\r\n\t\t\tif (IE11OrLess) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar el = document.createElement('x');\r\n\t\t\tel.style.cssText = 'pointer-events:auto';\r\n\t\t\treturn el.style.pointerEvents === 'auto';\r\n\t\t})(),\r\n\t\t*/\r\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents,\r\n\r\n\t\t_silent = false,\r\n\t\t_alignedSilent = false,\r\n\r\n\t\t//savedInputChecked = [],\r\n\r\n\r\n\t\t_prepareGroup = function (options) {\r\n\t\t\tfunction toFn(value, pull) {\r\n\t\t\t\treturn function(to, from, dragEl, evt) {\r\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\r\n\r\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\r\n\t\t\t\t\t\t// Default pull value\r\n\t\t\t\t\t\t// Default pull and put value if same group\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else if (value == null || value === false) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t} else if (pull && value === 'clone') {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t} else if (typeof value === 'function') {\r\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\r\n\r\n\t\t\t\t\t\treturn (value === true ||\r\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\r\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar group = {};\r\n\t\t\tvar originalGroup = options.group;\r\n\r\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\r\n\t\t\t\toriginalGroup = {name: originalGroup};\r\n\t\t\t}\r\n\r\n\t\t\tgroup.name = originalGroup.name;\r\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\r\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\r\n\t\t\tgroup.revertClone = originalGroup.revertClone;\r\n\r\n\t\t\toptions.group = group;\r\n\t\t};\r\n\r\n\r\n\t\t//_hideGhostForTarget = function() {\r\n\t\t//\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t//\t\tstyler.css(ghostEl, 'display', 'none');\r\n\t\t//\t}\r\n\t\t//},\r\n\r\n\t\t//_unhideGhostForTarget = function() {\r\n\t\t//\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t//\t\tstyler.css(ghostEl, 'display', '');\r\n\t\t//\t}\r\n\t\t//};\r\n\r\n\r\n\t/*\r\n\r\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\r\n\tdocument.addEventListener('click', function(evt) {\r\n\t\tif (ignoreNextClick) {\r\n\t\t\tevt.preventDefault();\r\n\t\t\tevt.stopPropagation && evt.stopPropagation();\r\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\r\n\t\t\tignoreNextClick = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}, true);\r\n\r\n\r\n\t// Fixed #973:\r\n\teventer.on(document, 'touchmove', function(evt) {\r\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\r\n\t\t\tevt.preventDefault();\r\n\t\t}\r\n\t});\r\n\t*/\r\n\r\n\r\n\tvar Sortable =  plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n        \r\n        pluginName : \"intg.sortable\",\r\n\r\n\r\n\t\toptions : {\r\n\t\t\tgroup: null,\r\n\t\t\tsort: true,\r\n\t\t\tdisabled: false,\r\n\t\t\tstore: null,\r\n\t\t\thandle: null,\r\n\t\t\tscroll: true,\r\n\t\t\tscrollSensitivity: 30,\r\n\t\t\tscrollSpeed: 10,\r\n\t\t\tbubbleScroll: true,\r\n\t\t\t//draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\r\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\r\n\t\t\tinvertSwap: false, // invert always\r\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\r\n\t\t\tremoveCloneOnHide: true,\r\n\t\t\tdirection: function(evt, target, dragEl,ghostEl) {\r\n\t\t\t\treturn oriented(this.el, langx.mixin({\r\n\t\t\t\t\t\t\t\t\texcluding : [ghostEl,dragEl]\r\n\t\t\t\t\t\t\t\t},this.options));\r\n\t\t\t},\r\n\t\t\tghostClass: 'sortable-ghost',\r\n\t\t\tchosenClass: 'sortable-chosen',\r\n\t\t\tdragClass: 'sortable-drag',\r\n\t\t\tignore: 'a, img',\r\n\t\t\tfilter: null,\r\n\t\t\tpreventOnFilter: true,\r\n\t\t\tanimation: 0,\r\n\t\t\teasing: null,\r\n\t\t\tsetData: function (dataTransfer, dragEl) {\r\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\r\n\t\t\t},\r\n\t\t\tdropBubble: false,\r\n\t\t\tdragoverBubble: false,\r\n\t\t\tdataIdAttr: 'data-id',\r\n\t\t\tdelay: 0,\r\n\t\t\tdelayOnTouchOnly: false,\r\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\r\n\t\t\tforceFallback: false,\r\n\t\t\tfallbackClass: 'sortable-fallback',\r\n\t\t\tfallbackOnBody: false,\r\n\t\t\tfallbackTolerance: 0,\r\n\t\t\tfallbackOffset: {x: 0, y: 0},\r\n\t\t\t//supportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\r\n\t\t\temptyInsertThreshold: 5\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * @class  Sortable\r\n\t\t * @param  {HTMLElement}  el\r\n\t\t * @param  {Object}       [options]\r\n\t\t */\r\n\t\t_construct : function Sortable(el, options) {\r\n            this.overrided(el,options);\r\n\r\n\t\t\tthis.el = el; // root element\r\n\r\n\t\t\t// Export instance\r\n\t\t\tel[dnd.expando] = this;\r\n\r\n\t\t\toptions = this.options;\r\n\r\n\t\t\toptions.draggable = options.draggable || /[uo]l/i.test(el.nodeName) ? '>li' : '>*';\r\n\r\n\r\n\t\t\t_prepareGroup(options);\r\n\r\n\t\t\t// Bind all private methods\r\n\t\t\tfor (var fn in this) {\r\n\t\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\r\n\t\t\t\t\tthis[fn] = this[fn].bind(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Setup drag mode\r\n\t\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\r\n\r\n\t\t\t///if (this.nativeDraggable) {\r\n\t\t\t///\t// Touch start threshold cannot be greater than the native dragstart threshold\r\n\t\t\t///\tthis.options.touchStartThreshold = 1;\r\n\t\t\t///}\r\n\r\n\t\t\t// Bind events\r\n\t\t\t///touch.mousy(el);\r\n\r\n\t\t\t///eventer.on(el, 'mousedown', this._onTapStart);\r\n\r\n\t\t\tthis.draggable = new Draggable(this.el,langx.mixin({\r\n\t\t\t\tnativeDraggable : this.nativeDraggable,\r\n\t\t\t\tsortable : this\r\n\t\t\t},this.options));\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.on(el, 'dragover', this);\r\n\t\t\t\teventer.on(el, 'dragenter', this);\r\n\t\t        eventer.on(el, 'drop', this);\r\n\t\t\t}\r\n\r\n\t\t\tdnd.sortables.push(this.el);\r\n\r\n\t\t\t// Restore sorting\r\n\t\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\r\n\r\n\r\n\t        eventer.on(el, 'selectstart', this);\r\n\r\n\t\t},\r\n\r\n\r\n\t\t_computeIsAligned: function(evt) {\r\n\t\t\tvar target,\r\n\t\t\t\tdragEl = dnd.dragEl;\r\n\r\n\t\t\t//if (ghostEl && !supportCssPointerEvents) {\r\n\t\t\t//\t_hideGhostForTarget();\r\n\t\t\t//\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\r\n\t\t\t//\t_unhideGhostForTarget();\r\n\t\t\t//} else {\r\n\t\t\t\ttarget = evt.target;\r\n\t\t\t//}\r\n\r\n\t\t\ttarget = finder.closest(target, this.options.draggable, this.el, false);\r\n\t\t\tif (_alignedSilent) return;\r\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\r\n\r\n\t\t\tvar children = this.el.children;\r\n\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\r\n\t\t\t\tif (finder.closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\r\n\t\t\t\t\tchildren[i].sortableMouseAligned = containers._isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\r\n\t\t\tif (!finder.closest(target, this.options.draggable, this.el, true)) {\r\n\t\t\t\tlastTarget = null;\r\n\t\t\t}\r\n\r\n\t\t\t_alignedSilent = true;\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\t_alignedSilent = false;\r\n\t\t\t}, 30);\r\n\r\n\t\t},\r\n\r\n\t\t_getDirection: function(evt, target) {\r\n\t\t\tvar  dragEl = dnd.dragEl;\r\n\r\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl,ghoster.ghostEl) : this.options.direction;\r\n\t\t},\r\n\r\n\r\n\r\n\t\t_animate: function (prevRect, target) {\r\n\t\t\tvar ms = this.options.animation,\r\n\t\t\t\tdragEl = dnd.dragEl;\r\n\r\n\t\t\tif (ms) {\r\n\t\t\t\tvar currentRect = geom.boundingRect(target);\r\n\r\n\t\t\t\tif (target === dragEl) {\r\n\t\t\t\t\trealDragElRect = currentRect;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (prevRect.nodeType === 1) {\r\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if actually moving position\r\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\r\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\r\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\r\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\r\n\r\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\r\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\r\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis._repaint(target);\r\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\r\n\t\t\t\ttarget.animated = setTimeout(function () {\r\n\t\t\t\t\tstyler.css(target, 'transition', '');\r\n\t\t\t\t\tstyler.css(target, 'transform', '');\r\n\t\t\t\t\ttarget.animated = false;\r\n\t\t\t\t}, ms);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_repaint: function(target) {\r\n\t\t\treturn target.offsetWidth;\r\n\t\t},\r\n\r\n\t\t//_offMoveEvents: function() {\r\n\t   //\t\teventer.off(document, 'dragover', dnd.nearestEmptyInsertDetectEvent);\r\n\t   //\t\teventer.off(document, 'mousemove', dnd.nearestEmptyInsertDetectEvent);\r\n       //\t},\r\n\r\n\t\t_offUpEvents: function () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t},\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = dnd.active,\r\n\t\t\t\tisOwner = (dnd.activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\t_this = this,\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\trootEl = dnd.draggable.elm(),\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex;\r\n            //dnd.log(\"_onDragOver\",\"start\");\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable.draggable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable.draggable._showClone(_this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== _this && _this !== dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable = _this;\r\n\t\t\t\t\t} else if (_this === dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable =  null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && _this._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && _this._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t//_this._handleAutoScroll(evt);\r\n\t\t\t\t\tdnd.over(evt);\r\n\t\t\t\t\tdragEl.parentNode[dnd.expando]._computeIsAligned(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && dnd.nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\tdnd._dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, containers._index(dragEl), oldDraggableIndex, containers._index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = containers._index(dragEl),\r\n\t\t\t\t\ttargetIndex = containers._index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (target !== dragEl) {\r\n\t\t\t\tdnd.ignoreNextClick = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = dnd.activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = this._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tdnd.parentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = ghoster._lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || ghoster._ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable.draggable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable.draggable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tdnd.parentEl = el; // actualization\r\n\t\t\t\t\t\trealDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = autoscroll._isScrolledPast(target, 'top') || autoscroll._isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tcontainers._isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\r\n\t\t\t\t\trealDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = dnd._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable.draggable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable.draggable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\tif (scrolledPastTop) {\r\n\t\t\t\t\t\t\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdnd.parentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t\ttargetMoveDistance =  Math.abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t_onDrop: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\trootEl = dnd.draggable.elm(),\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tparentEl = dnd.parentEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\t\t\t\tnextEl = dnd.nextEl;\r\n\r\n\t\t\t/*\r\n\t\t\tawaitingDragStarted = false;\r\n\t\t\tscrolling = false;\r\n\r\n\t\t\tclearInterval(this._loopId);\r\n\r\n\t\t\tclearInterval(pointerElemChangedInterval);\r\n\t\t\t\r\n\t\t\tautoscroll._clearAutoScrolls();\r\n\t\t\tautoscroll._cancelThrottle();\r\n\r\n\t\t\tclearTimeout(this._dragStartTimer);\r\n\r\n\t\t\t_cancelNextTick(this._cloneId);\r\n\t\t\t_cancelNextTick(this._dragStartId);\r\n\t\t\t*/\r\n\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t// Unbind events\r\n\t\t\t//eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t\t///eventer.off(el, 'dragstart', this._onDragStart);\r\n\t\t\t\t//eventer.off(document, 'dragover', this._handleAutoScroll);\r\n\t\t\t\t//eventer.off(document, 'dragover', dnd._checkAlignment);\r\n\t\t\t}\r\n\r\n\t\t\t///if (Safari) {\r\n\t\t\t///\tstyler.css(document.body, 'user-select', '');\r\n\t\t\t///}\r\n\r\n\t\t\t//this._offMoveEvents();\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tghoster.remove();\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tdnd.cloneEl && dnd.cloneEl.parentNode && dnd.cloneEl.parentNode.removeChild(dnd.cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\t\t\t\t\t///if (this.nativeDraggable) {\r\n\t\t\t\t\t///\teventer.off(dragEl, 'dragend', this);\r\n\t\t\t\t\t///}\r\n\r\n\t\t\t\t\tdnd._disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class'sd\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = containers._index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = containers._index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\tdnd._dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\tdnd._dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = containers._index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = containers._index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdnd._dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tthis.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t},\r\n\r\n\t\t_nulling: function() {\r\n\t\t\t/*\r\n\t\t\tdnd.rootEl =\r\n\t\t\tdnd.dragEl =\r\n\t\t\tdnd.parentEl =\r\n\t\t\tghoster.ghostEl =\r\n\t\t\tdnd.nextEl =\r\n\t\t\tdnd.cloneEl =\r\n\t\t\t///lastDownEl =\r\n\r\n\t\t\tautoscroll.scrollEl =\r\n\t\t\tautoscroll.scrollParentEl =\r\n\t\t\tautoscroll.autoScrolls.length =\r\n\t\t\t*/\r\n\t\t\t//pointerElemChangedInterval =\r\n\t\t\tlastPointerElemX =\r\n\t\t\tlastPointerElemY =\r\n\r\n\t\t\t//tapEvt =\r\n\t\t\t//dnd.touchEvt =\r\n\r\n\t\t\tmoved =\r\n\t\t\tnewIndex =\r\n\t\t\t//dnd.oldIndex =\r\n\r\n\t\t\tlastTarget =\r\n\t\t\tlastDirection =\r\n\r\n\t\t\trealDragElRect =\r\n\r\n\t\t\t//dnd.putSortable =\r\n\t\t\t//dnd.activeGroup =\r\n\t\t\t//dnd.active = \r\n\t\t\tnull;\r\n\r\n\t\t},\r\n\r\n\t\thandleEvent: function (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Serializes the item into an array of string.\r\n\t\t * @returns {String[]}\r\n\t\t */\r\n\t\ttoArray: function () {\r\n\t\t\tvar order = [],\r\n\t\t\t\tel,\r\n\t\t\t\tchildren = this.el.children,\r\n\t\t\t\ti = 0,\r\n\t\t\t\tn = children.length,\r\n\t\t\t\toptions = this.options;\r\n\r\n\t\t\tfor (; i < n; i++) {\r\n\t\t\t\tel = children[i];\r\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\r\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || noder.generateId(el));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn order;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Sorts the elements according to the array.\r\n\t\t * @param  {String[]}  order  order of the items\r\n\t\t */\r\n\t\tsort: function (order) {\r\n\t\t\tvar items = {}, rootEl = this.el;\r\n\r\n\t\t\tthis.toArray().forEach(function (id, i) {\r\n\t\t\t\tvar el = rootEl.children[i];\r\n\r\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\r\n\t\t\t\t\titems[id] = el;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\torder.forEach(function (id) {\r\n\t\t\t\tif (items[id]) {\r\n\t\t\t\t\trootEl.removeChild(items[id]);\r\n\t\t\t\t\trootEl.appendChild(items[id]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Save the current sorting\r\n\t\t */\r\n\t\tsave: function () {\r\n\t\t\tvar store = this.options.store;\r\n\t\t\tstore && store.set && store.set(this);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\r\n\t\t * @param   {HTMLElement}  el\r\n\t\t * @param   {String}       [selector]  default: `options.draggable`\r\n\t\t * @returns {HTMLElement|null}\r\n\t\t */\r\n\t\tclosest: function (el, selector) {\r\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set/get option\r\n\t\t * @param   {string} name\r\n\t\t * @param   {*}      [value]\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\toption: function (name, value) {\r\n\t\t\tvar options = this.options;\r\n\r\n\t\t\tif (value === void 0) {\r\n\t\t\t\treturn options[name];\r\n\t\t\t} else {\r\n\t\t\t\toptions[name] = value;\r\n\r\n\t\t\t\tif (name === 'group') {\r\n\t\t\t\t\t_prepareGroup(options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Destroy\r\n\t\t */\r\n\t\tdestroy: function () {\r\n\t\t\tvar el = this.el;\r\n\r\n\t\t\tel[dnd.expando] = null;\r\n\r\n\t\t\teventer.off(el, 'mousedown', this._onTapStart);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(el, 'dragover', this);\r\n\t\t\t\teventer.off(el, 'dragenter', this);\r\n\t\t\t}\r\n\t\t\t// Remove draggable attributes\r\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\r\n\t\t\t\tel.removeAttribute('draggable');\r\n\t\t\t});\r\n\r\n\t\t\tthis._onDrop();\r\n\r\n\t\t\tdnd.sortables.splice(dnd.sortables.indexOf(this.el), 1);\r\n\r\n\t\t\tthis.el = el = null;\r\n\t\t}\r\n\t});\r\n\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Create sortable instance\r\n\t * @param {HTMLElement}  el\r\n\t * @param {Object}      [options]\r\n\t */\r\n\tSortable.create = function (el, options) {\r\n\t\treturn new Sortable(el, options);\r\n\t};\r\n\r\n\r\n\t// Export\r\n\tSortable.version = '1.9.0';\r\n\r\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\r\n});"]}