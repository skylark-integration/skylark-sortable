{"version":3,"sources":["draggable.js"],"names":["define","langx","finder","styler","eventer","noder","DndDraggable","dnd","lastDownEl","savedInputChecked","_find","ctx","tagName","iterator","list","getElementsByTagName","i","n","length","_index","el","selector","index","nodeName","toUpperCase","cloneEl","matches","_saveInputCheckedState","root","inputs","idx","checked","push","constructor","sortable","options","this","_elm","elm","self","_dndDraggable","forceFallback","source","draggable","handle","preparing","e","_onPrepare","started","_onDragStart","originalEvent","ended","_onDragEnd","evt","startIndex","startDraggableIndex","preventOnFilter","target","dragSource","filter","log","className","call","_dispatchEvent","originalTarget","undefined","preventDefault","split","some","criteria","closest","trim","ownerDocument","oldDraggableIndex","dragEl","parentEl","nextEl","oldIndex","tapEvt","parentNode","rootEl","nextSibling","activeGroup","group","clientX","clientY","_lastX","_lastY","style","transition","transform","ignore","forEach","_disableDraggable","prepare","toggleClass","chosenClass","fallback","_this","dataTransfer","clone","_cloneId","defer","removeCloneOnHide","insertBefore","dragClass","effectAllowed","setData","css","awaitingDragStarted","_dragStartId","start","ghostClass","_nulling","bind","putSortable","clearTimeout","_dragStartTimer","cancel","end"],"mappings":"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","file":"../draggable.js","sourcesContent":["define([\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n    \"skylark-domx-plugins-dnd/draggable\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,DndDraggable,dnd){\r\n    var \r\n        lastDownEl,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\tclass Draggable {\r\n\t\tconstructor(sortable,options) {\r\n            this.sortable = sortable;\r\n            var el = this._elm = sortable.elm();\r\n            this.options = options;\r\n\r\n            var self = this;\r\n\r\n            this._dndDraggable = new DndDraggable(el,{\r\n                forceFallback : this.options.forceFallback,\r\n                source : this.options.draggable,\r\n                handle : this.options.handle,\r\n                preparing : function(e) {\r\n                    self._onPrepare(e);\r\n                },\r\n\r\n                started: function(e) {\r\n                    self._onDragStart(e.originalEvent);\r\n                },\r\n\r\n                ended : function(e) {\r\n                    self._onDragEnd(e.originalEvent);\r\n                }\r\n            });\r\n\t\t}\r\n\r\n\t\telm() {\r\n\t\t\treturn this._elm;\r\n\t\t}\r\n        // handle moudedown event\r\n        _onPrepare(evt) {\r\n            var sortable = this.sortable,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                target = evt.dragSource,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                evt.dragSource = null;\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = _index(target);\r\n            startDraggableIndex = _index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    sortable._dispatchEvent(sortable, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    if (preventOnFilter) {\r\n                        evt.preventDefault = true;\r\n                    }\r\n                    evt.dragSource = null;\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        sortable._dispatchEvent(sortable, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        evt.dragSource = null;\r\n                        return; // cancel dnd\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    if (preventOnFilter) {\r\n                        evt.preventDefault = true;\r\n                    }\r\n                    evt.dragSource = null;\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            ///if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n            ///    return;\r\n            ///}\r\n\r\n            // Prepare `dragstart`\r\n            var\r\n                ownerDocument = el.ownerDocument,\r\n                dragEl = dnd.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex,\r\n                tapEvt = dnd.tapEvt;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = dnd.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = dnd.tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: evt.originalEvent.clientX,\r\n                    clientY: evt.originalEvent.clientY\r\n                };\r\n\r\n                this._lastX = evt.originalEvent.clientX;\r\n                this._lastY = evt.originalEvent.clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                // Bind the events: dragstart/dragend\r\n                ///sortable._triggerDragStart(evt, touch);\r\n\r\n                dnd.prepare(this,dnd.dragEl);\r\n\r\n                // Drag start event\r\n                sortable._dispatchEvent(sortable, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                // Chosen item\r\n                styler.toggleClass(dragEl, options.chosenClass, true);\r\n            }\r\n        }\r\n\r\n\r\n        _onDragStart(/**Event*/evt, /**boolean*/fallback) {\r\n            dnd.log(\"_onDragStart\",\"start\");\r\n            var _this = this,\r\n                dragEl = dnd.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            //this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                _this.sortable._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            if (!fallback){\r\n                styler.toggleClass(dragEl, options.dragClass, true);\r\n            } \r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                //dnd.ignoreNextClick = true;\r\n                //_this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n\r\n\t        function _dragStarted(fallback, evt) {\r\n\t            dnd.awaitingDragStarted = false;\r\n\t            var dragEl = dnd.dragEl,\r\n\t                rootEl = this._elm,\r\n\t                oldIndex = dnd.oldIndex,\r\n\t                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n\t            if (rootEl && dragEl) {\r\n\t                //if (this.nativeDraggable) {\r\n\t                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n\t                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n\t                //}\r\n\t                dnd.start(this);\r\n\t                var options = this.options;\r\n\r\n\t                // Apply effect\r\n\t                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n\t                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n\t                // In case dragging an animated element\r\n\t                styler.css(dragEl, 'transform', '');\r\n\r\n\t                //dnd.active = this;\r\n\r\n\t                //fallback && this._appendGhost();\r\n\r\n\t                // Drag start event\r\n\t                this.sortable._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n\t            } else {\r\n\t                this._nulling();\r\n\t            }\r\n\t        }\r\n\r\n            _this._dragStartId = langx.defer(_dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        }\r\n\r\n        //\r\n        //\r\n\r\n        _onDragEnd(/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = dnd.dragEl,\r\n                sortable = this.sortable,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            //clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.cancel();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.cancel();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n            lastDownEl = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n           \t//this.dragEl = null;\r\n\r\n            dnd.end();\r\n\r\n\r\n        }\r\n\r\n\t}\r\n\r\n\r\n\treturn Draggable;\r\n\r\n});"]}