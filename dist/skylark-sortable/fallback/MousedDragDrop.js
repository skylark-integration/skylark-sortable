/**
 * skylark-sortable - A version of sortable.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-sortable/
 * @license MIT
 */
define(["skylark-langx/langx","skylark-domx-query","skylark-domx-eventer","skylark-domx-styler","skylark-domx-transforms","./ghoster","./autoscroll"],function(t,e,o,n,a,l,i){return t.Emitter.inherit({_construct:function(t){this.dnd=t;var o=e(document);this.listenTo(o,"mousemove",this._onMouseMove),this.listenTo(o,"mouseup",this._onMouseUp)},_onMouseUp:function(t){var e=this.dnd;e.putSortable&&e.putSortable.droppable._onDrop(t),e.dragging&&e.dragging._onDragEnd(t),l.remove(),this.destroy()},_onMouseMove:function(t){var e=this.dnd,o=l.ghostEl,i=e.dragging,r=e.dragEl,s=e.tapEvt;if(s){var d=i.options,c=d.fallbackTolerance,h=d.fallbackOffset,u=o&&a.matrix(o),g=o&&u&&u.a,_=o&&u&&u.d,p=l.getRelativeScrollOffset(),f=(t.clientX-s.clientX+h.x)/(g||1)+(p?p[0]-ghostRelativeParentInitialScroll[0]:0)/(g||1),v=(t.clientY-s.clientY+h.y)/(_||1)+(p?p[1]-ghostRelativeParentInitialScroll[1]:0)/(_||1),m=t.touches?"translate3d("+f+"px,"+v+"px,0)":"translate("+f+"px,"+v+"px)";if(!this._dragStarted&&!e.awaitingDragStarted){if(c&&Math.min(Math.abs(t.clientX-i._lastX),Math.abs(t.clientY-i._lastY))<c)return;i._onDragStart(t,!0),l._appendGhost(r,document.body,i.options),this._dragStarted=!0,this._loopId=setInterval(this._emulateDragOver.bind(this),50)}this._handleAutoScroll(t,!0),this.touchEvt=t,o&&n.css(o,"transform",m),t.preventDefault()}},_emulateDragOver:function(t){var e=this.dnd,o=(e.dragEl,this.touchEvt);if(o){if(this._lastX===o.clientX&&this._lastY===o.clientY&&!t)return;this._lastX=o.clientX,this._lastY=o.clientY;for(var n=document.elementFromPoint(o.clientX,o.clientY),a=n;n&&n.shadowRoot&&(n=n.shadowRoot.elementFromPoint(o.clientX,o.clientY))!==a;)a=n;if(a)do{if(a[e.expando])if(a[e.expando].droppable._onDragOver({clientX:o.clientX,clientY:o.clientY,target:n,rootEl:a}))break;n=a}while(a=a.parentNode)}},_handleAutoScroll:function(t,e){var o=this.dnd;if(o.dragEl&&o.active.options.scroll)return i._handleAutoScroll(t,o.active.options,e,o.expando)},destroy:function(){this.unlistenTo(),this._loopId&&clearInterval(this._loopId),i._nulling(),i._clearAutoScrolls(),i._cancelThrottle(),this._dragStarted=!1}})});
//# sourceMappingURL=../sourcemaps/fallback/MousedDragDrop.js.map
