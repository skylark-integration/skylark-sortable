{"version":3,"sources":["skylark-sortable.js"],"names":["define","hoster","detects","browser","window","document","ua","toLowerCase","match","exec","indexOf","platform_match","matched","version","versionNumber","platform","parseInt","android","bb","blackberry","ipad","iphone","ipod","kindle","playbook","silk","mobile","cros","mac","linux","win","desktop","chrome","opr","safari","webkit","rv","iemobile","edge","name","uaMatch","navigator","userAgent","detectBrowser","undefined","isBrowser","langx","geom","styler","finder","scrollingElement","scrollEl","scrollCustomFn","pointerElemChangedInterval","lastPointerElemX","lastPointerElemY","autoScrolls","scrollParentEl","ie","firefox","_throttleTimeout","_autoScroll","_throttle","evt","options","rootEl","isFallback","expando","scroll","_this","sens","scrollSensitivity","speed","scrollSpeed","x","clientX","y","clientY","winScroller","scrollThisInstance","_clearAutoScrolls","scrollFn","scrollableParent","layersOut","currentParent","scrollWidth","scrollHeight","css","vx","vy","canScrollX","canScrollY","scrollPosX","scrollPosY","el","rect","boundingRect","top","bottom","left","right","width","height","scrollLeft","scrollTop","overflowX","overflowY","Math","abs","i","clearInterval","pid","setInterval","scrollOffsetY","this","layer","scrollOffsetX","call","scrollBy","bind","bubbleScroll","forEach","autoScroll","callback","ms","debounce","_getRelativeScrollOffset","offsets","scrollOffset","offsetLeft","offsetTop","_handleAutoScroll","fallback","ogElemScroller","elementFromPoint","newElem","_cancelThrottle","stop","_nulling","length","Orientation","elCSS","elWidth","contentRect","child1","childAt","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginSize","secondChildWidth","display","flexDirection","Vertical","Horizontal","gridTemplateColumns","split","float","touchingSideChild2","clear","skylark","isMobile","$","noder","eventer","transforms","oriented","touch","_getRect","adjustForTransform","container","adjustForFixed","getBoundingClientRect","matrix","scaleX","a","scaleY","d","ghoster","ghostEl","PositionGhostAbsolutely","apple","device","ghostRelativeParent","ghostRelativeParentInitialScroll","_appendGhost","dragEl","parentNode","ghostRelativeParentRect","body","documentElement","autoscroll","cloneNode","toggleClass","ghostClass","fallbackClass","dragClass","box-sizing","margin","opacity","position","zIndex","pointerEvents","appendChild","getRelativeScrollOffset","remove","MousedDragDrop","Emitter","inherit","_construct","dnd","$doc","listenTo","_onMouseMove","_onMouseUp","putSortable","droppable","_onDrop","dragging","_onDragEnd","destroy","draggable","tapEvt","fallbackTolerance","fallbackOffset","relativeScrollOffset","dx","dy","translate3d","touches","_dragStarted","awaitingDragStarted","min","_lastX","_lastY","_onDragStart","_loopId","_emulateDragOver","touchEvt","preventDefault","forAutoScroll","target","parent","shadowRoot","_onDragOver","active","unlistenTo","Date","getTime","log","category","message","append","activeGroup","sortables","cloneEl","nextEl","parentEl","oldIndex","prepare","sortable","nativeDraggable","on","e","_fallbacker","selection","defer","empty","getSelection","removeAllRanges","err","start","event","over","end","dropped","nearestEmptyInsertDetectEvent","nearest","_detectNearestEmptySortable","stopPropagation","lastChild","ignoreHidden","excluding","threshold","emptyInsertThreshold","insideHorizontally","insideVertically","_disableDraggable","lastDownEl","savedInputChecked","_index","selector","index","nodeName","toUpperCase","matches","[object Object]","_elm","elm","mousy","_onMouseDown","startIndex","startDraggableIndex","preventOnFilter","type","originalTarget","path","composedPath","filter","root","inputs","getElementsByTagName","idx","checked","push","_saveInputCheckedState","test","button","disabled","isContentEditable","closest","tagName","className","_dispatchEvent","cancelable","some","criteria","trim","handle","ownerDocument","oldDraggableIndex","nextSibling","group","style","transition","transform","ignore","ctx","iterator","list","n","_find","chosenClass","dataTransfer","clone","_cloneId","removeCloneOnHide","insertBefore","effectAllowed","setData","_dragStartId","clearTimeout","_dragStartTimer","cancel","off","moved","pastFirstInvertThresh","isCircumstantialInvert","_silent","_isScrolledPast","side","elSide","parentSide","_unsilent","fromEl","toEl","dragRect","targetEl","targetRect","originalEvt","willInsertAfter","retVal","onMoveFn","onMove","create","to","from","dragged","draggedRect","related","relatedRect","originalEvent","dispatchEvent","revert","lastMode","lastTarget","lastDirection","targetMoveDistance","activeSortable","isOwner","canSort","sort","contains","animated","completed","lastPutMode","checkPull","checkPut","axis","_getDirection","_hideClone","elLastChild","_lastChild","elRect","mouseOnAxis","mouseOnOppAxis","targetS2","targetS1Opp","targetS2Opp","_ghostIsLast","_showClone","_onMove","changed","targetBeforeFirstSwap","direction","aligned","sortableMouseAligned","differentLevel","side1","scrolledPastTop","scrollBefore","el1","el2","el1Rect","el2Rect","el1S1Opp","el1S2Opp","el1OppLength","el2S1Opp","el2S2Opp","el2OppLength","_isElInRowColumn","invertSwap","swapThreshold","invertedSwapThreshold","isLastTarget","targetLength","targetS1","invert","_getInsertDirection","_getSwapDirection","nextElementSibling","after","moveVector","setTimeout","insertion","_animate","dragoverBubble","dragElIndex","targetIndex","newIndex","newDraggableIndex","_offUpEvents","dropBubble","save","dropEffect","_globalDragOver","plugins","Draggable","Droppable","supportDraggable","Polymer","createElement","_prepareGroup","support","cssPointerEvents","toFn","value","pull","sameGroup","otherGroup","join","originalGroup","put","revertClone","Sortable","Plugin","klassName","pluginName","store","mixin","animation","easing","textContent","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","devicePixelRatio","fallbackOnBody","forceFallback","fn","overrided","charAt","get","prevRect","currentRect","nodeType","reflow","cloneHidden","show","onName","substr","item","pullMode","toArray","order","children","getAttribute","generateId","items","id","removeChild","set","option","_onTapStart","Array","prototype","querySelectorAll","removeAttribute","splice","attach","utils","is","extend","throttle","nextTick","cancelNextTick","getChild","childNum","closesting","main"],"mappings":"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","file":"../skylark-sortable.js","sourcesContent":["define('skylark-langx-hoster/detects/browser',[\r\n    \"../hoster\"\r\n],function(hoster){\r\n\t//refer : https://github.com/gabceb/jquery-browser-plugin\r\n\r\n\tfunction detectBrowser() {\r\n\r\n\t\tfunction uaMatch( ua ) {\r\n\t\t\tua = ua.toLowerCase();\r\n\r\n\t\t\tvar match = /(edge)\\/([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opr)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(iemobile)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(msie) ([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar platform_match = /(ipad)/.exec( ua ) ||\r\n\t\t\t    /(ipod)/.exec( ua ) ||\r\n\t\t\t    /(windows phone)/.exec( ua ) ||\r\n\t\t\t    /(iphone)/.exec( ua ) ||\r\n\t\t\t    /(kindle)/.exec( ua ) ||\r\n\t\t\t    /(silk)/.exec( ua ) ||\r\n\t\t\t    /(android)/.exec( ua ) ||\r\n\t\t\t    /(win)/.exec( ua ) ||\r\n\t\t\t    /(mac)/.exec( ua ) ||\r\n\t\t\t    /(linux)/.exec( ua ) ||\r\n\t\t\t    /(cros)/.exec( ua ) ||\r\n\t\t\t    /(playbook)/.exec( ua ) ||\r\n\t\t\t    /(bb)/.exec( ua ) ||\r\n\t\t\t    /(blackberry)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar browser = {},\r\n\t\t\t    matched = {\r\n\t\t\t      browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || \"\",\r\n\t\t\t      version: match[ 2 ] || match[ 4 ] || \"0\",\r\n\t\t\t      versionNumber: match[ 4 ] || match[ 2 ] || \"0\",\r\n\t\t\t      platform: platform_match[ 0 ] || \"\"\r\n\t\t\t    };\r\n\r\n\t\t\tif ( matched.browser ) {\r\n\t\t\t\tbrowser[ matched.browser ] = true;\r\n\t\t\t  \tbrowser.version = matched.version;\r\n\t\t\t  \tbrowser.versionNumber = parseInt(matched.versionNumber, 10);\r\n\t\t\t}\r\n\r\n\t\t\tif ( matched.platform ) {\r\n\t\t\t \tbrowser[ matched.platform ] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered mobile platforms, meaning they run a mobile browser\r\n\t\t\tif ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\r\n\t\t\t\tbrowser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ \"windows phone\" ]) {\r\n\t\t\t\tbrowser.mobile = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered desktop platforms, meaning they run a desktop browser\r\n\t\t\tif ( browser.cros || browser.mac || browser.linux || browser.win ) {\r\n\t\t\t\tbrowser.desktop = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Chrome, Opera 15+ and Safari are webkit based browsers\r\n\t\t\tif ( browser.chrome || browser.opr || browser.safari ) {\r\n\t\t\t\tbrowser.webkit = true;\r\n\t\t\t}\r\n\r\n\t\t\t// IE11 has a new token so we will assign it msie to avoid breaking changes\r\n\t\t\tif ( browser.rv || browser.iemobile) {\r\n\t\t\t  var ie = \"ie\";\r\n\r\n\t\t\t  matched.browser = ie;\r\n\t\t\t  browser[ie] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Edge is officially known as Microsoft Edge, so rewrite the key to match\r\n\t\t\tif ( browser.edge ) {\r\n\t\t\t  delete browser.edge;\r\n\t\t\t  var msedge = \"edge\";\r\n\r\n\t\t\t  matched.browser = msedge;\r\n\t\t\t  browser[msedge] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Blackberry browsers are marked as Safari on BlackBerry\r\n\t\t\tif ( browser.safari && browser.blackberry ) {\r\n\t\t\t  var blackberry = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = blackberry;\r\n\t\t\t  browser[blackberry] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Playbook browsers are marked as Safari on Playbook\r\n\t\t\tif ( browser.safari && browser.playbook ) {\r\n\t\t\t  var playbook = \"playbook\";\r\n\r\n\t\t\t  matched.browser = playbook;\r\n\t\t\t  browser[playbook] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// BB10 is a newer OS version of BlackBerry\r\n\t\t\tif ( browser.bb ) {\r\n\t\t\t  var bb = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = bb;\r\n\t\t\t  browser[bb] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 15+ are identified as opr\r\n\t\t\tif ( browser.opr ) {\r\n\t\t\t  var opera = \"opera\";\r\n\r\n\t\t\t  matched.browser = opera;\r\n\t\t\t  browser[opera] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Stock Android browsers are marked as Safari on Android.\r\n\t\t\tif ( browser.safari && browser.android ) {\r\n\t\t\t  var android = \"android\";\r\n\r\n\t\t\t  matched.browser = android;\r\n\t\t\t  browser[android] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Kindle browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.kindle ) {\r\n\t\t\t  var kindle = \"kindle\";\r\n\r\n\t\t\t  matched.browser = kindle;\r\n\t\t\t  browser[kindle] = true;\r\n\t\t\t}\r\n\r\n\t\t\t // Kindle Silk browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.silk ) {\r\n\t\t\t  var silk = \"silk\";\r\n\r\n\t\t\t  matched.browser = silk;\r\n\t\t\t  browser[silk] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Assign the name and platform variable\r\n\t\t\tbrowser.name = matched.browser;\r\n\t\t\tbrowser.platform = matched.platform;\r\n\t\t\treturn browser;\r\n\t\t}\r\n\r\n\r\n\t    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t    if (isBrowser) {\r\n\t\t    return uaMatch( navigator.userAgent );\r\n\t    } else {\r\n\t    \treturn null;\r\n\t    }\r\n\t}\r\n\r\n\r\n\treturn hoster.detects.browser = detectBrowser;\r\n});\ndefine('skylark-langx-hoster/is-browser',[\r\n    \"./hoster\",\r\n    \"./detects/browser\"\r\n],function(hoster,detectBrowser){\r\n\tif (hoster.isBrowser == undefined) {\r\n\t\thoster.isBrowser = detectBrowser();\r\n\t}\r\n\r\n    return hoster.isBrowser;\r\n});\r\n\ndefine('skylark-sortable/fallback/autoscroll',[\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-plugins-scrolls/scrolling-element\"\n],function(\n\tlangx,\n\tisBrowser,\n\tgeom,\n\tstyler,\n\tfinder,\n\tscrollingElement\n){\n    'use strict';\n\n\tvar autoScrolls = [],\n\t\tscrolling = false,\n\t\tscrollEl,\n\t\tscrollCustomFn,\n\t\tpointerElemChangedInterval,\n\n\t\tlastPointerElemX,\n\t\tlastPointerElemY,\n\n\n\t\tscrollParentEl = null;\n\n\tvar\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\n\t\tEdge = isBrowser && isBrowser.edge,\n\t\tFireFox = isBrowser && isBrowser.firefox,\n\t\tSafari = isBrowser && isBrowser.safari;\n\n\n\n\t/**\n\t * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n\t * The value is returned in real pixels.\n\t * @param  {HTMLElement} el\n\t * @return {Array}             Offsets in the format of [left, top]\n\t */\n\tfunction _getRelativeScrollOffset(el) {\n\t\tvar offsets = geom.scrollOffset(el);\n\t\treturn [offsets.offsetLeft, offsets.offsetTop];\n\t}\n\n\n\tvar _autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback,expando) {\n\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\tif (options.scroll) {\n\t\t\tvar _this = rootEl ? rootEl[expando] : window,\n\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\tx = evt.clientX,\n\t\t\t\ty = evt.clientY,\n\n\t\t\t\twinScroller = scrollingElement(),\n\n\t\t\t\tscrollThisInstance = false;\n\n\t\t\t// Detect scrollEl\n\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t_clearAutoScrolls();\n\n\t\t\t\tscrollEl = options.scroll;\n\t\t\t\tscrollCustomFn = options.scrollFn;\n\n\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\tscrollEl = finder.scrollableParent(rootEl, true);\n\t\t\t\t\tscrollParentEl = scrollEl;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tvar layersOut = 0;\n\t\t\tvar currentParent = scrollEl;\n\t\t\tdo {\n\t\t\t\tvar\tel = currentParent,\n\t\t\t\t\trect = geom.boundingRect(el),\n\n\t\t\t\t\ttop = rect.top,\n\t\t\t\t\tbottom = rect.bottom,\n\t\t\t\t\tleft = rect.left,\n\t\t\t\t\tright = rect.right,\n\n\t\t\t\t\twidth = rect.width,\n\t\t\t\t\theight = rect.height,\n\n\t\t\t\t\tscrollWidth,\n\t\t\t\t\tscrollHeight,\n\n\t\t\t\t\tcss,\n\n\t\t\t\t\tvx,\n\t\t\t\t\tvy,\n\n\t\t\t\t\tcanScrollX,\n\t\t\t\t\tcanScrollY,\n\n\t\t\t\t\tscrollPosX,\n\t\t\t\t\tscrollPosY;\n\n\n\t\t\t\tscrollWidth = el.scrollWidth;\n\t\t\t\tscrollHeight = el.scrollHeight;\n\n\t\t\t\tcss = styler.css(el);\n\n\t\t\t\tscrollPosX = el.scrollLeft;\n\t\t\t\tscrollPosY = el.scrollTop;\n\n\t\t\t\tif (el === winScroller) {\n\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');\n\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');\n\t\t\t\t} else {\n\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');\n\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');\n\t\t\t\t}\n\n\t\t\t\tvx = canScrollX && (Math.abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n\n\t\t\t\tvy = canScrollY && (Math.abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n\n\t\t\t\tif (!autoScrolls[layersOut]) {\n\t\t\t\t\tfor (var i = 0; i <= layersOut; i++) {\n\t\t\t\t\t\tif (!autoScrolls[i]) {\n\t\t\t\t\t\t\tautoScrolls[i] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n\t\t\t\t\tautoScrolls[layersOut].el = el;\n\t\t\t\t\tautoScrolls[layersOut].vx = vx;\n\t\t\t\t\tautoScrolls[layersOut].vy = vy;\n\n\t\t\t\t\tclearInterval(autoScrolls[layersOut].pid);\n\n\t\t\t\t\tif (el && (vx != 0 || vy != 0)) {\n\t\t\t\t\t\tscrollThisInstance = true;\n\t\t\t\t\t\t/* jshint loopfunc:true */\n\t\t\t\t\t\tautoScrolls[layersOut].pid = setInterval((function () {\n\t\t\t\t\t\t\t// emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n\t\t\t\t\t\t\t///if (isFallback && this.layer === 0) {\n\t\t\t\t\t\t\t///\tSortable.active._emulateDragOver(true);\n\t\t\t\t\t\t\t///\tSortable.active._onTouchMove(toudrachEvt, true);\n\t\t\t\t\t\t\t///}\n\t\t\t\t\t\t\tvar scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n\t\t\t\t\t\t\tvar scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\n\t\t\t\t\t\t\t\tif (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, evt, autoScrolls[this.layer].el) !== 'continue') {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeom.scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n\t\t\t\t\t\t}).bind({layer: layersOut}), 24);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlayersOut++;\n\t\t\t} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = finder.scrollableParent(currentParent, false)));\n\t\t\tscrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n\t\t}\n\t}, 30),\n\n\t_clearAutoScrolls = function () {\n\t\tautoScrolls.forEach(function(autoScroll) {\n\t\t\tclearInterval(autoScroll.pid);\n\t\t});\n\t\tautoScrolls = [];\n\t},\n\n\t_handleAutoScroll = function(evt, options,fallback,expando) {\n\t\tvar x = evt.clientX,\n\t\t\ty = evt.clientY,\n\n\t\t\telem = document.elementFromPoint(x, y);\n\n\n\t\t///_throttleTimeout = _autoScroll(evt, options, elem, fallback,expando);\n\n\t\t// Listener for pointer element change\n\t\t////var ogElemScroller = finder.scrollableParent(elem, true);\n\t\tvar ogElemScroller ;\n\t\tif (\n\t\t///\tscrolling &&\n\t\t\t(\n\t\t\t\t!pointerElemChangedInterval ||\n\t\t\t\tx !== lastPointerElemX ||\n\t\t\t\ty !== lastPointerElemY\n\t\t\t)\n\t\t) {\n\n\t\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\n\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\n\t\t\tpointerElemChangedInterval = setInterval(function() {\n\t\t\t\t//if (!dragEl) return;\n\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\n\t\t\t\tvar newElem = finder.scrollableParent(document.elementFromPoint(x, y), true);\n\t\t\t\tif (newElem !== ogElemScroller) {\n\t\t\t\t\togElemScroller = newElem;\n\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\t_throttleTimeout = _autoScroll(evt, options, ogElemScroller, fallback);\n\t\t\t\t}\n\t\t\t}, 10);\n\t\t\tlastPointerElemX = x;\n\t\t\tlastPointerElemY = y;\n\t\t}\n\t};\n\n\n\tvar _throttleTimeout;\n\tfunction _throttle(callback, ms) {\n\t\treturn langx.debounce(callback,ms);\n\t}\n\n\tfunction _cancelThrottle() {\n\t\t//clearTimeout(_throttleTimeout);\n\t\t//_throttleTimeout = void 0;\n\t\tif (_throttleTimeout && _throttleTimeout.stop) {\n\t\t\t_throttleTimeout.stop();\n\t\t\t_throttleTimeout = void 0;\n\t\t}\n\t}\n\n\t\n\tfunction _nulling() {\n\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\n\t\tpointerElemChangedInterval = null;\n\t\tlastPointerElemX = null;\n\t\tlastPointerElemY = null;\n\n\t\tthis.scrollEl =\n\t\tthis.scrollParentEl =\n\t\tthis.autoScrolls.length = null;\n\n\t}\n\treturn {\n\t\tautoScrolls,\n\t\t\n\t\t_getRelativeScrollOffset,\n\t\t_autoScroll,\n\n\t\t_clearAutoScrolls,\n\t\t_handleAutoScroll,\n\n\t\t_throttle,\n\t\t_cancelThrottle,\n\t\t_nulling\n\t}\n});\ndefine('skylark-domx-layouts/oriented',[\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-finder\",\n\t\"./Orientation\"\n],function(\n\tgeom,\n\tstyler,\n\tfinder,\n\tOrientation\n){\n\n\t/**\n\t * Detects children orientation.\n\t */\n\tfunction oriented(el, options) {\n\t\tvar elCSS = styler.css(el),\n\n\t\t\telWidth = geom.contentRect(el).width,\n\n\t\t\tchild1 = finder.childAt(el, 0, options),\n\t\t\tchild2 = finder.childAt(el, 1, options),\n\t\t\tfirstChildCSS = child1 && styler.css(child1),\n\t\t\tsecondChildCSS = child2 && styler.css(child2),\n\n\t\t\tfirstChildWidth = child1 && geom.marginSize(child1).width,\n\t\t\tsecondChildWidth = child2 && geom.marginSize(child2).width;\n\n\t\tif (elCSS.display === 'flex') {\n\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (elCSS.display === 'grid') {\n\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\tOrientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\treturn (child1 &&\n\t\t\t(\n\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\telCSS.float === 'none' ||\n\t\t\t\tchild2 &&\n\t\t\t\telCSS.float === 'none' &&\n\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t) ?\n\t\t\tOrientation.Vertical : Orientation.Horizontal\n\t\t);\n\t}\n\n\treturn oriented;\n});\ndefine('skylark-sortable/fallback/ghoster',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-langx-hoster/is-mobile\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-plugins-scrolls/scrolling-element\",\n\t\"skylark-domx-layouts/oriented\",\n\t\"skylark-devices-points/touch\"\n],function(\n\tskylark,\n\tlangx,\n\tisBrowser,\n\tisMobile,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\ttransforms,\n\tscrollingElement,\n\toriented,\n\ttouch\n){\n    'use strict';\n\n\t/**\n\t * Returns the \"bounding client rect\" of given element\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\n\t * @return {Object}                        The boundingClientRect of el\n\t */\n\tfunction _getRect(el, adjustForTransform, container, adjustForFixed) {\n\t\tif (!el.getBoundingClientRect && el !== window) return;\n\t\tvar {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\tbottom,\n\t\t\tright,\n\t\t\twidth,\n\t\t\theight\n\t\t} = geom.boundingRect(el);\n\t\t\n\t\tif (adjustForTransform && el !== window) {\n\t\t\t// Adjust for scale()\n\t\t\tvar matrix = transforms.matrix(container || el),\n\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\tif (matrix) {\n\t\t\t\ttop /= scaleY;\n\t\t\t\tleft /= scaleX;\n\n\t\t\t\twidth /= scaleX;\n\t\t\t\theight /= scaleY;\n\n\t\t\t\tbottom = top + height;\n\t\t\t\tright = left + width;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\tbottom: bottom,\n\t\t\tright: right,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\tvar ghoster = {\n\t\tghostEl : null,\n\n\t\tPositionGhostAbsolutely : isMobile.apple.device, //IOS\n\t\t// For positioning ghost absolutely\n\t\tghostRelativeParent : null,\n\t\tghostRelativeParentInitialScroll : [], // (left, top)\n\n\t\t_appendGhost: function (dragEl,container,options) {\n\t\t\t// Bug if using scale(): https://stackoverflow.com/questions/2637058\n\t\t\t// Not being adjusted for\n\t\t\tvar /// dragEl = dnd.dragEl,\n\t\t\t\tghostEl = this.ghostEl;\n\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar ///container = this.options.fallbackOnBody ? document.body : rootEl,\n\t\t\t\t\trect = _getRect(dragEl, true, container, !this.PositionGhostAbsolutely),\n\t\t\t\t\tcss = styler.css(dragEl);\n\t\t\t\t\t///options = this.options;\n\n\t\t\t\t// Position absolutely\n\t\t\t\tif (this.PositionGhostAbsolutely) {\n\t\t\t\t\t// Get relatively positioned parent\n\t\t\t\t\tvar ghostRelativeParent = this.ghostRelativeParent = container;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'position') === 'static' &&\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'transform') === 'none' &&\n\t\t\t\t\t\tghostRelativeParent !== document\n\t\t\t\t\t) {\n\t\t\t\t\t\tghostRelativeParent = ghostRelativeParent.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document) {\n\t\t\t\t\t\tvar ghostRelativeParentRect = _getRect(ghostRelativeParent, true);\n\n\t\t\t\t\t\trect.top -= ghostRelativeParentRect.top;\n\t\t\t\t\t\trect.left -= ghostRelativeParentRect.left;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n\t\t\t\t\t\tif (ghostRelativeParent === document) {\n\t\t\t\t\t\t\tghostRelativeParent = this.ghostRelativeParent = scrollingElement();\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\n\t\t\t\t\t\trect.top += ghostRelativeParent.scrollTop;\n\t\t\t\t\t\trect.left += ghostRelativeParent.scrollLeft;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tghostRelativeParent = this.ghostRelativeParent = scrollingElement();\n\t\t\t\t\t}\n\t\t\t\t\tghostRelativeParentInitialScroll = autoscroll._getRelativeScrollOffset(ghostRelativeParent);\n\t\t\t\t}\n\n\n\t\t\t\tghostEl =this.ghostEl = dragEl.cloneNode(true);\n\n\t\t\t\tstyler.toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\tstyler.toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\tstyler.toggleClass(ghostEl, options.dragClass, true);\n\n\n\t\t\t\tstyler.css(ghostEl, {\n\t\t\t\t\t'box-sizing': 'border-box',\n\t\t\t\t\t'margin': 0,\n\t\t\t\t\t'top': rect.top,\n\t\t\t\t\t'left': rect.left,\n\t\t\t\t\t'width': rect.width,\n\t\t\t\t\t'height': rect.height,\n\t\t\t\t\t'opacity': '0.8',\n\t\t\t\t\t'position': (this.PositionGhostAbsolutely ? 'absolute' : 'fixed'),\n\t\t\t\t\t'zIndex': '100000',\n\t\t\t\t\t'pointerEvents': 'none'\t\n\t\t\t\t});\n\t\t\t\tcontainer.appendChild(ghostEl);\n\t\t\t}\n\t\t},\n\n\t\tgetRelativeScrollOffset : function(){\n\t\t\treturn this.PositionGhostAbsolutely && this.ghostRelativeParent && autoscroll._getRelativeScrollOffset(this.ghostRelativeParent);\n\t\t},\n\n\t\tremove : function() {\n\t\t\tif (this.ghostEl) {\n\t\t\t\tnoder.remove(this.ghostEl);\n\t\t\t} \n\t\t\tthis.ghostEl = null;\n\n\t\t}\n\n\n\t};\n\n\treturn ghoster;\n\t\n});\ndefine('skylark-sortable/fallback/MousedDragDrop',[\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-transforms\",\n\t\"./ghoster\",\n\t\"./autoscroll\"\n],function(\n\tlangx,\n\t$,\n\teventer,\n\tstyler,\n\ttransforms,\n\tghoster,\n\tautoscroll\n){\n\n\tvar MousedDragDrop = langx.Emitter.inherit({\n\t\t_construct : function(dnd) {\n\t\t\tthis.dnd = dnd;\n\n\t\t\tvar $doc = $(document);\n\n\t\t\tthis.listenTo($doc,\"mousemove\",this._onMouseMove);\n\t\t\tthis.listenTo($doc,\"mouseup\",this._onMouseUp);\n\n\t\t},\n\n\t\t_onMouseUp : function(evt) {\n\t\t\tvar dnd = this.dnd;\n        \tif (dnd.putSortable) {\n        \t\tdnd.putSortable.droppable._onDrop(evt)\n        \t}\n        \tif (dnd.dragging) {\n        \t\tdnd.dragging._onDragEnd(evt);\n        \t}\n        \tghoster.remove();\n        \tthis.destroy();\n\t\t},\n\n        _onMouseMove: function (/**TouchEvent*/evt) {\n            //dnd.log(\"_onMouseMove\",\"start\");\n            var dnd = this.dnd,\n            \tghostEl = ghoster.ghostEl,\n            \tdraggable = dnd.dragging,\n            \tdragEl = dnd.dragEl,\n            \ttapEvt = dnd.tapEvt;\n            if (tapEvt) {\n                var options =  draggable.options,\n                    fallbackTolerance = options.fallbackTolerance,\n                    fallbackOffset = options.fallbackOffset,\n                    matrix = ghostEl && transforms.matrix(ghostEl),\n                    scaleX = ghostEl && matrix && matrix.a,\n                    scaleY = ghostEl && matrix && matrix.d,\n                    relativeScrollOffset = ghoster.getRelativeScrollOffset(),\n                    dx = ((evt.clientX - tapEvt.clientX)\n                            + fallbackOffset.x) / (scaleX || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n                    dy = ((evt.clientY - tapEvt.clientY)\n                            + fallbackOffset.y) / (scaleY || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n                    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n                // only set the status to dragging, when we are actually dragging\n                if (!this._dragStarted && !dnd.awaitingDragStarted) {\n                    if (fallbackTolerance &&\n                        Math.min( Math.abs(evt.clientX - draggable._lastX),  Math.abs(evt.clientY - draggable._lastY)) < fallbackTolerance\n                    ) {\n                        return;\n                    }\n                    draggable._onDragStart(evt, true);\n\n                    ghoster._appendGhost(dragEl,document.body,draggable.options);\n\n                \t///dnd.ignoreNextClick = true;\n\n                \tthis._dragStarted = true;\n                \tthis._loopId = setInterval(this._emulateDragOver.bind(this), 50);\n\n                }\n\n                this._handleAutoScroll(evt, true);\n\n                ///moved = true;\n                ///dnd.touchEvt = touch;\n                this.touchEvt = evt;\n\n                if (ghostEl) {\n                    styler.css(ghostEl, 'transform', translate3d);\n\n                }\n\n                //evt.cancelable && evt.preventDefault();\n                evt.preventDefault()\n            }\n        },\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tvar dnd = this.dnd,\n\t\t\t\tdragEl = dnd.dragEl,\n\t\t\t\t///touchEvt = dnd.touchEvt;\n\t\t\t\ttouchEvt = this.touchEvt;\n\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t//_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tif (target === parent) break;\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[dnd.expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[dnd.expando].droppable._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//if (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\tif (inserted) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\t///dragEl.parentNode[dnd.expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t//_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tvar dnd = this.dnd;\n\n\t\t\tif (!dnd.dragEl || !dnd.active.options.scroll) return;\n\n\t\t\treturn autoscroll._handleAutoScroll(evt,dnd.active.options,fallback,dnd.expando);\n\n\n    \t},\n\n\t\tdestroy : function() {\n\t\t\tthis.unlistenTo();\n        \tif (this._loopId) {\n        \t\tclearInterval(this._loopId);\n        \t}\n\n            autoscroll._nulling();\n            \n            autoscroll._clearAutoScrolls();\n            autoscroll._cancelThrottle();\n            this._dragStarted = false;\n\t\t}\n\t});\n\n\treturn MousedDragDrop;\n});\ndefine('skylark-sortable/dnd',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"./fallback/MousedDragDrop\"\n],function(\n\tskylark,\n\tlangx,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\tMousedDragDrop\n){\n    'use strict';\n\n\n\tvar expando = 'Sortable' + (new Date).getTime();\n\n\n\tvar dnd = {\n\t\tlog : function log(category,message) {\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\n\t\t},\n\n\t\texpando,\n\n\t\tactiveGroup : null,\n\t\tactive : null,\n\t\tputSortable : null,\n\t\tsortables : [],\n\n\n\t\trootEl : null,\n\t\tdragEl : null,\n\t\tcloneEl : null,\n\t\tnextEl : null,\n\t\tparentEl : null,\n\n\t\toldIndex : null,\n\n\n\t\t///ignoreNextClick : false,\n        awaitingDragStarted : false,\n\t\t///touchEvt : null,\n\n        prepare: function(draggable,dragEl) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        \tthis.dragEl = dragEl;\n            if (!this.active.nativeDraggable) {\n            \tthis._fallbacker = new MousedDragDrop(this);\n            } else {\n            \tdragEl.draggable = true;\n                eventer.on(dnd.dragEl, 'dragend', (e)=>{\n                \tthis.dragging._onDragEnd(e)\n                });\n                eventer.on(dnd.dragEl, 'dragstart', (e)=>{\n                \tthis.dragging._onDragStart(e)\n                });\n            }\n\n            dnd.log(\"_triggerDragStart\",\"start\");\n            dnd.log(\"_triggerDragStart\",\"nativeDraggable is \" +  this.active.nativeDraggable);\n\n            try {\n                if (document.selection) {\n                    // Timeout neccessary for IE9\n                    langx.defer(function () {\n                        document.selection.empty();\n                    });\n                } else {\n                    window.getSelection().removeAllRanges();\n                }\n            } catch (err) {\n            }\n\n\t\t},\n\n        start: function(draggable, event) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n\t\t\t//var el = this.active.elm(),\n\t\t\t//\townerDocument = el.ownerDocument;\n\n\n\t\t\t//eventer.on(ownerDocument, 'dragover', this.nearestEmptyInsertDetectEvent);\n\t\t\t///eventer.on(ownerDocument, 'mousemove', this.nearestEmptyInsertDetectEvent);\n\t\t\t///eventer.on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n\n\t\t\t///if (this.active.nativeDraggable) {\n                ///eventer.on(document, 'dragover', this._handleAutoScroll);\n               // eventer.on(document, 'dragover', this._checkAlignment);\n            //} else {\n                ///eventer.on(document, 'mousemove', this._handleAutoScroll);\n            //}\n        },\n\n        over : function(evt) {\n\t\t\t//this._handleAutoScroll(evt);\n        },\n\n        end: function(dropped) {\n\t  \t\t//eventer.off(document, 'dragover', this.nearestEmptyInsertDetectEvent);\n\t  \t\t///eventer.off(document, 'mousemove', this.nearestEmptyInsertDetectEvent);\n\t\n\t\t\t//if (this.active.nativeDraggable) {\n\t\t\t\t///eventer.off(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t//eventer.off(document, 'dragover', this._checkAlignment);\n\t\t\t//} else {\n\t\t        // Unbind events\n\t            ///eventer.off(document, 'mousemove', this._onTouchMove);\n\n\t\t\t//}\n\n        \tthis._nulling();\n \t\t},\n\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\n\t\t\tif (dnd.dragEl) {\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\t\tif (nearest) {\n\t\t\t\t\t// Create imitation event\n\t\t\t\t\tvar event = {};\n\t\t\t\t\tfor (var i in evt) {\n\t\t\t\t\t\tevent[i] = evt[i];\n\t\t\t\t\t}\n\t\t\t\t\tevent.target = event.rootEl = nearest;\n\t\t\t\t\tevent.preventDefault = void 0;\n\t\t\t\t\tevent.stopPropagation = void 0;\n\t\t\t\t\tnearest[expando]._onDragOver(event);\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable : function(x, y) {\n\t\t\tvar sortables = this.sortables;\n\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\n\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDraggable : function (el) {\n\t\t\tel.draggable = false;\n\t\t},\n\n\t\t_nulling: function() {\n\n\t\t\tdnd.dragEl = \n\t\t\tdnd.rootEl =\n\t\t\tdnd.parentEl =\n\t\t\t//ghoster.ghostEl =\n\t\t\tdnd.nextEl =\n\t\t\tdnd.cloneEl =\n\t\t\t///lastDownEl =\n\n\n\t\t\tdnd.tapEvt =\n\t\t\t///dnd.touchEvt =\n\n\t\t\tdnd.oldIndex =\n\n\t\t\tdnd.putSortable =\n\t\t\tdnd.activeGroup =\n\t\t\tdnd.active = null;\n\n\t\t}\n\n\n\t};\n\n\n\treturn dnd;\n\t\n});\ndefine('skylark-sortable/draggable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,touch,dnd){\r\n    var \r\n        lastDownEl,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\tclass Draggable {\r\n\t\tconstructor(sortable,options) {\r\n\t\t\tthis.sortable = sortable;\r\n\t\t\tvar el = this._elm = sortable.elm();\r\n\t\t\tthis.options = options;\r\n\r\n\t        // Bind events\r\n            touch.mousy(el);\r\n            eventer.on(el, 'mousedown', this._onMouseDown.bind(this));\r\n\r\n\t\t}\r\n\r\n\t\telm() {\r\n\t\t\treturn this._elm;\r\n\t\t}\r\n\t\t//drag start \r\n        // handle moudedown event\r\n        _onMouseDown(/** Event|TouchEvent */evt) {\r\n            //if (!evt.cancelable) return;\r\n            var sortable = this.sortable,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                type = evt.type,\r\n                target = evt.target,\r\n                originalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n            // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\r\n            ///if (dnd.dragEl) {\r\n            ///    return;\r\n            ///}\r\n\r\n            if (/mousedown/.test(type) && evt.button !== 0 || options.disabled) {\r\n                return; // only left button and enabled\r\n            }\r\n\r\n            // cancel dnd if original target is content editable\r\n            if (originalTarget.isContentEditable) {\r\n                return;\r\n            }\r\n\r\n            target = finder.closest(target, options.draggable, el, false);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                // Ignoring duplicate `down`\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = _index(target);\r\n            startDraggableIndex = _index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    sortable._dispatchEvent(sortable, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        sortable._dispatchEvent(sortable, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n                return;\r\n            }\r\n\r\n            // Prepare `dragstart`\r\n            var\r\n                ownerDocument = el.ownerDocument,\r\n                dragEl = dnd.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex,\r\n                tapEvt = dnd.tapEvt;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = dnd.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = dnd.tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: evt.clientX,\r\n                    clientY: evt.clientY\r\n                };\r\n\r\n                this._lastX = evt.clientX;\r\n                this._lastY = evt.clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                // Bind the events: dragstart/dragend\r\n                ///sortable._triggerDragStart(evt, touch);\r\n\r\n                dnd.prepare(this,dnd.dragEl);\r\n\r\n                // Drag start event\r\n                sortable._dispatchEvent(sortable, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                // Chosen item\r\n                styler.toggleClass(dragEl, options.chosenClass, true);\r\n            }\r\n        }\r\n\r\n\r\n        _onDragStart(/**Event*/evt, /**boolean*/fallback) {\r\n            dnd.log(\"_onDragStart\",\"start\");\r\n            var _this = this,\r\n                dragEl = dnd.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            //this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                _this.sortable._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            if (!fallback){\r\n                styler.toggleClass(dragEl, options.dragClass, true);\r\n            } \r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                //dnd.ignoreNextClick = true;\r\n                //_this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n\r\n\t        function _dragStarted(fallback, evt) {\r\n\t            dnd.awaitingDragStarted = false;\r\n\t            var dragEl = dnd.dragEl,\r\n\t                rootEl = this._elm,\r\n\t                oldIndex = dnd.oldIndex,\r\n\t                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n\t            if (rootEl && dragEl) {\r\n\t                //if (this.nativeDraggable) {\r\n\t                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n\t                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n\t                //}\r\n\t                dnd.start(this);\r\n\t                var options = this.options;\r\n\r\n\t                // Apply effect\r\n\t                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n\t                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n\t                // In case dragging an animated element\r\n\t                styler.css(dragEl, 'transform', '');\r\n\r\n\t                //dnd.active = this;\r\n\r\n\t                //fallback && this._appendGhost();\r\n\r\n\t                // Drag start event\r\n\t                this.sortable._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n\t            } else {\r\n\t                this._nulling();\r\n\t            }\r\n\t        }\r\n\r\n            _this._dragStartId = langx.defer(_dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        }\r\n\r\n        //\r\n        //\r\n\r\n        _onDragEnd(/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = dnd.dragEl,\r\n                sortable = this.sortable,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            //clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.cancel();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.cancel();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n\r\n            if (sortable.nativeDraggable) {\r\n                eventer.off(dnd.dragEl, 'dragstart', this._onDragStart);\r\n                eventer.off(dnd.dragEl, 'dragend', this._onDragEnd);\r\n            }\r\n\r\n            lastDownEl = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n           \t//this.dragEl = null;\r\n\r\n            dnd.end();\r\n\r\n        }\r\n\t}\r\n\r\n\r\n\treturn Draggable;\r\n\r\n});\ndefine('skylark-sortable/droppable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./dnd\",\r\n\t\"./fallback/autoscroll\"\r\n],function(langx,finder,styler,eventer,noder,geom,touch,dnd,autoscroll){\r\n\r\n\tvar\tmoved,\r\n\t    pastFirstInvertThresh,\r\n\t    isCircumstantialInvert,\r\n   \t\t_silent = false;\r\n\r\n\r\n\t/**\r\n\t * Checks if a side of an element is scrolled past a side of it's parents\r\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\r\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\r\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\r\n\t */\r\n\tfunction _isScrolledPast(el, side) {\r\n\t\tvar parent = finder.scrollableParent(el, true),\r\n\t\t\telSide = geom.boundingRect(el)[side];\r\n\r\n\t\t/* jshint boss:true */\r\n\t\twhile (parent) {\r\n\t\t\tvar parentSide = geom.boundingRect(parent)[side],\r\n\t\t\t\tvisible;\r\n\r\n\t\t\tif (side === 'top' || side === 'left') {\r\n\t\t\t\tvisible = elSide >= parentSide;\r\n\t\t\t} else {\r\n\t\t\t\tvisible = elSide <= parentSide;\r\n\t\t\t}\r\n\r\n\t\t\tif (!visible) return parent;\r\n\r\n\t\t\tif (parent === noder.scrollingElement()) break;\r\n\r\n\t\t\tparent = finder.scrollableParent(parent, false);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n\t * @param  {HTMLElement} el       Parent element\r\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\r\n\t */\r\n\t function _lastChild(el) {\r\n\t\treturn finder.lastChild(el,{\r\n\t\t\tignoreHidden : true,\r\n\t\t\texcluding : []\r\n\t\t})\r\n\t}\r\n\r\n\t function _ghostIsLast(evt, axis, el) {\r\n\t\tvar elRect = geom.boundingRect(finder.lastChild(el,{ignoreHidden : true,excluding : []})),\r\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\r\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\r\n\t\t\tspacer = 10;\r\n\r\n\t\treturn (\r\n\t\t\taxis === 'vertical' ?\r\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\r\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _isClientInRowColumn(x, y, el, axis, options) {\r\n\t\tvar targetRect = geom.boundingRect(el),\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\r\n\r\n\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\r\n\t}\r\n\r\n\tfunction _isElInRowColumn(el1, el2, axis) {\r\n\t\t//var dragEl = dnd.active.dragEl;\r\n\r\n\t\tvar el1Rect = geom.boundingRect(el1),//el1 === dragEl && realDragElRect || geom.boundingRect(el1),\r\n\t\t\tel2Rect = geom.boundingRect(el2),//el2 === dragEl && realDragElRect || geom.boundingRect(el2),\r\n\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\r\n\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\r\n\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\r\n\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\r\n\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\r\n\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\r\n\r\n\t\treturn (\r\n\t\t\tel1S1Opp === el2S1Opp ||\r\n\t\t\tel1S2Opp === el2S2Opp ||\r\n\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\tclass Droppable {\r\n\t\tconstructor(sortable,options) {\r\n\t\t\tthis.sortable = sortable;\r\n\t\t\tvar el = this.el= this._elm = sortable.elm();\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.on(el, 'dragover', this);\r\n\t\t\t\teventer.on(el, 'dragenter', this);\r\n\t\t        eventer.on(el, 'drop', this);\r\n\t\t\t}\r\n\t        eventer.on(el, 'selectstart', this);\r\n\t\t}\r\n\r\n\r\n\t\t_onMove (fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\t\tvar evt,\r\n\t\t\t\tsortable = fromEl[dnd.expando],\r\n\t\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\t\tretVal;\r\n\r\n\t\t\tevt = eventer.create(\"move\",{\r\n\t\t\t\tto : toEl,\r\n\t\t\t\tfrom : fromEl,\r\n\t\t\t\tdragged : dragEl,\r\n\t\t\t\tdraggedRect: dragRect,\r\n\t\t\t\trelated : targetEl || toEl,\r\n\t\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\t\toriginalEvent : originalEvt\r\n\t\t\t});\r\n\r\n\t\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\t\tif (onMoveFn) {\r\n\t\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver(/**Event*/evt) {\r\n\t\t\tvar el = this._elm,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = dnd.active,\r\n\t\t\t\tisOwner = (dnd.activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\r\n\t\t\t\tlastMode, // 'swap' or 'insert'\r\n\t\t\t\tlastTarget,\r\n\t\t\t\tlastDirection,\r\n\t\t\t\ttargetMoveDistance;\r\n            //dnd.log(\"_onDragOver\",\"start\");\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(sortable);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== sortable && sortable !== dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable = sortable;\r\n\t\t\t\t\t} else if (sortable === dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable =  null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && sortable._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && sortable._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t//sortable._handleAutoScroll(evt);\r\n\t\t\t\t\tdnd.over(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && dnd.nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\tsortable._dispatchEvent(sortable, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl), oldDraggableIndex, _index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = _index(dragEl),\r\n\t\t\t\t\ttargetIndex = _index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = dnd.activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = sortable._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tdnd.parentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = _lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tdnd.parentEl = el; // actualization\r\n\t\t\t\t\t\t///realDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\r\n\t\t\t\t\t///realDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\tif (scrolledPastTop) {\r\n\t\t\t\t\t\t\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdnd.parentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t\ttargetMoveDistance =  Math.abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t_onDrop(/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tparentEl = dnd.parentEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\tnewIndex,\r\n\t\t\t\tnewDraggableIndex;\r\n\r\n\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//ghoster.remove();\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tnoder.remove(dnd.cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\r\n\t\t\t\t\tdnd._disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class'sd\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tsortable.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t}\r\n\r\n\t\t_offUpEvents () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t}\r\n\r\n\t\t_nulling() {\r\n\r\n\t\t\tmoved =\tnull;\r\n\r\n\t\t}\r\n\r\n\t\thandleEvent (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn Droppable;\r\n});\ndefine('skylark-sortable/Sortable',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-langx-hoster/is-mobile\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-plugins-scrolls/scrolling-element\",\n\t\"skylark-domx-layouts/oriented\",\n    \"skylark-domx-plugins-base\",\n\t\"skylark-devices-points/touch\",\n\t\"./dnd\",\n\t\"./draggable\",\n\t\"./droppable\"\n],function(\n\tskylark,\n\tlangx,\n\tisBrowser,\n\tisMobile,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\ttransforms,\n\tscrollingElement,\n\toriented,\n\tplugins,\n\ttouch,\n\tdnd,\n\tDraggable,\n\tDroppable\n){\n\n\t'use strict';\n\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\treturn finder.index(el,function(el){\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\t\t\t\n\t\t})\n\t}\n\n\n\n\n\n\tvar \n\n\t\t///realDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\n\t\tEdge = isBrowser && isBrowser.edge,\n\t\tFireFox = isBrowser && isBrowser.firefox,\n\t\tSafari = isBrowser && isBrowser.safari,\n\n\t\tIOS = isMobile && isMobile.apple.device,\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\n\n\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents,\n\n\t\t_alignedSilent = false,\n\n\t\t//savedInputChecked = [],\n\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t};\n\n\n\tvar Sortable =  plugins.Plugin.inherit({\n        klassName: \"Sortable\",\n        \n        pluginName : \"intg.sortable\",\n\n\n\t\toptions : {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\t//draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function(evt, target, dragEl,ghostEl) {\n\t\t\t\treturn oriented(this.el, langx.mixin({\n\t\t\t\t\t\t\t\t\texcluding : [ghostEl,dragEl]\n\t\t\t\t\t\t\t\t},this.options));\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tdelayOnTouchOnly: false,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\n\n\t\t\tfallbackOnBody: true,  //fix\n\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\t//supportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\n\t\t\temptyInsertThreshold: 5\n\t\t},\n\n\n\t\t/**\n\t\t * @class  Sortable\n\t\t * @param  {HTMLElement}  el\n\t\t * @param  {Object}       [options]\n\t\t */\n\t\t_construct : function Sortable(el, options) {\n            this.overrided(el,options);\n\n\t\t\tthis.el = el; // root element\n\n\t\t\t// Export instance\n\t\t\tel[dnd.expando] = this;\n\n\t\t\toptions = this.options;\n\n\t\t\toptions.draggable = options.draggable || /[uo]l/i.test(el.nodeName) ? '>li' : '>*';\n\n\n\t\t\t_prepareGroup(options);\n\n\t\t\t// Bind all private methods\n\t\t\tfor (var fn in this) {\n\t\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Setup drag mode\n\t\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\n\t\t\t\tthis.options.touchStartThreshold = 1;\n\t\t\t}\n\n\n\n\t\t\tdnd.sortables.push(this.el);\n\n\t\t\t// Restore sorting\n\t\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\n\n\t\t\tthis.draggable = new Draggable(this,this.options);\n\n\t\t\tthis.droppable = new Droppable(this,this.options);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\tvar  dragEl = dnd.dragEl;\n\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl,null) : this.options.direction;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation,\n\t\t\t\tdragEl = dnd.dragEl;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = geom.boundingRect(target);\n\n\t\t\t\t////if (target === dragEl) {\n\t\t\t\t///\trealDragElRect = currentRect;\n\t\t\t\t///}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tnoder.reflow(target);\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\tstyler.css(target, 'transition', '');\n\t\t\t\t\tstyler.css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n        _hideClone: function() {\n        \treturn;\n            if (!dnd.cloneEl.cloneHidden) {\n                styler.hide(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = true;\n                if (dnd.cloneEl.parentNode && this.options.removeCloneOnHide) {\n                    noder.remove(dnd.cloneEl);\n                }\n            }\n        },\n\n        _showClone: function(putSortable) {\n            var rootEl = dnd.active.el,\n                nextEl = dnd.nextEl;\n\n            if (putSortable.lastPutMode !== 'clone') {\n                this._hideClone();\n                return;\n            }\n\n            if (dnd.cloneEl.cloneHidden) {\n                // show clone at dragEl or original position\n                if (rootEl.contains(dnd.dragEl) && !this.options.group.revertClone) {\n                    rootEl.insertBefore(dnd.cloneEl, dnd.dragEl);\n                } else if (nextEl) {\n                    rootEl.insertBefore(dnd.cloneEl, nextEl);\n                } else {\n                    rootEl.appendChild(dnd.cloneEl);\n                }\n\n                if (this.options.group.revertClone) {\n                    this._animate(dnd.dragEl, dnd.cloneEl);\n                }\n                styler.show(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = false;\n            }\n        },\n\n\t\t_dispatchEvent : function (\n\t\t\tsortable, \n\t\t\trootEl, \n\t\t\tname,\n\t\t\ttargetEl, \n\t\t\ttoEl, \n\t\t\tfromEl,\n\t\t\tstartIndex, \n\t\t\tnewIndex,\n\t\t\tstartDraggableIndex, \n\t\t\tnewDraggableIndex,\n\t\t\toriginalEvt\n\t\t) {\n\t\t\tsortable = (sortable || rootEl[dnd.expando]);\n\t\t\tvar evt,\n\t\t\t\toptions = sortable.options,\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1),\n\t\t\t\tputSortable = dnd.putSortable;\n\n\t\t\tevt = eventer.create(name,{\n\t\t\t\tto : toEl || rootEl,\n\t\t\t\tfrom : fromEl || rootEl,\n\t\t\t\titem : targetEl || rootEl,\n\t\t\t\tclone : dnd.cloneEl,\n\t\t\t\toldIndex : startIndex,\n\t\t\t\tnewIndex : newIndex,\n\t\t\t\toldDraggableIndex : startDraggableIndex,\n\t\t\t\tnewDraggableIndex : newDraggableIndex,\n\t\t\t\toriginalEvent : originalEvt,\n\t\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\n\t\t\t});\n\t\t\tif (rootEl) {\n\t\t\t\trootEl.dispatchEvent(evt);\n\t\t\t}\n\n\t\t\tif (options[onName]) {\n\t\t\t\toptions[onName].call(sortable, evt);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || noder.generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[dnd.expando] = null;\n\n\t\t\teventer.off(el, 'mousedown', this._onTapStart);\n\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\teventer.off(el, 'dragover', this);\n\t\t\t\teventer.off(el, 'dragenter', this);\n\t\t\t}\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tdnd.sortables.splice(dnd.sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t});\n\n\n\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.9.0';\n\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\n});\ndefine('skylark-sortable/main',[\n\t\"skylark-langx\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-styler\",\n\t\"./fallback/autoscroll\",\n\t\"./Sortable\"\n],function(\n\tlangx,\n\teventer,\n\tfinder,\n\tnoder,\n\tstyler,\n\tautoscroll,\n\tSortable\n){\n\t// Export utils\n\tSortable.utils = {\n\t\ton: eventer.on,\n\t\toff: eventer.off,\n\t\tcss: styler.css,\n\t\t///find: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!finder.closest(el, selector, el, false);\n\t\t},\n\t\textend: langx.mixin,\n\t\tthrottle: autoscroll._throttle,\n\t\tclosest: finder.closest,\n\t\ttoggleClass: styler.toggleClass,\n\t\tclone: \tfunction (el) {\n\t\t\t\t\treturn noder.clone(el,true);\n\t\t\t\t},\n\t\t//index: containers._index,\n\t\tnextTick: \tfunction _nextTick(fn) {\n\t\t\t//return setTimeout(fn, 0);\n\t\t\treturn langx.defer(fn);\n\t\t},\n\t\tcancelNextTick: \tfunction _cancelNextTick(id) {\n\t\t\t//return clearTimeout(id);\n\t\t\treturn id && id.stop();\n\t\t},\n\t\t//detectDirection: _detectDirection,\n\t\tgetChild: function(el, childNum, options) {\n\t\t\toptions.excluding = [];\n\t\t\toptions.closesting = options.draggable;\n\t\t\treturn finder.childAt(el,childNum,options);\n\t\t}\n\t};\n\n\treturn Sortable;\n});\ndefine('skylark-sortable', ['skylark-sortable/main'], function (main) { return main; });\n\n"]}