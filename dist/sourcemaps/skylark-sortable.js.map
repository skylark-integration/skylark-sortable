{"version":3,"sources":["skylark-sortable.js"],"names":["define","hoster","detects","browser","window","document","ua","toLowerCase","match","exec","indexOf","platform_match","matched","version","versionNumber","platform","parseInt","android","bb","blackberry","ipad","iphone","ipod","kindle","playbook","silk","mobile","cros","mac","linux","win","desktop","chrome","opr","safari","webkit","rv","iemobile","edge","name","uaMatch","navigator","userAgent","detectBrowser","undefined","isBrowser","geom","styler","finder","Orientation","el","options","elCSS","css","elWidth","contentRect","width","child1","childAt","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginSize","secondChildWidth","display","flexDirection","Vertical","Horizontal","gridTemplateColumns","split","length","float","touchingSideChild2","clear","skylark","langx","isMobile","$","noder","eventer","transforms","oriented","touch","_getRect","adjustForTransform","container","adjustForFixed","getBoundingClientRect","top","left","bottom","right","height","boundingRect","matrix","scaleX","a","scaleY","d","ghoster","ghostEl","PositionGhostAbsolutely","apple","device","ghostRelativeParent","ghostRelativeParentInitialScroll","_appendGhost","dragEl","this","rect","parentNode","ghostRelativeParentRect","body","documentElement","scrollingElement","scrollTop","scrollLeft","offsets","scrollOffset","offsetLeft","offsetTop","cloneNode","toggleClass","ghostClass","fallbackClass","dragClass","box-sizing","margin","opacity","position","zIndex","pointerEvents","appendChild","getRelativeScrollOffset","autoscroll","_getRelativeScrollOffset","remove","AutoScroll","MousedDragDrop","Emitter","inherit","_construct","dnd","$doc","listenTo","_onMouseMove","_onMouseUp","evt","putSortable","droppable","_onDrop","dragging","_onDragEnd","destroy","draggable","tapEvt","fallbackTolerance","fallbackOffset","relativeScrollOffset","dx","clientX","x","dy","clientY","y","translate3d","touches","_dragStarted","awaitingDragStarted","Math","min","abs","_lastX","_lastY","_onDragStart","_loopId","setInterval","_emulateDragOver","bind","_handleAutoScroll","touchEvt","preventDefault","forAutoScroll","target","elementFromPoint","parent","shadowRoot","expando","_onDragOver","rootEl","fallback","active","scroll","pointerElemChangedInterval","lastPointerElemX","lastPointerElemY","clearInterval","ogElemScroller","newElem","scrollableParent","autoscroller","handle","unlistenTo","Date","getTime","log","category","message","append","activeGroup","sortables","cloneEl","nextEl","parentEl","oldIndex","prepare","sortable","nativeDraggable","on","e","_fallbacker","selection","defer","empty","getSelection","removeAllRanges","err","start","event","over","end","dropped","_nulling","nearestEmptyInsertDetectEvent","nearest","_detectNearestEmptySortable","i","stopPropagation","lastChild","ignoreHidden","excluding","threshold","emptyInsertThreshold","insideHorizontally","insideVertically","_disableDraggable","lastDownEl","savedInputChecked","_index","selector","index","nodeName","toUpperCase","matches","[object Object]","_elm","elm","mousy","_onMouseDown","startIndex","startDraggableIndex","preventOnFilter","type","originalTarget","path","composedPath","filter","root","inputs","getElementsByTagName","idx","checked","push","_saveInputCheckedState","test","button","disabled","isContentEditable","closest","tagName","className","call","_dispatchEvent","cancelable","some","criteria","trim","ownerDocument","oldDraggableIndex","nextSibling","group","style","transition","transform","ignore","forEach","ctx","iterator","list","n","_find","chosenClass","_this","dataTransfer","clone","_cloneId","removeCloneOnHide","insertBefore","effectAllowed","setData","_dragStartId","clearTimeout","_dragStartTimer","cancel","off","moved","pastFirstInvertThresh","isCircumstantialInvert","_silent","_isScrolledPast","side","elSide","parentSide","_unsilent","fromEl","toEl","dragRect","targetEl","targetRect","originalEvt","willInsertAfter","retVal","onMoveFn","onMove","create","to","from","dragged","draggedRect","related","relatedRect","originalEvent","dispatchEvent","revert","lastMode","lastTarget","lastDirection","targetMoveDistance","activeSortable","isOwner","canSort","sort","contains","animated","completed","lastPutMode","checkPull","checkPut","axis","_getDirection","_hideClone","elLastChild","_lastChild","elRect","mouseOnAxis","mouseOnOppAxis","targetS2","targetS1Opp","targetS2Opp","_ghostIsLast","_showClone","_onMove","changed","targetBeforeFirstSwap","direction","aligned","sortableMouseAligned","differentLevel","side1","scrolledPastTop","scrollBefore","el1","el2","el1Rect","el2Rect","el1S1Opp","el1S2Opp","el1OppLength","el2S1Opp","el2S2Opp","el2OppLength","_isElInRowColumn","invertSwap","swapThreshold","invertedSwapThreshold","isLastTarget","targetLength","targetS1","invert","_getInsertDirection","_getSwapDirection","nextElementSibling","after","moveVector","setTimeout","scrollBy","insertion","_animate","dragoverBubble","dragElIndex","targetIndex","newIndex","newDraggableIndex","_offUpEvents","dropBubble","save","dropEffect","_globalDragOver","plugins","Draggable","Droppable","supportDraggable","Polymer","ie","firefox","createElement","_prepareGroup","support","cssPointerEvents","toFn","value","pull","sameGroup","otherGroup","join","originalGroup","put","revertClone","Sortable","Plugin","klassName","pluginName","store","scrollSensitivity","scrollSpeed","bubbleScroll","mixin","animation","easing","textContent","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","devicePixelRatio","fallbackOnBody","forceFallback","fn","overrided","charAt","get","prevRect","ms","currentRect","nodeType","reflow","cloneHidden","show","onName","substr","item","pullMode","toArray","order","children","getAttribute","generateId","items","id","removeChild","set","option","Array","prototype","querySelectorAll","removeAttribute","splice","attach","utils","is","extend","throttle","debounce","nextTick","cancelNextTick","stop","getChild","childNum","closesting","main"],"mappings":"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","file":"../skylark-sortable.js","sourcesContent":["define('skylark-langx-hoster/detects/browser',[\r\n    \"../hoster\"\r\n],function(hoster){\r\n\t//refer : https://github.com/gabceb/jquery-browser-plugin\r\n\r\n\tfunction detectBrowser() {\r\n\r\n\t\tfunction uaMatch( ua ) {\r\n\t\t\tua = ua.toLowerCase();\r\n\r\n\t\t\tvar match = /(edge)\\/([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opr)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(iemobile)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(msie) ([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar platform_match = /(ipad)/.exec( ua ) ||\r\n\t\t\t    /(ipod)/.exec( ua ) ||\r\n\t\t\t    /(windows phone)/.exec( ua ) ||\r\n\t\t\t    /(iphone)/.exec( ua ) ||\r\n\t\t\t    /(kindle)/.exec( ua ) ||\r\n\t\t\t    /(silk)/.exec( ua ) ||\r\n\t\t\t    /(android)/.exec( ua ) ||\r\n\t\t\t    /(win)/.exec( ua ) ||\r\n\t\t\t    /(mac)/.exec( ua ) ||\r\n\t\t\t    /(linux)/.exec( ua ) ||\r\n\t\t\t    /(cros)/.exec( ua ) ||\r\n\t\t\t    /(playbook)/.exec( ua ) ||\r\n\t\t\t    /(bb)/.exec( ua ) ||\r\n\t\t\t    /(blackberry)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar browser = {},\r\n\t\t\t    matched = {\r\n\t\t\t      browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || \"\",\r\n\t\t\t      version: match[ 2 ] || match[ 4 ] || \"0\",\r\n\t\t\t      versionNumber: match[ 4 ] || match[ 2 ] || \"0\",\r\n\t\t\t      platform: platform_match[ 0 ] || \"\"\r\n\t\t\t    };\r\n\r\n\t\t\tif ( matched.browser ) {\r\n\t\t\t\tbrowser[ matched.browser ] = true;\r\n\t\t\t  \tbrowser.version = matched.version;\r\n\t\t\t  \tbrowser.versionNumber = parseInt(matched.versionNumber, 10);\r\n\t\t\t}\r\n\r\n\t\t\tif ( matched.platform ) {\r\n\t\t\t \tbrowser[ matched.platform ] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered mobile platforms, meaning they run a mobile browser\r\n\t\t\tif ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\r\n\t\t\t\tbrowser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ \"windows phone\" ]) {\r\n\t\t\t\tbrowser.mobile = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered desktop platforms, meaning they run a desktop browser\r\n\t\t\tif ( browser.cros || browser.mac || browser.linux || browser.win ) {\r\n\t\t\t\tbrowser.desktop = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Chrome, Opera 15+ and Safari are webkit based browsers\r\n\t\t\tif ( browser.chrome || browser.opr || browser.safari ) {\r\n\t\t\t\tbrowser.webkit = true;\r\n\t\t\t}\r\n\r\n\t\t\t// IE11 has a new token so we will assign it msie to avoid breaking changes\r\n\t\t\tif ( browser.rv || browser.iemobile) {\r\n\t\t\t  var ie = \"ie\";\r\n\r\n\t\t\t  matched.browser = ie;\r\n\t\t\t  browser[ie] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Edge is officially known as Microsoft Edge, so rewrite the key to match\r\n\t\t\tif ( browser.edge ) {\r\n\t\t\t  delete browser.edge;\r\n\t\t\t  var msedge = \"edge\";\r\n\r\n\t\t\t  matched.browser = msedge;\r\n\t\t\t  browser[msedge] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Blackberry browsers are marked as Safari on BlackBerry\r\n\t\t\tif ( browser.safari && browser.blackberry ) {\r\n\t\t\t  var blackberry = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = blackberry;\r\n\t\t\t  browser[blackberry] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Playbook browsers are marked as Safari on Playbook\r\n\t\t\tif ( browser.safari && browser.playbook ) {\r\n\t\t\t  var playbook = \"playbook\";\r\n\r\n\t\t\t  matched.browser = playbook;\r\n\t\t\t  browser[playbook] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// BB10 is a newer OS version of BlackBerry\r\n\t\t\tif ( browser.bb ) {\r\n\t\t\t  var bb = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = bb;\r\n\t\t\t  browser[bb] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 15+ are identified as opr\r\n\t\t\tif ( browser.opr ) {\r\n\t\t\t  var opera = \"opera\";\r\n\r\n\t\t\t  matched.browser = opera;\r\n\t\t\t  browser[opera] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Stock Android browsers are marked as Safari on Android.\r\n\t\t\tif ( browser.safari && browser.android ) {\r\n\t\t\t  var android = \"android\";\r\n\r\n\t\t\t  matched.browser = android;\r\n\t\t\t  browser[android] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Kindle browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.kindle ) {\r\n\t\t\t  var kindle = \"kindle\";\r\n\r\n\t\t\t  matched.browser = kindle;\r\n\t\t\t  browser[kindle] = true;\r\n\t\t\t}\r\n\r\n\t\t\t // Kindle Silk browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.silk ) {\r\n\t\t\t  var silk = \"silk\";\r\n\r\n\t\t\t  matched.browser = silk;\r\n\t\t\t  browser[silk] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Assign the name and platform variable\r\n\t\t\tbrowser.name = matched.browser;\r\n\t\t\tbrowser.platform = matched.platform;\r\n\t\t\treturn browser;\r\n\t\t}\r\n\r\n\r\n\t    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t    if (isBrowser) {\r\n\t\t    return uaMatch( navigator.userAgent );\r\n\t    } else {\r\n\t    \treturn null;\r\n\t    }\r\n\t}\r\n\r\n\r\n\treturn hoster.detects.browser = detectBrowser;\r\n});\ndefine('skylark-langx-hoster/is-browser',[\r\n    \"./hoster\",\r\n    \"./detects/browser\"\r\n],function(hoster,detectBrowser){\r\n\tif (hoster.isBrowser == undefined) {\r\n\t\thoster.isBrowser = detectBrowser();\r\n\t}\r\n\r\n    return hoster.isBrowser;\r\n});\r\n\ndefine('skylark-domx-layouts/oriented',[\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-finder\",\n\t\"./Orientation\"\n],function(\n\tgeom,\n\tstyler,\n\tfinder,\n\tOrientation\n){\n\n\t/**\n\t * Detects children orientation.\n\t */\n\tfunction oriented(el, options) {\n\t\tvar elCSS = styler.css(el),\n\n\t\t\telWidth = geom.contentRect(el).width,\n\n\t\t\tchild1 = finder.childAt(el, 0, options),\n\t\t\tchild2 = finder.childAt(el, 1, options),\n\t\t\tfirstChildCSS = child1 && styler.css(child1),\n\t\t\tsecondChildCSS = child2 && styler.css(child2),\n\n\t\t\tfirstChildWidth = child1 && geom.marginSize(child1).width,\n\t\t\tsecondChildWidth = child2 && geom.marginSize(child2).width;\n\n\t\tif (elCSS.display === 'flex') {\n\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (elCSS.display === 'grid') {\n\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\tOrientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\treturn (child1 &&\n\t\t\t(\n\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\telCSS.float === 'none' ||\n\t\t\t\tchild2 &&\n\t\t\t\telCSS.float === 'none' &&\n\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t) ?\n\t\t\tOrientation.Vertical : Orientation.Horizontal\n\t\t);\n\t}\n\n\treturn oriented;\n});\ndefine('skylark-sortable/fallback/ghoster',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-langx-hoster/is-mobile\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-layouts/oriented\",\n\t\"skylark-devices-points/touch\"\n],function(\n\tskylark,\n\tlangx,\n\tisBrowser,\n\tisMobile,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\ttransforms,\n\toriented,\n\ttouch\n){\n    'use strict';\n\n\t/**\n\t * Returns the \"bounding client rect\" of given element\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\n\t * @return {Object}                        The boundingClientRect of el\n\t */\n\tfunction _getRect(el, adjustForTransform, container, adjustForFixed) {\n\t\tif (!el.getBoundingClientRect && el !== window) return;\n\t\tvar {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\tbottom,\n\t\t\tright,\n\t\t\twidth,\n\t\t\theight\n\t\t} = geom.boundingRect(el);\n\t\t\n\t\tif (adjustForTransform && el !== window) {\n\t\t\t// Adjust for scale()\n\t\t\tvar matrix = transforms.matrix(container || el),\n\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\tif (matrix) {\n\t\t\t\ttop /= scaleY;\n\t\t\t\tleft /= scaleX;\n\n\t\t\t\twidth /= scaleX;\n\t\t\t\theight /= scaleY;\n\n\t\t\t\tbottom = top + height;\n\t\t\t\tright = left + width;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\tbottom: bottom,\n\t\t\tright: right,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\tvar ghoster = {\n\t\tghostEl : null,\n\n\t\tPositionGhostAbsolutely : isMobile.apple.device, //IOS\n\t\t// For positioning ghost absolutely\n\t\tghostRelativeParent : null,\n\t\tghostRelativeParentInitialScroll : [], // (left, top)\n\n\t\t_appendGhost: function (dragEl,container,options) {\n\t\t\t// Bug if using scale(): https://stackoverflow.com/questions/2637058\n\t\t\t// Not being adjusted for\n\t\t\tvar /// dragEl = dnd.dragEl,\n\t\t\t\tghostEl = this.ghostEl;\n\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar ///container = this.options.fallbackOnBody ? document.body : rootEl,\n\t\t\t\t\trect = _getRect(dragEl, true, container, !this.PositionGhostAbsolutely),\n\t\t\t\t\tcss = styler.css(dragEl);\n\t\t\t\t\t///options = this.options;\n\n\t\t\t\t// Position absolutely\n\t\t\t\tif (this.PositionGhostAbsolutely) {\n\t\t\t\t\t// Get relatively positioned parent\n\t\t\t\t\tvar ghostRelativeParent = this.ghostRelativeParent = container;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'position') === 'static' &&\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'transform') === 'none' &&\n\t\t\t\t\t\tghostRelativeParent !== document\n\t\t\t\t\t) {\n\t\t\t\t\t\tghostRelativeParent = ghostRelativeParent.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document) {\n\t\t\t\t\t\tvar ghostRelativeParentRect = _getRect(ghostRelativeParent, true);\n\n\t\t\t\t\t\trect.top -= ghostRelativeParentRect.top;\n\t\t\t\t\t\trect.left -= ghostRelativeParentRect.left;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n\t\t\t\t\t\tif (ghostRelativeParent === document) {\n\t\t\t\t\t\t\tghostRelativeParent = this.ghostRelativeParent = noder.scrollingElement();\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\n\t\t\t\t\t\trect.top += ghostRelativeParent.scrollTop;\n\t\t\t\t\t\trect.left += ghostRelativeParent.scrollLeft;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tghostRelativeParent = this.ghostRelativeParent = noder.scrollingElement();\n\t\t\t\t\t}\n\t\t\t\t\tvar offsets = geom.scrollOffset(ghostRelativeParent);\n\t\t\t\t\tghostRelativeParentInitialScroll = [offsets.offsetLeft,offsets.offsetTop]\n\t\t\t\t}\n\n\n\t\t\t\tghostEl =this.ghostEl = dragEl.cloneNode(true);\n\n\t\t\t\tstyler.toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\tstyler.toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\tstyler.toggleClass(ghostEl, options.dragClass, true);\n\n\n\t\t\t\tstyler.css(ghostEl, {\n\t\t\t\t\t'box-sizing': 'border-box',\n\t\t\t\t\t'margin': 0,\n\t\t\t\t\t'top': rect.top,\n\t\t\t\t\t'left': rect.left,\n\t\t\t\t\t'width': rect.width,\n\t\t\t\t\t'height': rect.height,\n\t\t\t\t\t'opacity': '0.8',\n\t\t\t\t\t'position': (this.PositionGhostAbsolutely ? 'absolute' : 'fixed'),\n\t\t\t\t\t'zIndex': '100000',\n\t\t\t\t\t'pointerEvents': 'none'\t\n\t\t\t\t});\n\t\t\t\tcontainer.appendChild(ghostEl);\n\t\t\t}\n\t\t},\n\n\t\tgetRelativeScrollOffset : function(){\n\t\t\treturn this.PositionGhostAbsolutely && this.ghostRelativeParent && autoscroll._getRelativeScrollOffset(this.ghostRelativeParent);\n\t\t},\n\n\t\tremove : function() {\n\t\t\tif (this.ghostEl) {\n\t\t\t\tnoder.remove(this.ghostEl);\n\t\t\t} \n\t\t\tthis.ghostEl = null;\n\n\t\t}\n\n\n\t};\n\n\treturn ghoster;\n\t\n});\ndefine('skylark-sortable/fallback/MousedDragDrop',[\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-plugins-scrolls/auto-scroll\",\n\t\"./ghoster\"\n],function(\n\tlangx,\n\t$,\n\teventer,\n\tstyler,\n\tfinder,\n\ttransforms,\n\tAutoScroll,\n\tghoster\n){\n  'use strict';\n\n\n\tvar MousedDragDrop = langx.Emitter.inherit({\n\t\t_construct : function(dnd) {\n\t\t\tthis.dnd = dnd;\n\n\t\t\tvar $doc = $(document);\n\n\t\t\tthis.listenTo($doc,\"mousemove\",this._onMouseMove);\n\t\t\tthis.listenTo($doc,\"mouseup\",this._onMouseUp);\n\n\t\t},\n\n\t\t_onMouseUp : function(evt) {\n\t\t\tvar dnd = this.dnd;\n        \tif (dnd.putSortable) {\n        \t\tdnd.putSortable.droppable._onDrop(evt)\n        \t}\n        \tif (dnd.dragging) {\n        \t\tdnd.dragging._onDragEnd(evt);\n        \t}\n        \tghoster.remove();\n        \tthis.destroy();\n\t\t},\n\n        _onMouseMove: function (/**TouchEvent*/evt) {\n            //dnd.log(\"_onMouseMove\",\"start\");\n            var dnd = this.dnd,\n            \tghostEl = ghoster.ghostEl,\n            \tdraggable = dnd.dragging,\n            \tdragEl = dnd.dragEl,\n            \ttapEvt = dnd.tapEvt;\n            if (tapEvt) {\n                var options =  draggable.options,\n                    fallbackTolerance = options.fallbackTolerance,\n                    fallbackOffset = options.fallbackOffset,\n                    matrix = ghostEl && transforms.matrix(ghostEl),\n                    scaleX = ghostEl && matrix && matrix.a,\n                    scaleY = ghostEl && matrix && matrix.d,\n                    relativeScrollOffset = ghoster.getRelativeScrollOffset(),\n                    dx = ((evt.clientX - tapEvt.clientX)\n                            + fallbackOffset.x) / (scaleX || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n                    dy = ((evt.clientY - tapEvt.clientY)\n                            + fallbackOffset.y) / (scaleY || 1)\n                            + (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n                    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n                // only set the status to dragging, when we are actually dragging\n                if (!this._dragStarted && !dnd.awaitingDragStarted) {\n                    if (fallbackTolerance &&\n                        Math.min( Math.abs(evt.clientX - draggable._lastX),  Math.abs(evt.clientY - draggable._lastY)) < fallbackTolerance\n                    ) {\n                        return;\n                    }\n                    draggable._onDragStart(evt, true);\n\n                    ghoster._appendGhost(dragEl,document.body,draggable.options);\n\n                \t///dnd.ignoreNextClick = true;\n\n                \tthis._dragStarted = true;\n                \tthis._loopId = setInterval(this._emulateDragOver.bind(this), 50);\n\n                }\n\n                this._handleAutoScroll(evt, true);\n\n                ///moved = true;\n                ///dnd.touchEvt = touch;\n                this.touchEvt = evt;\n\n                if (ghostEl) {\n                    styler.css(ghostEl, 'transform', translate3d);\n\n                }\n\n                //evt.cancelable && evt.preventDefault();\n                evt.preventDefault()\n            }\n        },\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tvar dnd = this.dnd,\n\t\t\t\tdragEl = dnd.dragEl,\n\t\t\t\t///touchEvt = dnd.touchEvt;\n\t\t\t\ttouchEvt = this.touchEvt;\n\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t//_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tif (target === parent) break;\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[dnd.expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[dnd.expando].droppable._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//if (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\tif (inserted) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\t///dragEl.parentNode[dnd.expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t//_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tvar dnd = this.dnd;\n\n\t\t\tif (!dnd.dragEl || !dnd.active.options.scroll) return;\n\n\t\t\t///return autoscroll._handleAutoScroll(evt,dnd.active.options,fallback,dnd.expando);\n\n\n\t\t\tvar x = evt.clientX,\n\t\t\t\ty = evt.clientY,\n\n\t\t\t\telem = document.elementFromPoint(x, y);\n\n\n\t\t\t// Listener for pointer element change\n\t\t\t////var ogElemScroller = finder.scrollableParent(elem, true);\n\t\t\tif (\n\t\t\t\t(\n\t\t\t\t\t!this.pointerElemChangedInterval ||\n\t\t\t\t\tx !== this.lastPointerElemX ||\n\t\t\t\t\ty !== this.lastPointerElemY\n\t\t\t\t)\n\t\t\t) {\n\n\t\t\t\tif (this.pointerElemChangedInterval){\n\t\t\t\t\tclearInterval(this.pointerElemChangedInterval);\t\n\t\t\t\t} \n\t\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\n  \t\t\t    var ogElemScroller = null ;\n\t\t\t\tthis.pointerElemChangedInterval = setInterval(function() {\n\t\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\n\t\t\t\t\tvar newElem = finder.scrollableParent(document.elementFromPoint(x, y), true);\n\t\t\t\t\tif (newElem !== ogElemScroller) {\n\t\t\t\t\t\togElemScroller = newElem;\n\t\t\t\t\t\tif (this.autoscroller) {\n\t\t\t\t\t\t\tthis.autoscroller.destroy();\n\t\t\t\t\t\t\tthis.autoscroller = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.autoscroller = new AutoScroll(ogElemScroller,dnd.active.options);\n\t\t\t\t\t\tthis.autoscroller.handle(x,y);\n\t\t\t\t\t}\n\t\t\t\t}, 10);\n\t\t\t\tthis.lastPointerElemX = x;\n\t\t\t\tthis.lastPointerElemY = y;\n\t\t\t}\n    \t},\n\n\t\tdestroy : function() {\n\t\t\tthis.unlistenTo();\n        \tif (this._loopId) {\n        \t\tclearInterval(this._loopId);\n        \t}\n\n\t\t\tif (this.pointerElemChangedInterval){\n\t\t\t\tclearInterval(this.pointerElemChangedInterval);\t\n\t\t\t} \n\n            ///autoscroll._nulling();\n            \n            //autoscroll._clearAutoScrolls();\n            ///autoscroll._cancelThrottle();\n\n            if (this.autoscroller) {\n            \tthis.autoscroller.destroy();\n            \tthis.autoscroller = null;            \t\n            }\n\n            this._dragStarted = false;\n\t\t}\n\t});\n\n\treturn MousedDragDrop;\n});\ndefine('skylark-sortable/dnd',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"./fallback/MousedDragDrop\"\n],function(\n\tskylark,\n\tlangx,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\tMousedDragDrop\n){\n    'use strict';\n\n\n\tvar expando = 'Sortable' + (new Date).getTime();\n\n\n\tvar dnd = {\n\t\tlog : function log(category,message) {\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\n\t\t},\n\n\t\texpando,\n\n\t\tactiveGroup : null,\n\t\tactive : null,\n\t\tputSortable : null,\n\t\tsortables : [],\n\n\n\t\trootEl : null,\n\t\tdragEl : null,\n\t\tcloneEl : null,\n\t\tnextEl : null,\n\t\tparentEl : null,\n\n\t\toldIndex : null,\n\n\n\t\t///ignoreNextClick : false,\n        awaitingDragStarted : false,\n\t\t///touchEvt : null,\n\n        prepare: function(draggable,dragEl) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        \tthis.dragEl = dragEl;\n            if (!this.active.nativeDraggable) {\n            \tthis._fallbacker = new MousedDragDrop(this);\n            } else {\n            \tdragEl.draggable = true;\n                eventer.on(dnd.dragEl, 'dragend', (e)=>{\n                \tthis.dragging._onDragEnd(e)\n                });\n                eventer.on(dnd.dragEl, 'dragstart', (e)=>{\n                \tthis.dragging._onDragStart(e)\n                });\n            }\n\n            dnd.log(\"_triggerDragStart\",\"start\");\n            dnd.log(\"_triggerDragStart\",\"nativeDraggable is \" +  this.active.nativeDraggable);\n\n            try {\n                if (document.selection) {\n                    // Timeout neccessary for IE9\n                    langx.defer(function () {\n                        document.selection.empty();\n                    });\n                } else {\n                    window.getSelection().removeAllRanges();\n                }\n            } catch (err) {\n            }\n\n\t\t},\n\n        start: function(draggable, event) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n\t\t\t//var el = this.active.elm(),\n\t\t\t//\townerDocument = el.ownerDocument;\n\n\n\t\t\t//eventer.on(ownerDocument, 'dragover', this.nearestEmptyInsertDetectEvent);\n\t\t\t///eventer.on(ownerDocument, 'mousemove', this.nearestEmptyInsertDetectEvent);\n\t\t\t///eventer.on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n\n\t\t\t///if (this.active.nativeDraggable) {\n                ///eventer.on(document, 'dragover', this._handleAutoScroll);\n               // eventer.on(document, 'dragover', this._checkAlignment);\n            //} else {\n                ///eventer.on(document, 'mousemove', this._handleAutoScroll);\n            //}\n        },\n\n        over : function(evt) {\n\t\t\t//this._handleAutoScroll(evt);\n        },\n\n        end: function(dropped) {\n\t  \t\t//eventer.off(document, 'dragover', this.nearestEmptyInsertDetectEvent);\n\t  \t\t///eventer.off(document, 'mousemove', this.nearestEmptyInsertDetectEvent);\n\t\n\t\t\t//if (this.active.nativeDraggable) {\n\t\t\t\t///eventer.off(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t//eventer.off(document, 'dragover', this._checkAlignment);\n\t\t\t//} else {\n\t\t        // Unbind events\n\t            ///eventer.off(document, 'mousemove', this._onTouchMove);\n\n\t\t\t//}\n\n        \tthis._nulling();\n \t\t},\n\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\n\t\t\tif (dnd.dragEl) {\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\t\tif (nearest) {\n\t\t\t\t\t// Create imitation event\n\t\t\t\t\tvar event = {};\n\t\t\t\t\tfor (var i in evt) {\n\t\t\t\t\t\tevent[i] = evt[i];\n\t\t\t\t\t}\n\t\t\t\t\tevent.target = event.rootEl = nearest;\n\t\t\t\t\tevent.preventDefault = void 0;\n\t\t\t\t\tevent.stopPropagation = void 0;\n\t\t\t\t\tnearest[expando]._onDragOver(event);\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable : function(x, y) {\n\t\t\tvar sortables = this.sortables;\n\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\n\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDraggable : function (el) {\n\t\t\tel.draggable = false;\n\t\t},\n\n\t\t_nulling: function() {\n\n\t\t\tdnd.dragEl = \n\t\t\tdnd.rootEl =\n\t\t\tdnd.parentEl =\n\t\t\t//ghoster.ghostEl =\n\t\t\tdnd.nextEl =\n\t\t\tdnd.cloneEl =\n\t\t\t///lastDownEl =\n\n\n\t\t\tdnd.tapEvt =\n\t\t\t///dnd.touchEvt =\n\n\t\t\tdnd.oldIndex =\n\n\t\t\tdnd.putSortable =\n\t\t\tdnd.activeGroup =\n\t\t\tdnd.active = null;\n\n\t\t}\n\n\n\t};\n\n\n\treturn dnd;\n\t\n});\ndefine('skylark-sortable/draggable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,touch,dnd){\r\n    var \r\n        lastDownEl,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\tclass Draggable {\r\n\t\tconstructor(sortable,options) {\r\n\t\t\tthis.sortable = sortable;\r\n\t\t\tvar el = this._elm = sortable.elm();\r\n\t\t\tthis.options = options;\r\n\r\n\t        // Bind events\r\n            touch.mousy(el);\r\n            eventer.on(el, 'mousedown', this._onMouseDown,this);\r\n\r\n\t\t}\r\n\r\n\t\telm() {\r\n\t\t\treturn this._elm;\r\n\t\t}\r\n\t\t//drag start \r\n        // handle moudedown event\r\n        _onMouseDown(/** Event|TouchEvent */evt) {\r\n            //if (!evt.cancelable) return;\r\n            var sortable = this.sortable,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                type = evt.type,\r\n                target = evt.target,\r\n                originalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n            // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\r\n            ///if (dnd.dragEl) {\r\n            ///    return;\r\n            ///}\r\n\r\n            if (/mousedown/.test(type) && evt.button !== 0 || options.disabled) {\r\n                return; // only left button and enabled\r\n            }\r\n\r\n            // cancel dnd if original target is content editable\r\n            if (originalTarget.isContentEditable) {\r\n                return;\r\n            }\r\n\r\n            target = finder.closest(target, options.draggable, el, false);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                // Ignoring duplicate `down`\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = _index(target);\r\n            startDraggableIndex = _index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    sortable._dispatchEvent(sortable, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        sortable._dispatchEvent(sortable, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    preventOnFilter && evt.cancelable && evt.preventDefault();\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n                return;\r\n            }\r\n\r\n            // Prepare `dragstart`\r\n            var\r\n                ownerDocument = el.ownerDocument,\r\n                dragEl = dnd.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex,\r\n                tapEvt = dnd.tapEvt;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = dnd.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = dnd.tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: evt.clientX,\r\n                    clientY: evt.clientY\r\n                };\r\n\r\n                this._lastX = evt.clientX;\r\n                this._lastY = evt.clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                // Bind the events: dragstart/dragend\r\n                ///sortable._triggerDragStart(evt, touch);\r\n\r\n                dnd.prepare(this,dnd.dragEl);\r\n\r\n                // Drag start event\r\n                sortable._dispatchEvent(sortable, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                // Chosen item\r\n                styler.toggleClass(dragEl, options.chosenClass, true);\r\n            }\r\n        }\r\n\r\n\r\n        _onDragStart(/**Event*/evt, /**boolean*/fallback) {\r\n            dnd.log(\"_onDragStart\",\"start\");\r\n            var _this = this,\r\n                dragEl = dnd.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            //this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                _this.sortable._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            if (!fallback){\r\n                styler.toggleClass(dragEl, options.dragClass, true);\r\n            } \r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                //dnd.ignoreNextClick = true;\r\n                //_this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n\r\n\t        function _dragStarted(fallback, evt) {\r\n\t            dnd.awaitingDragStarted = false;\r\n\t            var dragEl = dnd.dragEl,\r\n\t                rootEl = this._elm,\r\n\t                oldIndex = dnd.oldIndex,\r\n\t                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n\t            if (rootEl && dragEl) {\r\n\t                //if (this.nativeDraggable) {\r\n\t                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n\t                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n\t                //}\r\n\t                dnd.start(this);\r\n\t                var options = this.options;\r\n\r\n\t                // Apply effect\r\n\t                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n\t                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n\t                // In case dragging an animated element\r\n\t                styler.css(dragEl, 'transform', '');\r\n\r\n\t                //dnd.active = this;\r\n\r\n\t                //fallback && this._appendGhost();\r\n\r\n\t                // Drag start event\r\n\t                this.sortable._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n\t            } else {\r\n\t                this._nulling();\r\n\t            }\r\n\t        }\r\n\r\n            _this._dragStartId = langx.defer(_dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        }\r\n\r\n        //\r\n        //\r\n\r\n        _onDragEnd(/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = dnd.dragEl,\r\n                sortable = this.sortable,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            //clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.cancel();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.cancel();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n\r\n            if (sortable.nativeDraggable) {\r\n                eventer.off(dnd.dragEl, 'dragstart', this._onDragStart);\r\n                eventer.off(dnd.dragEl, 'dragend', this._onDragEnd);\r\n            }\r\n\r\n            lastDownEl = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n           \t//this.dragEl = null;\r\n\r\n            dnd.end();\r\n\r\n        }\r\n\r\n        destroy() {\r\n                    eventer.off(el, 'mousedown', this._onMouseDown);\r\n\r\n        }\r\n\t}\r\n\r\n\r\n\treturn Draggable;\r\n\r\n});\ndefine('skylark-sortable/droppable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,geom,touch,dnd){\r\n\r\n\tvar\tmoved,\r\n\t    pastFirstInvertThresh,\r\n\t    isCircumstantialInvert,\r\n   \t\t_silent = false;\r\n\r\n\r\n\t/**\r\n\t * Checks if a side of an element is scrolled past a side of it's parents\r\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\r\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\r\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\r\n\t */\r\n\tfunction _isScrolledPast(el, side) {\r\n\t\tvar parent = finder.scrollableParent(el, true),\r\n\t\t\telSide = geom.boundingRect(el)[side];\r\n\r\n\t\t/* jshint boss:true */\r\n\t\twhile (parent) {\r\n\t\t\tvar parentSide = geom.boundingRect(parent)[side],\r\n\t\t\t\tvisible;\r\n\r\n\t\t\tif (side === 'top' || side === 'left') {\r\n\t\t\t\tvisible = elSide >= parentSide;\r\n\t\t\t} else {\r\n\t\t\t\tvisible = elSide <= parentSide;\r\n\t\t\t}\r\n\r\n\t\t\tif (!visible) return parent;\r\n\r\n\t\t\tif (parent === noder.scrollingElement()) break;\r\n\r\n\t\t\tparent = finder.scrollableParent(parent, false);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n\t * @param  {HTMLElement} el       Parent element\r\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\r\n\t */\r\n\t function _lastChild(el) {\r\n\t\treturn finder.lastChild(el,{\r\n\t\t\tignoreHidden : true,\r\n\t\t\texcluding : []\r\n\t\t})\r\n\t}\r\n\r\n\t function _ghostIsLast(evt, axis, el) {\r\n\t\tvar elRect = geom.boundingRect(finder.lastChild(el,{ignoreHidden : true,excluding : []})),\r\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\r\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\r\n\t\t\tspacer = 10;\r\n\r\n\t\treturn (\r\n\t\t\taxis === 'vertical' ?\r\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\r\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _isClientInRowColumn(x, y, el, axis, options) {\r\n\t\tvar targetRect = geom.boundingRect(el),\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\r\n\r\n\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\r\n\t}\r\n\r\n\tfunction _isElInRowColumn(el1, el2, axis) {\r\n\t\t//var dragEl = dnd.active.dragEl;\r\n\r\n\t\tvar el1Rect = geom.boundingRect(el1),//el1 === dragEl && realDragElRect || geom.boundingRect(el1),\r\n\t\t\tel2Rect = geom.boundingRect(el2),//el2 === dragEl && realDragElRect || geom.boundingRect(el2),\r\n\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\r\n\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\r\n\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\r\n\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\r\n\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\r\n\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\r\n\r\n\t\treturn (\r\n\t\t\tel1S1Opp === el2S1Opp ||\r\n\t\t\tel1S2Opp === el2S2Opp ||\r\n\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\tclass Droppable {\r\n\t\tconstructor(sortable,options) {\r\n\t\t\tthis.sortable = sortable;\r\n\t\t\tvar el = this.el= this._elm = sortable.elm();\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.on(el, 'dragover', this);\r\n\t\t\t\teventer.on(el, 'dragenter', this);\r\n\t\t        eventer.on(el, 'drop', this);\r\n\t\t\t}\r\n\t        eventer.on(el, 'selectstart', this);\r\n\t\t}\r\n\r\n\r\n\t\t_onMove (fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\t\tvar evt,\r\n\t\t\t\tsortable = fromEl[dnd.expando],\r\n\t\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\t\tretVal;\r\n\r\n\t\t\tevt = eventer.create(\"move\",{\r\n\t\t\t\tto : toEl,\r\n\t\t\t\tfrom : fromEl,\r\n\t\t\t\tdragged : dragEl,\r\n\t\t\t\tdraggedRect: dragRect,\r\n\t\t\t\trelated : targetEl || toEl,\r\n\t\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\t\toriginalEvent : originalEvt\r\n\t\t\t});\r\n\r\n\t\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\t\tif (onMoveFn) {\r\n\t\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver(/**Event*/evt) {\r\n\t\t\tvar el = this._elm,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = dnd.active,\r\n\t\t\t\tisOwner = (dnd.activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\r\n\t\t\t\tlastMode, // 'swap' or 'insert'\r\n\t\t\t\tlastTarget,\r\n\t\t\t\tlastDirection,\r\n\t\t\t\ttargetMoveDistance;\r\n            //dnd.log(\"_onDragOver\",\"start\");\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(sortable);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== sortable && sortable !== dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable = sortable;\r\n\t\t\t\t\t} else if (sortable === dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable =  null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && sortable._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && sortable._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t//sortable._handleAutoScroll(evt);\r\n\t\t\t\t\tdnd.over(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && dnd.nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\tsortable._dispatchEvent(sortable, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl), oldDraggableIndex, _index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = _index(dragEl),\r\n\t\t\t\t\ttargetIndex = _index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = dnd.activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = sortable._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tdnd.parentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = _lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tdnd.parentEl = el; // actualization\r\n\t\t\t\t\t\t///realDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\r\n\t\t\t\t\t///realDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\tif (scrolledPastTop) {\r\n\t\t\t\t\t\t\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdnd.parentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t\ttargetMoveDistance =  Math.abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t_onDrop(/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tparentEl = dnd.parentEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\tnewIndex,\r\n\t\t\t\tnewDraggableIndex;\r\n\r\n\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//ghoster.remove();\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tnoder.remove(dnd.cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\r\n\t\t\t\t\tdnd._disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class'sd\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tsortable.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t}\r\n\r\n\t\t_offUpEvents () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t}\r\n\r\n\t\t_nulling() {\r\n\r\n\t\t\tmoved =\tnull;\r\n\r\n\t\t}\r\n\r\n\t\thandleEvent (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdestroy() {\r\n\t\t\tvar sortable = this.sortable;\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.off(el, 'dragover', this);\r\n\t\t\t\teventer.off(el, 'dragenter', this);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn Droppable;\r\n});\ndefine('skylark-sortable/Sortable',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-langx-hoster/is-mobile\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-layouts/oriented\",\n    \"skylark-domx-plugins-base\",\n\t\"skylark-devices-points/touch\",\n\t\"./dnd\",\n\t\"./draggable\",\n\t\"./droppable\"\n],function(\n\tskylark,\n\tlangx,\n\tisBrowser,\n\tisMobile,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\ttransforms,\n\toriented,\n\tplugins,\n\ttouch,\n\tdnd,\n\tDraggable,\n\tDroppable\n){\n\n\t'use strict';\n\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\treturn finder.index(el,function(el){\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\t\t\t\n\t\t})\n\t}\n\n\n\n\n\n\tvar \n\n\t\t///realDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\n\t\tEdge = isBrowser && isBrowser.edge,\n\t\tFireFox = isBrowser && isBrowser.firefox,\n\t\tSafari = isBrowser && isBrowser.safari,\n\n\t\tIOS = isMobile && isMobile.apple.device,\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\n\n\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents,\n\n\t\t_alignedSilent = false,\n\n\t\t//savedInputChecked = [],\n\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t};\n\n\n\tvar Sortable =  plugins.Plugin.inherit({\n        klassName: \"Sortable\",\n        \n        pluginName : \"intg.sortable\",\n\n\n\t\toptions : {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\t//draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function(evt, target, dragEl,ghostEl) {\n\t\t\t\treturn oriented(this.el, langx.mixin({\n\t\t\t\t\t\t\t\t\texcluding : [ghostEl,dragEl]\n\t\t\t\t\t\t\t\t},this.options));\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tdelayOnTouchOnly: false,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\n\n\t\t\tfallbackOnBody: true,  //fix\n\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\t//supportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\n\t\t\temptyInsertThreshold: 5\n\t\t},\n\n\n\t\t/**\n\t\t * @class  Sortable\n\t\t * @param  {HTMLElement}  el\n\t\t * @param  {Object}       [options]\n\t\t */\n\t\t_construct : function Sortable(el, options) {\n            this.overrided(el,options);\n\n\t\t\tthis.el = el; // root element\n\n\t\t\t// Export instance\n\t\t\tel[dnd.expando] = this;\n\n\t\t\toptions = this.options;\n\n\t\t\toptions.draggable = options.draggable || /[uo]l/i.test(el.nodeName) ? '>li' : '>*';\n\n\n\t\t\t_prepareGroup(options);\n\n\t\t\t// Bind all private methods\n\t\t\tfor (var fn in this) {\n\t\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Setup drag mode\n\t\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\n\t\t\t\tthis.options.touchStartThreshold = 1;\n\t\t\t}\n\n\n\n\t\t\tdnd.sortables.push(this.el);\n\n\t\t\t// Restore sorting\n\t\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\n\n\t\t\tthis.draggable = new Draggable(this,this.options);\n\n\t\t\tthis.droppable = new Droppable(this,this.options);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\tvar  dragEl = dnd.dragEl;\n\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl,null) : this.options.direction;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation,\n\t\t\t\tdragEl = dnd.dragEl;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = geom.boundingRect(target);\n\n\t\t\t\t////if (target === dragEl) {\n\t\t\t\t///\trealDragElRect = currentRect;\n\t\t\t\t///}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tnoder.reflow(target);\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\tstyler.css(target, 'transition', '');\n\t\t\t\t\tstyler.css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n        _hideClone: function() {\n        \treturn;\n            if (!dnd.cloneEl.cloneHidden) {\n                styler.hide(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = true;\n                if (dnd.cloneEl.parentNode && this.options.removeCloneOnHide) {\n                    noder.remove(dnd.cloneEl);\n                }\n            }\n        },\n\n        _showClone: function(putSortable) {\n            var rootEl = dnd.active.el,\n                nextEl = dnd.nextEl;\n\n            if (putSortable.lastPutMode !== 'clone') {\n                this._hideClone();\n                return;\n            }\n\n            if (dnd.cloneEl.cloneHidden) {\n                // show clone at dragEl or original position\n                if (rootEl.contains(dnd.dragEl) && !this.options.group.revertClone) {\n                    rootEl.insertBefore(dnd.cloneEl, dnd.dragEl);\n                } else if (nextEl) {\n                    rootEl.insertBefore(dnd.cloneEl, nextEl);\n                } else {\n                    rootEl.appendChild(dnd.cloneEl);\n                }\n\n                if (this.options.group.revertClone) {\n                    this._animate(dnd.dragEl, dnd.cloneEl);\n                }\n                styler.show(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = false;\n            }\n        },\n\n\t\t_dispatchEvent : function (\n\t\t\tsortable, \n\t\t\trootEl, \n\t\t\tname,\n\t\t\ttargetEl, \n\t\t\ttoEl, \n\t\t\tfromEl,\n\t\t\tstartIndex, \n\t\t\tnewIndex,\n\t\t\tstartDraggableIndex, \n\t\t\tnewDraggableIndex,\n\t\t\toriginalEvt\n\t\t) {\n\t\t\tsortable = (sortable || rootEl[dnd.expando]);\n\t\t\tvar evt,\n\t\t\t\toptions = sortable.options,\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1),\n\t\t\t\tputSortable = dnd.putSortable;\n\n\t\t\tevt = eventer.create(name,{\n\t\t\t\tto : toEl || rootEl,\n\t\t\t\tfrom : fromEl || rootEl,\n\t\t\t\titem : targetEl || rootEl,\n\t\t\t\tclone : dnd.cloneEl,\n\t\t\t\toldIndex : startIndex,\n\t\t\t\tnewIndex : newIndex,\n\t\t\t\toldDraggableIndex : startDraggableIndex,\n\t\t\t\tnewDraggableIndex : newDraggableIndex,\n\t\t\t\toriginalEvent : originalEvt,\n\t\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\n\t\t\t});\n\t\t\tif (rootEl) {\n\t\t\t\trootEl.dispatchEvent(evt);\n\t\t\t}\n\n\t\t\tif (options[onName]) {\n\t\t\t\toptions[onName].call(sortable, evt);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || noder.generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[dnd.expando] = null;\n\n\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tdnd.sortables.splice(dnd.sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t});\n\n\n\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.9.0';\n\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\n});\ndefine('skylark-sortable/main',[\n\t\"skylark-langx\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-styler\",\n\t\"./Sortable\"\n],function(\n\tlangx,\n\teventer,\n\tfinder,\n\tnoder,\n\tstyler,\n\tSortable\n){\n\t// Export utils\n\tSortable.utils = {\n\t\ton: eventer.on,\n\t\toff: eventer.off,\n\t\tcss: styler.css,\n\t\t///find: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!finder.closest(el, selector, el, false);\n\t\t},\n\t\textend: langx.mixin,\n\t\tthrottle: langx.debounce,\n\t\tclosest: finder.closest,\n\t\ttoggleClass: styler.toggleClass,\n\t\tclone: \tfunction (el) {\n\t\t\t\t\treturn noder.clone(el,true);\n\t\t\t\t},\n\t\t//index: containers._index,\n\t\tnextTick: \tfunction _nextTick(fn) {\n\t\t\t//return setTimeout(fn, 0);\n\t\t\treturn langx.defer(fn);\n\t\t},\n\t\tcancelNextTick: \tfunction _cancelNextTick(id) {\n\t\t\t//return clearTimeout(id);\n\t\t\treturn id && id.stop();\n\t\t},\n\t\t//detectDirection: _detectDirection,\n\t\tgetChild: function(el, childNum, options) {\n\t\t\toptions.excluding = [];\n\t\t\toptions.closesting = options.draggable;\n\t\t\treturn finder.childAt(el,childNum,options);\n\t\t}\n\t};\n\n\treturn Sortable;\n});\ndefine('skylark-sortable', ['skylark-sortable/main'], function (main) { return main; });\n\n"]}