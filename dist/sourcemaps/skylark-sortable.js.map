{"version":3,"sources":["skylark-sortable.js"],"names":["define","hoster","detects","browser","window","document","ua","toLowerCase","match","exec","indexOf","platform_match","matched","version","versionNumber","platform","parseInt","android","bb","blackberry","ipad","iphone","ipod","kindle","playbook","silk","mobile","cros","mac","linux","win","desktop","chrome","opr","safari","webkit","rv","iemobile","edge","name","uaMatch","navigator","userAgent","detectBrowser","undefined","isBrowser","geom","styler","finder","Orientation","el","options","elCSS","css","elWidth","contentRect","width","child1","childAt","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginSize","secondChildWidth","display","flexDirection","Vertical","Horizontal","gridTemplateColumns","split","length","float","touchingSideChild2","clear","skylark","langx","$","noder","eventer","expando","Date","getTime","dnd","log","category","message","append","activeGroup","active","putSortable","sortables","rootEl","dragEl","cloneEl","nextEl","parentEl","oldIndex","awaitingDragStarted","prepare","draggable","this","dragging","sortable","start","event","over","evt","end","dropped","_nulling","nearestEmptyInsertDetectEvent","nearest","_detectNearestEmptySortable","clientX","clientY","i","target","preventDefault","stopPropagation","_onDragOver","x","y","lastChild","ignoreHidden","excluding","ghostEl","rect","boundingRect","threshold","emptyInsertThreshold","insideHorizontally","left","right","insideVertically","top","bottom","_disableDraggable","tapEvt","datax","touch","plugins","manager","on","off","attr","removeAttr","pagePosition","addClass","height","Draggable","Plugin","inherit","klassName","pluginName","draggingClass","forceFallback","_construct","elm","overrided","self","forEach","eventName","isFunction","mousy","mousedown","e","handle","dragHandle","closest","_elm","source","dragSource","startPos","mouseup","dragstart","dragend","stop","register","DndDraggable","lastDownEl","savedInputChecked","_index","selector","index","nodeName","toUpperCase","matches","[object Object]","_dndDraggable","preparing","_onPrepare","started","_onDragStart","originalEvent","ended","_onDragEnd","startIndex","startDraggableIndex","preventOnFilter","filter","root","inputs","getElementsByTagName","idx","checked","push","_saveInputCheckedState","tagName","className","call","_dispatchEvent","originalTarget","some","criteria","trim","ownerDocument","oldDraggableIndex","parentNode","nextSibling","group","_lastX","_lastY","style","transition","transform","ignore","ctx","iterator","list","n","_find","toggleClass","chosenClass","fallback","_this","dataTransfer","clone","_cloneId","defer","removeCloneOnHide","insertBefore","dragClass","effectAllowed","setData","_dragStartId","ghostClass","bind","clearTimeout","_dragStartTimer","cancel","Droppable","hoverClass","activeClass","acceptable","dragover","e2","create","overElm","transfer","draggingTransfer","trigger","dragenter","dragleave","removeClass","drop","DndDroppable","moved","pastFirstInvertThresh","isCircumstantialInvert","_silent","_isScrolledPast","side","parent","scrollableParent","elSide","parentSide","scrollingElement","_unsilent","_globalDragOver","dropEffect","cancelable","_dndDroppable","overing","_onDrop","fromEl","toEl","dragRect","targetEl","targetRect","originalEvt","willInsertAfter","retVal","onMoveFn","onMove","to","from","dragged","draggedRect","related","relatedRect","dispatchEvent","revert","lastMode","lastTarget","lastDirection","targetMoveDistance","activeSortable","isOwner","canSort","sort","contains","animated","completed","disabled","lastPutMode","checkPull","checkPut","axis","_getDirection","_hideClone","appendChild","elLastChild","_lastChild","elRect","mouseOnAxis","mouseOnOppAxis","targetS2","targetS1Opp","targetS2Opp","_ghostIsLast","_showClone","_onMove","changed","targetBeforeFirstSwap","direction","aligned","sortableMouseAligned","differentLevel","side1","scrolledPastTop","scrollBefore","scrollTop","el1","el2","el1Rect","el2Rect","el1S1Opp","el1S2Opp","el1OppLength","el2S1Opp","el2S2Opp","el2OppLength","_isElInRowColumn","invertSwap","swapThreshold","invertedSwapThreshold","isLastTarget","targetLength","targetS1","invert","_getInsertDirection","_getSwapDirection","nextElementSibling","after","moveVector","setTimeout","scrollBy","Math","abs","insertion","_animate","dragoverBubble","dragElIndex","targetIndex","newIndex","newDraggableIndex","nativeDraggable","_offUpEvents","dropBubble","remove","save","type","his","destroy","isMobile","transforms","oriented","supportDraggable","Polymer","ie","firefox","apple","device","createElement","_prepareGroup","support","cssPointerEvents","toFn","value","pull","sameGroup","otherGroup","join","originalGroup","put","revertClone","Sortable","store","scroll","scrollSensitivity","scrollSpeed","bubbleScroll","mixin","animation","easing","textContent","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","devicePixelRatio","fallbackOnBody","fallbackClass","fallbackTolerance","fallbackOffset","fn","test","charAt","get","droppable","prevRect","ms","currentRect","nodeType","matrix","scaleX","a","scaleY","d","reflow","cloneHidden","show","onName","substr","item","pullMode","toArray","order","children","getAttribute","generateId","items","id","removeChild","set","option","Array","prototype","querySelectorAll","removeAttribute","splice","attach","utils","is","extend","throttle","debounce","nextTick","cancelNextTick","getChild","childNum","closesting","main"],"mappings":"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","file":"../skylark-sortable.js","sourcesContent":["define('skylark-langx-hoster/detects/browser',[\r\n    \"../hoster\"\r\n],function(hoster){\r\n\t//refer : https://github.com/gabceb/jquery-browser-plugin\r\n\r\n\tfunction detectBrowser() {\r\n\r\n\t\tfunction uaMatch( ua ) {\r\n\t\t\tua = ua.toLowerCase();\r\n\r\n\t\t\tvar match = /(edge)\\/([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opr)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(iemobile)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(msie) ([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar platform_match = /(ipad)/.exec( ua ) ||\r\n\t\t\t    /(ipod)/.exec( ua ) ||\r\n\t\t\t    /(windows phone)/.exec( ua ) ||\r\n\t\t\t    /(iphone)/.exec( ua ) ||\r\n\t\t\t    /(kindle)/.exec( ua ) ||\r\n\t\t\t    /(silk)/.exec( ua ) ||\r\n\t\t\t    /(android)/.exec( ua ) ||\r\n\t\t\t    /(win)/.exec( ua ) ||\r\n\t\t\t    /(mac)/.exec( ua ) ||\r\n\t\t\t    /(linux)/.exec( ua ) ||\r\n\t\t\t    /(cros)/.exec( ua ) ||\r\n\t\t\t    /(playbook)/.exec( ua ) ||\r\n\t\t\t    /(bb)/.exec( ua ) ||\r\n\t\t\t    /(blackberry)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar browser = {},\r\n\t\t\t    matched = {\r\n\t\t\t      browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || \"\",\r\n\t\t\t      version: match[ 2 ] || match[ 4 ] || \"0\",\r\n\t\t\t      versionNumber: match[ 4 ] || match[ 2 ] || \"0\",\r\n\t\t\t      platform: platform_match[ 0 ] || \"\"\r\n\t\t\t    };\r\n\r\n\t\t\tif ( matched.browser ) {\r\n\t\t\t\tbrowser[ matched.browser ] = true;\r\n\t\t\t  \tbrowser.version = matched.version;\r\n\t\t\t  \tbrowser.versionNumber = parseInt(matched.versionNumber, 10);\r\n\t\t\t}\r\n\r\n\t\t\tif ( matched.platform ) {\r\n\t\t\t \tbrowser[ matched.platform ] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered mobile platforms, meaning they run a mobile browser\r\n\t\t\tif ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\r\n\t\t\t\tbrowser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ \"windows phone\" ]) {\r\n\t\t\t\tbrowser.mobile = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered desktop platforms, meaning they run a desktop browser\r\n\t\t\tif ( browser.cros || browser.mac || browser.linux || browser.win ) {\r\n\t\t\t\tbrowser.desktop = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Chrome, Opera 15+ and Safari are webkit based browsers\r\n\t\t\tif ( browser.chrome || browser.opr || browser.safari ) {\r\n\t\t\t\tbrowser.webkit = true;\r\n\t\t\t}\r\n\r\n\t\t\t// IE11 has a new token so we will assign it msie to avoid breaking changes\r\n\t\t\tif ( browser.rv || browser.iemobile) {\r\n\t\t\t  var ie = \"ie\";\r\n\r\n\t\t\t  matched.browser = ie;\r\n\t\t\t  browser[ie] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Edge is officially known as Microsoft Edge, so rewrite the key to match\r\n\t\t\tif ( browser.edge ) {\r\n\t\t\t  delete browser.edge;\r\n\t\t\t  var msedge = \"edge\";\r\n\r\n\t\t\t  matched.browser = msedge;\r\n\t\t\t  browser[msedge] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Blackberry browsers are marked as Safari on BlackBerry\r\n\t\t\tif ( browser.safari && browser.blackberry ) {\r\n\t\t\t  var blackberry = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = blackberry;\r\n\t\t\t  browser[blackberry] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Playbook browsers are marked as Safari on Playbook\r\n\t\t\tif ( browser.safari && browser.playbook ) {\r\n\t\t\t  var playbook = \"playbook\";\r\n\r\n\t\t\t  matched.browser = playbook;\r\n\t\t\t  browser[playbook] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// BB10 is a newer OS version of BlackBerry\r\n\t\t\tif ( browser.bb ) {\r\n\t\t\t  var bb = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = bb;\r\n\t\t\t  browser[bb] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 15+ are identified as opr\r\n\t\t\tif ( browser.opr ) {\r\n\t\t\t  var opera = \"opera\";\r\n\r\n\t\t\t  matched.browser = opera;\r\n\t\t\t  browser[opera] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Stock Android browsers are marked as Safari on Android.\r\n\t\t\tif ( browser.safari && browser.android ) {\r\n\t\t\t  var android = \"android\";\r\n\r\n\t\t\t  matched.browser = android;\r\n\t\t\t  browser[android] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Kindle browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.kindle ) {\r\n\t\t\t  var kindle = \"kindle\";\r\n\r\n\t\t\t  matched.browser = kindle;\r\n\t\t\t  browser[kindle] = true;\r\n\t\t\t}\r\n\r\n\t\t\t // Kindle Silk browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.silk ) {\r\n\t\t\t  var silk = \"silk\";\r\n\r\n\t\t\t  matched.browser = silk;\r\n\t\t\t  browser[silk] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Assign the name and platform variable\r\n\t\t\tbrowser.name = matched.browser;\r\n\t\t\tbrowser.platform = matched.platform;\r\n\t\t\treturn browser;\r\n\t\t}\r\n\r\n\r\n\t    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t    if (isBrowser) {\r\n\t\t    return uaMatch( navigator.userAgent );\r\n\t    } else {\r\n\t    \treturn null;\r\n\t    }\r\n\t}\r\n\r\n\r\n\treturn hoster.detects.browser = detectBrowser;\r\n});\ndefine('skylark-langx-hoster/is-browser',[\r\n    \"./hoster\",\r\n    \"./detects/browser\"\r\n],function(hoster,detectBrowser){\r\n\tif (hoster.isBrowser == undefined) {\r\n\t\thoster.isBrowser = detectBrowser();\r\n\t}\r\n\r\n    return hoster.isBrowser;\r\n});\r\n\ndefine('skylark-domx-layouts/oriented',[\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-finder\",\n\t\"./Orientation\"\n],function(\n\tgeom,\n\tstyler,\n\tfinder,\n\tOrientation\n){\n\n\t/**\n\t * Detects children orientation.\n\t */\n\tfunction oriented(el, options) {\n\t\tvar elCSS = styler.css(el),\n\n\t\t\telWidth = geom.contentRect(el).width,\n\n\t\t\tchild1 = finder.childAt(el, 0, options),\n\t\t\tchild2 = finder.childAt(el, 1, options),\n\t\t\tfirstChildCSS = child1 && styler.css(child1),\n\t\t\tsecondChildCSS = child2 && styler.css(child2),\n\n\t\t\tfirstChildWidth = child1 && geom.marginSize(child1).width,\n\t\t\tsecondChildWidth = child2 && geom.marginSize(child2).width;\n\n\t\tif (elCSS.display === 'flex') {\n\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (elCSS.display === 'grid') {\n\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? Orientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\tOrientation.Vertical : Orientation.Horizontal;\n\t\t}\n\n\t\treturn (child1 &&\n\t\t\t(\n\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\telCSS.float === 'none' ||\n\t\t\t\tchild2 &&\n\t\t\t\telCSS.float === 'none' &&\n\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t) ?\n\t\t\tOrientation.Vertical : Orientation.Horizontal\n\t\t);\n\t}\n\n\treturn oriented;\n});\ndefine('skylark-sortable/dnd',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\"\n],function(\n\tskylark,\n\tlangx,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer\n){\n    'use strict';\n\n\n\tvar expando = 'Sortable' + (new Date).getTime();\n\n\n\tvar dnd = {\n\t\tlog : function log(category,message) {\n\t\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\n\t\t},\n\n\t\texpando,\n\n\t\tactiveGroup : null,\n\t\tactive : null,\n\t\tputSortable : null,\n\t\tsortables : [],\n\n\n\t\trootEl : null,\n\t\tdragEl : null,\n\t\tcloneEl : null,\n\t\tnextEl : null,\n\t\tparentEl : null,\n\n\t\toldIndex : null,\n\n\n\t\t///ignoreNextClick : false,\n        awaitingDragStarted : false,\n\t\t///touchEvt : null,\n\n        prepare: function(draggable,dragEl) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        \tthis.dragEl = dragEl;\n \n\n\t\t},\n\n        start: function(draggable, event) {\n        \tthis.dragging = draggable;\n        \tthis.active = draggable.sortable;\n\n        },\n\n        over : function(evt) {\n\t\t\t//this._handleAutoScroll(evt);\n        },\n\n        end: function(dropped) {\n\n\n        \tthis._nulling();\n \t\t},\n\n\t\tnearestEmptyInsertDetectEvent :function (evt) {\n\t\t\tif (dnd.dragEl) {\n\t\t\t\t///evt = evt.touches ? evt.touches[0] : evt;\n\t\t\t\tvar nearest = dnd._detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\t\tif (nearest) {\n\t\t\t\t\t// Create imitation event\n\t\t\t\t\tvar event = {};\n\t\t\t\t\tfor (var i in evt) {\n\t\t\t\t\t\tevent[i] = evt[i];\n\t\t\t\t\t}\n\t\t\t\t\tevent.target = event.rootEl = nearest;\n\t\t\t\t\tevent.preventDefault = void 0;\n\t\t\t\t\tevent.stopPropagation = void 0;\n\t\t\t\t\tnearest[expando]._onDragOver(event);\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable : function(x, y) {\n\t\t\tvar sortables = this.sortables;\n\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (finder.lastChild(sortables[i],{ignoreHidden : true,excluding : [this.ghostEl]})) continue;\n\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDraggable : function (el) {\n\t\t\tel.draggable = false;\n\t\t},\n\n\t\t_nulling: function() {\n\n\t\t\tdnd.dragEl = \n\t\t\tdnd.rootEl =\n\t\t\tdnd.parentEl =\n\t\t\t//ghoster.ghostEl =\n\t\t\tdnd.nextEl =\n\t\t\tdnd.cloneEl =\n\t\t\t///lastDownEl =\n\n\n\t\t\tdnd.tapEvt =\n\t\t\t///dnd.touchEvt =\n\n\t\t\tdnd.oldIndex =\n\n\t\t\tdnd.putSortable =\n\t\t\tdnd.activeGroup =\n\t\t\tdnd.active = null;\n\n\t\t}\n\n\n\t};\n\n\n\treturn dnd;\n\t\n});\ndefine('skylark-domx-plugins-dnd/draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-devices-points/touch\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, touch, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\",\r\n            forceFallback : false\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            touch.mousy(elm);\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle,self._elm);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source,self._elm);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n\r\n                    self.startPos = {\r\n                        x : e.clientX,\r\n                        y : e.clientY\r\n                    };\r\n\r\n                    manager.prepare(self,e);\r\n\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    ///if (self.dragSource) {\r\n                    ///    //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    ///    self.dragSource = null;\r\n                    ///    self.dragHandle = null;\r\n                    ///}\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-sortable/draggable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n    \"skylark-domx-plugins-dnd/draggable\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,DndDraggable,dnd){\r\n    var \r\n        lastDownEl,\r\n        scrolling,\r\n\r\n        savedInputChecked = [];\r\n\r\n    function _find(ctx, tagName, iterator) {\r\n        if (ctx) {\r\n            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n            if (iterator) {\r\n                for (; i < n; i++) {\r\n                    iterator(list[i], i);\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _saveInputCheckedState(root) {\r\n        savedInputChecked.length = 0;\r\n\r\n        var inputs = root.getElementsByTagName('input');\r\n        var idx = inputs.length;\r\n\r\n        while (idx--) {\r\n            var el = inputs[idx];\r\n            el.checked && savedInputChecked.push(el);\r\n        }\r\n    }\r\n\r\n\tclass Draggable {\r\n\t\tconstructor(sortable,options) {\r\n            this.sortable = sortable;\r\n            var el = this._elm = sortable.elm();\r\n            this.options = options;\r\n\r\n            var self = this;\r\n\r\n            this._dndDraggable = new DndDraggable(el,{\r\n                forceFallback : this.options.forceFallback,\r\n                source : this.options.draggable,\r\n                handle : this.options.handle,\r\n                preparing : function(e) {\r\n                    self._onPrepare(e);\r\n                },\r\n\r\n                started: function(e) {\r\n                    self._onDragStart(e.originalEvent);\r\n                },\r\n\r\n                ended : function(e) {\r\n                    self._onDragEnd(e.originalEvent);\r\n                }\r\n            });\r\n\t\t}\r\n\r\n\t\telm() {\r\n\t\t\treturn this._elm;\r\n\t\t}\r\n        // handle moudedown event\r\n        _onPrepare(evt) {\r\n            var sortable = this.sortable,\r\n                el = this._elm,\r\n                options = this.options,\r\n                preventOnFilter = options.preventOnFilter,\r\n                target = evt.dragSource,\r\n                filter = options.filter,\r\n                startIndex,\r\n                startDraggableIndex;\r\n\r\n            _saveInputCheckedState(el);\r\n\r\n\r\n            if (lastDownEl === target) {\r\n                evt.dragSource = null;\r\n                return;\r\n            }\r\n\r\n            dnd.log(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n            // Get the index of the dragged element within its parent\r\n            startIndex = _index(target);\r\n            startDraggableIndex = _index(target, options.draggable);\r\n\r\n            // Check filter\r\n            if (typeof filter === 'function') {\r\n                if (filter.call(this, evt, target, this)) {\r\n                    sortable._dispatchEvent(sortable, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                    if (preventOnFilter) {\r\n                        evt.preventDefault = true;\r\n                    }\r\n                    evt.dragSource = null;\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n            else if (filter) {\r\n                filter = filter.split(',').some(function (criteria) {\r\n                    criteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n                    if (criteria) {\r\n                        sortable._dispatchEvent(sortable, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n                        evt.dragSource = null;\r\n                        return; // cancel dnd\r\n                    }\r\n                });\r\n\r\n                if (filter) {\r\n                    if (preventOnFilter) {\r\n                        evt.preventDefault = true;\r\n                    }\r\n                    evt.dragSource = null;\r\n                    return; // cancel dnd\r\n                }\r\n            }\r\n\r\n            ///if (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n            ///    return;\r\n            ///}\r\n\r\n            // Prepare `dragstart`\r\n            var\r\n                ownerDocument = el.ownerDocument,\r\n                dragEl = dnd.dragEl,\r\n                rootEl,\r\n                parentEl = dnd.parentEl,\r\n                nextEl = dnd.nextEl,\r\n                oldIndex = dnd.oldIndex,\r\n                oldDraggableIndex = dnd.oldDraggableIndex,\r\n                tapEvt = dnd.tapEvt;\r\n\r\n            dnd.log(\"_prepareDragStart\",\"start\");\r\n            if (target && !dragEl && (target.parentNode === el)) {\r\n                rootEl = el;\r\n                dragEl = dnd.dragEl = target;\r\n                parentEl = dnd.parentEl= dragEl.parentNode;\r\n                nextEl = dnd.nextEl = dragEl.nextSibling;\r\n                lastDownEl = target;\r\n                dnd.activeGroup = this.options.group;\r\n                oldIndex = dnd.oldIndex = startIndex;\r\n                oldDraggableIndex = dnd.oldDraggableIndex =  startDraggableIndex;\r\n\r\n                tapEvt = dnd.tapEvt = {\r\n                    target: dragEl,\r\n                    clientX: evt.originalEvent.clientX,\r\n                    clientY: evt.originalEvent.clientY\r\n                };\r\n\r\n                this._lastX = evt.originalEvent.clientX;\r\n                this._lastY = evt.originalEvent.clientY;\r\n\r\n                dragEl.style['will-change'] = 'all';\r\n                // undo animation if needed\r\n                dragEl.style.transition = '';\r\n                dragEl.style.transform = '';\r\n\r\n                // Disable \"draggable\"\r\n                options.ignore.split(',').forEach(function (criteria) {\r\n                    _find(dragEl, criteria.trim(), dnd._disableDraggable);\r\n                });\r\n\r\n                // Bind the events: dragstart/dragend\r\n                ///sortable._triggerDragStart(evt, touch);\r\n\r\n                dnd.prepare(this,dnd.dragEl);\r\n\r\n                // Drag start event\r\n                sortable._dispatchEvent(sortable, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n                // Chosen item\r\n                styler.toggleClass(dragEl, options.chosenClass, true);\r\n            }\r\n        }\r\n\r\n\r\n        _onDragStart(/**Event*/evt, /**boolean*/fallback) {\r\n            dnd.log(\"_onDragStart\",\"start\");\r\n            var _this = this,\r\n                dragEl = dnd.dragEl,\r\n                rootEl = this._elm;\r\n\r\n            var dataTransfer = evt.dataTransfer;\r\n            var options = _this.options;\r\n\r\n            // Setup clone\r\n            var cloneEl = dnd.cloneEl = noder.clone(dragEl,true);\r\n\r\n            cloneEl.draggable = false;\r\n            cloneEl.style['will-change'] = '';\r\n\r\n            //this._hideClone();\r\n\r\n            styler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n            // #1143: IFrame support workaround\r\n            _this._cloneId = langx.defer(function () {\r\n                if (!_this.options.removeCloneOnHide) {\r\n                    rootEl.insertBefore(cloneEl, dragEl);\r\n                }\r\n                _this.sortable._dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n            });\r\n\r\n\r\n            if (!fallback){\r\n                styler.toggleClass(dragEl, options.dragClass, true);\r\n            } \r\n\r\n            // Set proper drop events\r\n            if (fallback) {\r\n                //dnd.ignoreNextClick = true;\r\n                //_this._loopId = setInterval(dnd._emulateDragOver.bind(dnd), 50);\r\n            } else {\r\n                // Undo what was set in _prepareDragStart before drag started\r\n                //eventer.off(document, 'mouseup', _this._onDrop); //TODO : lwf\r\n                ///eventer.off(document, 'touchend', _this._onDrop);\r\n                ///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = 'move';\r\n                    options.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n                }\r\n\r\n                ////eventer.on(document, 'drop', _this);\r\n\r\n                // #1276 fix:\r\n                styler.css(dragEl, 'transform', 'translateZ(0)');\r\n            }\r\n\r\n            dnd.awaitingDragStarted = true;\r\n\r\n\r\n\t        function _dragStarted(fallback, evt) {\r\n\t            dnd.awaitingDragStarted = false;\r\n\t            var dragEl = dnd.dragEl,\r\n\t                rootEl = this._elm,\r\n\t                oldIndex = dnd.oldIndex,\r\n\t                oldDraggableIndex = dnd.oldDraggableIndex;\r\n\r\n\t            if (rootEl && dragEl) {\r\n\t                //if (this.nativeDraggable) {\r\n\t                //    eventer.on(document, 'dragover', this._handleAutoScroll);\r\n\t                //    eventer.on(document, 'dragover', dnd._checkAlignment);\r\n\t                //}\r\n\t                dnd.start(this);\r\n\t                var options = this.options;\r\n\r\n\t                // Apply effect\r\n\t                !fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n\t                styler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n\t                // In case dragging an animated element\r\n\t                styler.css(dragEl, 'transform', '');\r\n\r\n\t                //dnd.active = this;\r\n\r\n\t                //fallback && this._appendGhost();\r\n\r\n\t                // Drag start event\r\n\t                this.sortable._dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n\t            } else {\r\n\t                this._nulling();\r\n\t            }\r\n\t        }\r\n\r\n            _this._dragStartId = langx.defer(_dragStarted.bind(_this, fallback, evt));\r\n            ///eventer.on(document, 'selectstart', _this);\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', 'none');\r\n            ///}\r\n        }\r\n\r\n        //\r\n        //\r\n\r\n        _onDragEnd(/**Event*/evt) {\r\n            var el = this._elm,\r\n                options = this.options,\r\n                dragEl = dnd.dragEl,\r\n                sortable = this.sortable,\r\n                putSortable = dnd.putSortable;\r\n\r\n            dnd.awaitingDragStarted = false;\r\n            scrolling = false;\r\n            //isCircumstantialInvert = false;\r\n            //pastFirstInvertThresh = false;\r\n\r\n            //clearInterval(this._loopId);\r\n\r\n            //clearInterval(pointerElemChangedInterval);\r\n\r\n            clearTimeout(this._dragStartTimer);\r\n\r\n\r\n            if (this._cloneId) {\r\n                this._cloneId.cancel();\r\n                this._cloneId = null;\r\n            }\r\n\r\n            if (this._dragStartId) {\r\n                this._dragStartId.cancel();\r\n                this._dragStartId = null;\r\n            }\r\n\r\n\r\n            // Unbind events\r\n            ///eventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\r\n            ///if (Safari) {\r\n            ///    styler.css(document.body, 'user-select', '');\r\n           /// }\r\n\r\n\r\n            lastDownEl = null;\r\n\r\n            savedInputChecked.forEach(function (el) {\r\n                el.checked = true;\r\n            });\r\n\r\n\r\n            savedInputChecked.length = 0;\r\n\r\n           \t//this.dragEl = null;\r\n\r\n            dnd.end();\r\n\r\n\r\n        }\r\n\r\n\t}\r\n\r\n\r\n\treturn Draggable;\r\n\r\n});\ndefine('skylark-domx-plugins-dnd/droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        originalEvent : e,\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        ///e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        originalEvent : e,\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-sortable/droppable',[\r\n\t\"skylark-langx\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-geom\",\r\n    \"skylark-domx-plugins-dnd/droppable\",\r\n\t\"./dnd\"\r\n],function(langx,finder,styler,eventer,noder,geom,DndDroppable,dnd){\r\n\r\n\tvar\tmoved,\r\n\t    pastFirstInvertThresh,\r\n\t    isCircumstantialInvert,\r\n   \t\t_silent = false;\r\n\r\n\r\n\t/**\r\n\t * Checks if a side of an element is scrolled past a side of it's parents\r\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\r\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\r\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\r\n\t */\r\n\tfunction _isScrolledPast(el, side) {\r\n\t\tvar parent = finder.scrollableParent(el, true),\r\n\t\t\telSide = geom.boundingRect(el)[side];\r\n\r\n\t\t/* jshint boss:true */\r\n\t\twhile (parent) {\r\n\t\t\tvar parentSide = geom.boundingRect(parent)[side],\r\n\t\t\t\tvisible;\r\n\r\n\t\t\tif (side === 'top' || side === 'left') {\r\n\t\t\t\tvisible = elSide >= parentSide;\r\n\t\t\t} else {\r\n\t\t\t\tvisible = elSide <= parentSide;\r\n\t\t\t}\r\n\r\n\t\t\tif (!visible) return parent;\r\n\r\n\t\t\tif (parent === noder.scrollingElement()) break;\r\n\r\n\t\t\tparent = finder.scrollableParent(parent, false);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n\t * @param  {HTMLElement} el       Parent element\r\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\r\n\t */\r\n\t function _lastChild(el) {\r\n\t\treturn finder.lastChild(el,{\r\n\t\t\tignoreHidden : true,\r\n\t\t\texcluding : []\r\n\t\t})\r\n\t}\r\n\r\n\t function _ghostIsLast(evt, axis, el) {\r\n\t\tvar elRect = geom.boundingRect(finder.lastChild(el,{ignoreHidden : true,excluding : []})),\r\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\r\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\r\n\t\t\tspacer = 10;\r\n\r\n\t\treturn (\r\n\t\t\taxis === 'vertical' ?\r\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\r\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _isClientInRowColumn(x, y, el, axis, options) {\r\n\t\tvar targetRect = geom.boundingRect(el),\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\r\n\r\n\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\r\n\t}\r\n\r\n\tfunction _isElInRowColumn(el1, el2, axis) {\r\n\t\t//var dragEl = dnd.active.dragEl;\r\n\r\n\t\tvar el1Rect = geom.boundingRect(el1),//el1 === dragEl && realDragElRect || geom.boundingRect(el1),\r\n\t\t\tel2Rect = geom.boundingRect(el2),//el2 === dragEl && realDragElRect || geom.boundingRect(el2),\r\n\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\r\n\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\r\n\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\r\n\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\r\n\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\r\n\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\r\n\r\n\t\treturn (\r\n\t\t\tel1S1Opp === el2S1Opp ||\r\n\t\t\tel1S2Opp === el2S2Opp ||\r\n\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\t\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\tclass Droppable {\r\n\t\tconstructor(sortable,options) {\r\n\t\t\tthis.sortable = sortable;\r\n\t\t\tvar el = this.el= this._elm = sortable.elm();\r\n\t\t\tthis.options = options;\r\n\r\n\r\n\t\t\tvar self = this;\r\n\r\n            this._dndDroppable = new DndDroppable(el,{\r\n\t            started: function(e) {\r\n\t                e.acceptable = true;\r\n\t                e.activeClass = \"active\";\r\n\t                e.hoverClass = \"over\";\r\n\t            },\r\n\r\n                overing : function(e) {\r\n\t\t\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t\t\tself._onDragOver(e.originalEvent);\r\n\t\t\t\t\t\t_globalDragOver(e.originalEvent);\r\n\t\t\t\t\t}\r\n                },\r\n\r\n\r\n                dropped : function(e) {\r\n                    self._onDrop(e.originalEvent);\r\n                }\r\n            });\r\n\r\n\r\n\r\n\t\t\t///if (sortable.nativeDraggable) {\r\n\t\t\t///\teventer.on(el, 'dragover', this);\r\n\t\t\t///\teventer.on(el, 'dragenter', this);\r\n\t\t        eventer.on(el, 'drop', this);\r\n\t\t\t///}\r\n\t        eventer.on(el, 'selectstart', this);\r\n\t\t}\r\n\r\n\r\n\t\t_onMove (fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\t\tvar evt,\r\n\t\t\t\tsortable = fromEl[dnd.expando],\r\n\t\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\t\tretVal;\r\n\r\n\t\t\tevt = eventer.create(\"move\",{\r\n\t\t\t\tto : toEl,\r\n\t\t\t\tfrom : fromEl,\r\n\t\t\t\tdragged : dragEl,\r\n\t\t\t\tdraggedRect: dragRect,\r\n\t\t\t\trelated : targetEl || toEl,\r\n\t\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\t\toriginalEvent : originalEvt\r\n\t\t\t});\r\n\r\n\t\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\t\tif (onMoveFn) {\r\n\t\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t\t}\r\n\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver(/**Event*/evt) {\r\n\t\t\tvar el = this._elm,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = dnd.active,\r\n\t\t\t\tisOwner = (dnd.activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\r\n\t\t\t\tlastMode, // 'swap' or 'insert'\r\n\t\t\t\tlastTarget,\r\n\t\t\t\tlastDirection,\r\n\t\t\t\ttargetMoveDistance;\r\n            //dnd.log(\"_onDragOver\",\"start\");\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(sortable);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== sortable && sortable !== dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable = sortable;\r\n\t\t\t\t\t} else if (sortable === dnd.active) {\r\n\t\t\t\t\t\tputSortable = dnd.putSortable =  null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && sortable._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && sortable._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t//sortable._handleAutoScroll(evt);\r\n\t\t\t\t\tdnd.over(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && dnd.nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\tsortable._dispatchEvent(sortable, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl), oldDraggableIndex, _index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = _index(dragEl),\r\n\t\t\t\t\ttargetIndex = _index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = dnd.activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = sortable._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tdnd.parentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = _lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tdnd.parentEl = el; // actualization\r\n\t\t\t\t\t\t///realDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\r\n\t\t\t\t\t///realDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = this._onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\tif (scrolledPastTop) {\r\n\t\t\t\t\t\t\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdnd.parentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t\ttargetMoveDistance =  Math.abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t_onDrop(/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tsortable = this.sortable,\r\n\t\t\t\trootEl = dnd.active.elm(),\r\n\t\t\t\tdragEl = dnd.dragEl,\r\n\t\t\t\tputSortable = dnd.putSortable,\r\n\t\t\t\tparentEl = dnd.parentEl,\r\n\t\t\t\toldIndex = dnd.oldIndex,\r\n\t\t\t\toldDraggableIndex = dnd.oldDraggableIndex,\r\n\t\t\t\tnextEl = dnd.nextEl,\r\n\t\t\t\tnewIndex,\r\n\t\t\t\tnewDraggableIndex;\r\n\r\n\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\r\n\r\n\t\t\tif (sortable.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//ghoster.remove();\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tnoder.remove(dnd.cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\r\n\t\t\t\t\tdnd._disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class'sd\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (dnd.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsortable._dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tsortable.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t}\r\n\r\n\t\t_offUpEvents () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t}\r\n\r\n\t\t_nulling() {\r\n\r\n\t\t\tmoved =\tnull;\r\n\r\n\t\t}\r\n\r\n\t\thandleEvent (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dnd.dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdestroy() {\r\n\t\t\tvar sortable = this.sortable;\r\n\r\n\t\t\t///if (sortable.nativeDraggable) {\r\n\t\t\t///\teventer.off(el, 'dragover', this);\r\n\t\t   ///\t\teventer.off(el, 'dragenter', this);\r\n\t\t\t///}\r\n\t\t\this._dndDroppable.destroy();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn Droppable;\r\n});\ndefine('skylark-sortable/Sortable',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-langx-hoster/is-browser\",\n\t\"skylark-langx-hoster/is-mobile\",\n\t\"skylark-domx-query\",\n\t\"skylark-domx-browser\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-geom\",\n\t\"skylark-domx-styler\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-transforms\",\n\t\"skylark-domx-layouts/oriented\",\n    \"skylark-domx-plugins-base\",\n\t\"skylark-devices-points/touch\",\n\t\"./dnd\",\n\t\"./draggable\",\n\t\"./droppable\"\n],function(\n\tskylark,\n\tlangx,\n\tisBrowser,\n\tisMobile,\n\t$,\n\tbrowser,\n\tnoder,\n\tfinder,\n\tgeom,\n\tstyler,\n\teventer,\n\ttransforms,\n\toriented,\n\tplugins,\n\ttouch,\n\tdnd,\n\tDraggable,\n\tDroppable\n){\n\n\t'use strict';\n\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\treturn finder.index(el,function(el){\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== dnd.cloneEl && (!selector || finder.matches(el, selector))) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\t\t\t\n\t\t})\n\t}\n\n\n\n\n\n\tvar \n\n\t\t///realDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\n\t\tEdge = isBrowser && isBrowser.edge,\n\t\tFireFox = isBrowser && isBrowser.firefox,\n\t\tSafari = isBrowser && isBrowser.safari,\n\n\t\tIOS = isMobile && isMobile.apple.device,\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\n\n\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents,\n\n\t\t_alignedSilent = false,\n\n\t\t//savedInputChecked = [],\n\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t};\n\n\n\tvar Sortable =  plugins.Plugin.inherit({\n        klassName: \"Sortable\",\n        \n        pluginName : \"intg.sortable\",\n\n\n\t\toptions : {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\t//draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function(evt, target, dragEl,ghostEl) {\n\t\t\t\treturn oriented(this.el, langx.mixin({\n\t\t\t\t\t\t\t\t\texcluding : [ghostEl,dragEl]\n\t\t\t\t\t\t\t\t},this.options));\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tdelayOnTouchOnly: false,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\n\n\t\t\tfallbackOnBody: true,  //fix\n\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\t//supportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\n\t\t\temptyInsertThreshold: 5\n\t\t},\n\n\n\t\t/**\n\t\t * @class  Sortable\n\t\t * @param  {HTMLElement}  el\n\t\t * @param  {Object}       [options]\n\t\t */\n\t\t_construct : function Sortable(el, options) {\n            this.overrided(el,options);\n\n\t\t\tthis.el = el; // root element\n\n\t\t\t// Export instance\n\t\t\tel[dnd.expando] = this;\n\n\t\t\toptions = this.options;\n\n\t\t\toptions.draggable = options.draggable || /[uo]l/i.test(el.nodeName) ? '>li' : '>*';\n\n\n\t\t\t_prepareGroup(options);\n\n\t\t\t// Bind all private methods\n\t\t\tfor (var fn in this) {\n\t\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Setup drag mode\n\t\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\n\t\t\t\tthis.options.touchStartThreshold = 1;\n\t\t\t}\n\n\n\n\t\t\tdnd.sortables.push(this.el);\n\n\t\t\t// Restore sorting\n\t\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\n\n\t\t\tthis.draggable = new Draggable(this,this.options);\n\n\t\t\tthis.droppable = new Droppable(this,this.options);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\tvar  dragEl = dnd.dragEl;\n\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl,null) : this.options.direction;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation,\n\t\t\t\tdragEl = dnd.dragEl;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = geom.boundingRect(target);\n\n\t\t\t\t////if (target === dragEl) {\n\t\t\t\t///\trealDragElRect = currentRect;\n\t\t\t\t///}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tnoder.reflow(target);\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\tstyler.css(target, 'transition', '');\n\t\t\t\t\tstyler.css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n        _hideClone: function() {\n        \treturn;\n            if (!dnd.cloneEl.cloneHidden) {\n                styler.hide(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = true;\n                if (dnd.cloneEl.parentNode && this.options.removeCloneOnHide) {\n                    noder.remove(dnd.cloneEl);\n                }\n            }\n        },\n\n        _showClone: function(putSortable) {\n            var rootEl = dnd.active.el,\n                nextEl = dnd.nextEl;\n\n            if (putSortable.lastPutMode !== 'clone') {\n                this._hideClone();\n                return;\n            }\n\n            if (dnd.cloneEl.cloneHidden) {\n                // show clone at dragEl or original position\n                if (rootEl.contains(dnd.dragEl) && !this.options.group.revertClone) {\n                    rootEl.insertBefore(dnd.cloneEl, dnd.dragEl);\n                } else if (nextEl) {\n                    rootEl.insertBefore(dnd.cloneEl, nextEl);\n                } else {\n                    rootEl.appendChild(dnd.cloneEl);\n                }\n\n                if (this.options.group.revertClone) {\n                    this._animate(dnd.dragEl, dnd.cloneEl);\n                }\n                styler.show(dnd.cloneEl);\n                dnd.cloneEl.cloneHidden = false;\n            }\n        },\n\n\t\t_dispatchEvent : function (\n\t\t\tsortable, \n\t\t\trootEl, \n\t\t\tname,\n\t\t\ttargetEl, \n\t\t\ttoEl, \n\t\t\tfromEl,\n\t\t\tstartIndex, \n\t\t\tnewIndex,\n\t\t\tstartDraggableIndex, \n\t\t\tnewDraggableIndex,\n\t\t\toriginalEvt\n\t\t) {\n\t\t\tsortable = (sortable || rootEl[dnd.expando]);\n\t\t\tvar evt,\n\t\t\t\toptions = sortable.options,\n\t\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1),\n\t\t\t\tputSortable = dnd.putSortable;\n\n\t\t\tevt = eventer.create(name,{\n\t\t\t\tto : toEl || rootEl,\n\t\t\t\tfrom : fromEl || rootEl,\n\t\t\t\titem : targetEl || rootEl,\n\t\t\t\tclone : dnd.cloneEl,\n\t\t\t\toldIndex : startIndex,\n\t\t\t\tnewIndex : newIndex,\n\t\t\t\toldDraggableIndex : startDraggableIndex,\n\t\t\t\tnewDraggableIndex : newDraggableIndex,\n\t\t\t\toriginalEvent : originalEvt,\n\t\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\n\t\t\t});\n\t\t\tif (rootEl) {\n\t\t\t\trootEl.dispatchEvent(evt);\n\t\t\t}\n\n\t\t\tif (options[onName]) {\n\t\t\t\toptions[onName].call(sortable, evt);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || noder.generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[dnd.expando] = null;\n\n\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tdnd.sortables.splice(dnd.sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t});\n\n\n\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.9.0';\n\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\n});\ndefine('skylark-sortable/main',[\n\t\"skylark-langx\",\n\t\"skylark-domx-eventer\",\n\t\"skylark-domx-finder\",\n\t\"skylark-domx-noder\",\n\t\"skylark-domx-styler\",\n\t\"./Sortable\"\n],function(\n\tlangx,\n\teventer,\n\tfinder,\n\tnoder,\n\tstyler,\n\tSortable\n){\n\t// Export utils\n\tSortable.utils = {\n\t\ton: eventer.on,\n\t\toff: eventer.off,\n\t\tcss: styler.css,\n\t\t///find: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!finder.closest(el, selector, el, false);\n\t\t},\n\t\textend: langx.mixin,\n\t\tthrottle: langx.debounce,\n\t\tclosest: finder.closest,\n\t\ttoggleClass: styler.toggleClass,\n\t\tclone: \tfunction (el) {\n\t\t\t\t\treturn noder.clone(el,true);\n\t\t\t\t},\n\t\t//index: containers._index,\n\t\tnextTick: \tfunction _nextTick(fn) {\n\t\t\t//return setTimeout(fn, 0);\n\t\t\treturn langx.defer(fn);\n\t\t},\n\t\tcancelNextTick: \tfunction _cancelNextTick(id) {\n\t\t\t//return clearTimeout(id);\n\t\t\treturn id && id.stop();\n\t\t},\n\t\t//detectDirection: _detectDirection,\n\t\tgetChild: function(el, childNum, options) {\n\t\t\toptions.excluding = [];\n\t\t\toptions.closesting = options.draggable;\n\t\t\treturn finder.childAt(el,childNum,options);\n\t\t}\n\t};\n\n\treturn Sortable;\n});\ndefine('skylark-sortable', ['skylark-sortable/main'], function (main) { return main; });\n\n"]}