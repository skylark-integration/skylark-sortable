{"version":3,"sources":["skylark-sortable.js"],"names":[],"mappingsfile":"../skylark-sortable.js","sourcesContent":["define('skylark-langx-hoster/detects/browser',[\r\n    \"../hoster\"\r\n],function(hoster){\r\n\t//refer : https://github.com/gabceb/jquery-browser-plugin\r\n\r\n\tfunction detectBrowser() {\r\n\r\n\t\tfunction uaMatch( ua ) {\r\n\t\t\tua = ua.toLowerCase();\r\n\r\n\t\t\tvar match = /(edge)\\/([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opr)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(iemobile)[\\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    /(msie) ([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec( ua ) ||\r\n\t\t\t    ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar platform_match = /(ipad)/.exec( ua ) ||\r\n\t\t\t    /(ipod)/.exec( ua ) ||\r\n\t\t\t    /(windows phone)/.exec( ua ) ||\r\n\t\t\t    /(iphone)/.exec( ua ) ||\r\n\t\t\t    /(kindle)/.exec( ua ) ||\r\n\t\t\t    /(silk)/.exec( ua ) ||\r\n\t\t\t    /(android)/.exec( ua ) ||\r\n\t\t\t    /(win)/.exec( ua ) ||\r\n\t\t\t    /(mac)/.exec( ua ) ||\r\n\t\t\t    /(linux)/.exec( ua ) ||\r\n\t\t\t    /(cros)/.exec( ua ) ||\r\n\t\t\t    /(playbook)/.exec( ua ) ||\r\n\t\t\t    /(bb)/.exec( ua ) ||\r\n\t\t\t    /(blackberry)/.exec( ua ) ||\r\n\t\t\t    [];\r\n\r\n\t\t\tvar browser = {},\r\n\t\t\t    matched = {\r\n\t\t\t      browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || \"\",\r\n\t\t\t      version: match[ 2 ] || match[ 4 ] || \"0\",\r\n\t\t\t      versionNumber: match[ 4 ] || match[ 2 ] || \"0\",\r\n\t\t\t      platform: platform_match[ 0 ] || \"\"\r\n\t\t\t    };\r\n\r\n\t\t\tif ( matched.browser ) {\r\n\t\t\t\tbrowser[ matched.browser ] = true;\r\n\t\t\t  \tbrowser.version = matched.version;\r\n\t\t\t  \tbrowser.versionNumber = parseInt(matched.versionNumber, 10);\r\n\t\t\t}\r\n\r\n\t\t\tif ( matched.platform ) {\r\n\t\t\t \tbrowser[ matched.platform ] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered mobile platforms, meaning they run a mobile browser\r\n\t\t\tif ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\r\n\t\t\t\tbrowser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ \"windows phone\" ]) {\r\n\t\t\t\tbrowser.mobile = true;\r\n\t\t\t}\r\n\r\n\t\t\t// These are all considered desktop platforms, meaning they run a desktop browser\r\n\t\t\tif ( browser.cros || browser.mac || browser.linux || browser.win ) {\r\n\t\t\t\tbrowser.desktop = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Chrome, Opera 15+ and Safari are webkit based browsers\r\n\t\t\tif ( browser.chrome || browser.opr || browser.safari ) {\r\n\t\t\t\tbrowser.webkit = true;\r\n\t\t\t}\r\n\r\n\t\t\t// IE11 has a new token so we will assign it msie to avoid breaking changes\r\n\t\t\tif ( browser.rv || browser.iemobile) {\r\n\t\t\t  var ie = \"ie\";\r\n\r\n\t\t\t  matched.browser = ie;\r\n\t\t\t  browser[ie] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Edge is officially known as Microsoft Edge, so rewrite the key to match\r\n\t\t\tif ( browser.edge ) {\r\n\t\t\t  delete browser.edge;\r\n\t\t\t  var msedge = \"edge\";\r\n\r\n\t\t\t  matched.browser = msedge;\r\n\t\t\t  browser[msedge] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Blackberry browsers are marked as Safari on BlackBerry\r\n\t\t\tif ( browser.safari && browser.blackberry ) {\r\n\t\t\t  var blackberry = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = blackberry;\r\n\t\t\t  browser[blackberry] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Playbook browsers are marked as Safari on Playbook\r\n\t\t\tif ( browser.safari && browser.playbook ) {\r\n\t\t\t  var playbook = \"playbook\";\r\n\r\n\t\t\t  matched.browser = playbook;\r\n\t\t\t  browser[playbook] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// BB10 is a newer OS version of BlackBerry\r\n\t\t\tif ( browser.bb ) {\r\n\t\t\t  var bb = \"blackberry\";\r\n\r\n\t\t\t  matched.browser = bb;\r\n\t\t\t  browser[bb] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 15+ are identified as opr\r\n\t\t\tif ( browser.opr ) {\r\n\t\t\t  var opera = \"opera\";\r\n\r\n\t\t\t  matched.browser = opera;\r\n\t\t\t  browser[opera] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Stock Android browsers are marked as Safari on Android.\r\n\t\t\tif ( browser.safari && browser.android ) {\r\n\t\t\t  var android = \"android\";\r\n\r\n\t\t\t  matched.browser = android;\r\n\t\t\t  browser[android] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Kindle browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.kindle ) {\r\n\t\t\t  var kindle = \"kindle\";\r\n\r\n\t\t\t  matched.browser = kindle;\r\n\t\t\t  browser[kindle] = true;\r\n\t\t\t}\r\n\r\n\t\t\t // Kindle Silk browsers are marked as Safari on Kindle\r\n\t\t\tif ( browser.safari && browser.silk ) {\r\n\t\t\t  var silk = \"silk\";\r\n\r\n\t\t\t  matched.browser = silk;\r\n\t\t\t  browser[silk] = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Assign the name and platform variable\r\n\t\t\tbrowser.name = matched.browser;\r\n\t\t\tbrowser.platform = matched.platform;\r\n\t\t\treturn browser;\r\n\t\t}\r\n\r\n\r\n\t    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t    if (isBrowser) {\r\n\t\t    return uaMatch( navigator.userAgent );\r\n\t    } else {\r\n\t    \treturn null;\r\n\t    }\r\n\t}\r\n\r\n\r\n\treturn hoster.detects.browser = detectBrowser;\r\n});\ndefine('skylark-langx-hoster/isBrowser',[\r\n    \"./hoster\",\r\n    \"./detects/browser\"\r\n],function(hoster,detectBrowser){\r\n\tif (hoster.isBrowser == undefined) {\r\n\t\thoster.isBrowser = detectBrowser();\r\n\t}\r\n\r\n    return hoster.isBrowser;\r\n});\r\n\ndefine('skylark-domx-layouts/oriented',[\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-finder\",\r\n\t\"./Orientation\"\r\n],function(\r\n\tgeom,\r\n\tstyler,\r\n\tfinder,\r\n\tOrientation\r\n){\r\n\r\n\t/**\r\n\t * Detects children orientation.\r\n\t */\r\n\tfunction oriented(el, options) {\r\n\t\tvar elCSS = styler.css(el),\r\n\r\n\t\t\telWidth = geom.contentRect(el).width,\r\n\r\n\t\t\tchild1 = finder.childAt(el, 0, options),\r\n\t\t\tchild2 = finder.childAt(el, 1, options),\r\n\t\t\tfirstChildCSS = child1 && styler.css(child1),\r\n\t\t\tsecondChildCSS = child2 && styler.css(child2),\r\n\r\n\t\t\tfirstChildWidth = child1 && geom.marginSize(child1).width,\r\n\t\t\tsecondChildWidth = child2 && geom.marginSize(child2).width;\r\n\r\n\t\tif (elCSS.display === 'flex') {\r\n\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\r\n\t\t\t? Orientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\tif (elCSS.display === 'grid') {\r\n\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? Orientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\tif (child1 && firstChildCSS.float !== 'none') {\r\n\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\r\n\r\n\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\r\n\t\t\t\tOrientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\treturn (child1 &&\r\n\t\t\t(\r\n\t\t\t\tfirstChildCSS.display === 'block' ||\r\n\t\t\t\tfirstChildCSS.display === 'flex' ||\r\n\t\t\t\tfirstChildCSS.display === 'table' ||\r\n\t\t\t\tfirstChildCSS.display === 'grid' ||\r\n\t\t\t\tfirstChildWidth >= elWidth &&\r\n\t\t\t\telCSS[CSSFloatProperty] === 'none' ||\r\n\t\t\t\tchild2 &&\r\n\t\t\t\telCSS[CSSFloatProperty] === 'none' &&\r\n\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\r\n\t\t\t) ?\r\n\t\t\tOrientation.Vertical : Orientation.Horizontal\r\n\t\t);\r\n\t}\r\n\r\n\treturn oriented;\r\n});\ndefine('skylark-sortable/autoscroll',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-hoster/isBrowser\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-scrolls/scrollingElement\"\r\n],function(\r\n\tlangx,\r\n\tisBrowser,\r\n\tgeom,\r\n\tstyler,\r\n\tscrollingElement\r\n){\r\n\tvar autoScrolls = [],\r\n\t\tscrolling = false;\r\n\r\n\tvar\r\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\r\n\t\tEdge = isBrowser && isBrowser.edge,\r\n\t\tFireFox = isBrowser && isBrowser.firefox,\r\n\t\tSafari = isBrowser && isBrowser.safari;\r\n\r\n\r\n\t/**\r\n\t * Checks if a side of an element is scrolled past a side of it's parents\r\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\r\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\r\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\r\n\t */\r\n\tfunction _isScrolledPast(el, side) {\r\n\t\tvar parent = _getParentAutoScrollElement(el, true),\r\n\t\t\telSide = geom.boundingRect(el)[side];\r\n\r\n\t\t/* jshint boss:true */\r\n\t\twhile (parent) {\r\n\t\t\tvar parentSide = geom.boundingRect(parent)[side],\r\n\t\t\t\tvisible;\r\n\r\n\t\t\tif (side === 'top' || side === 'left') {\r\n\t\t\t\tvisible = elSide >= parentSide;\r\n\t\t\t} else {\r\n\t\t\t\tvisible = elSide <= parentSide;\r\n\t\t\t}\r\n\r\n\t\t\tif (!visible) return parent;\r\n\r\n\t\t\tif (parent === scrollingElement()) break;\r\n\r\n\t\t\tparent = _getParentAutoScrollElement(parent, false);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\r\n\t * The value is returned in real pixels.\r\n\t * @param  {HTMLElement} el\r\n\t * @return {Array}             Offsets in the format of [left, top]\r\n\t */\r\n\tfunction _getRelativeScrollOffset(el) {\r\n\t\tvar offsetLeft = 0,\r\n\t\t\toffsetTop = 0,\r\n\t\t\twinScroller = scrollingElement();\r\n\r\n\t\tif (el) {\r\n\t\t\tdo {\r\n\t\t\t\tvar matrix = transforms.matrix(el),\r\n\t\t\t\t\tscaleX = matrix.a,\r\n\t\t\t\t\tscaleY = matrix.d;\r\n\r\n\t\t\t\toffsetLeft += el.scrollLeft * scaleX;\r\n\t\t\t\toffsetTop += el.scrollTop * scaleY;\r\n\t\t\t} while (el !== winScroller && (el = el.parentNode));\r\n\t\t}\r\n\r\n\t\treturn [offsetLeft, offsetTop];\r\n\t}\r\n\r\n\tvar _getParentAutoScrollElement = function(el, includeSelf) {\r\n\t\t// skip to window\r\n\t\tif (!el || !el.getBoundingClientRect) return scrollingElement();\r\n\r\n\t\tvar elem = el;\r\n\t\tvar gotSelf = false;\r\n\t\tdo {\r\n\t\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\r\n\t\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\r\n\t\t\t\tvar elemCSS = styler.css(elem);\r\n\t\t\t\tif (\r\n\t\t\t\t\telem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||\r\n\t\t\t\t\telem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (!elem || !elem.getBoundingClientRect || elem === document.body) return scrollingElement();\r\n\r\n\t\t\t\t\tif (gotSelf || includeSelf) return elem;\r\n\t\t\t\t\tgotSelf = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t/* jshint boss:true */\r\n\t\t} while (elem = elem.parentNode);\r\n\r\n\t\treturn scrollingElement();\r\n\t},\r\n\r\n\r\n\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback) {\r\n\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\r\n\t\tif (options.scroll) {\r\n\t\t\tvar _this = rootEl ? rootEl[expando] : window,\r\n\t\t\t\tsens = options.scrollSensitivity,\r\n\t\t\t\tspeed = options.scrollSpeed,\r\n\r\n\t\t\t\tx = evt.clientX,\r\n\t\t\t\ty = evt.clientY,\r\n\r\n\t\t\t\twinScroller = scrollingElement(),\r\n\r\n\t\t\t\tscrollThisInstance = false;\r\n\r\n\t\t\t// Detect scrollEl\r\n\t\t\tif (scrollParentEl !== rootEl) {\r\n\t\t\t\t_clearAutoScrolls();\r\n\r\n\t\t\t\tscrollEl = options.scroll;\r\n\t\t\t\tscrollCustomFn = options.scrollFn;\r\n\r\n\t\t\t\tif (scrollEl === true) {\r\n\t\t\t\t\tscrollEl = _getParentAutoScrollElement(rootEl, true);\r\n\t\t\t\t\tscrollParentEl = scrollEl;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar layersOut = 0;\r\n\t\t\tvar currentParent = scrollEl;\r\n\t\t\tdo {\r\n\t\t\t\tvar\tel = currentParent,\r\n\t\t\t\t\trect = geom.boundingRect(el),\r\n\r\n\t\t\t\t\ttop = rect.top,\r\n\t\t\t\t\tbottom = rect.bottom,\r\n\t\t\t\t\tleft = rect.left,\r\n\t\t\t\t\tright = rect.right,\r\n\r\n\t\t\t\t\twidth = rect.width,\r\n\t\t\t\t\theight = rect.height,\r\n\r\n\t\t\t\t\tscrollWidth,\r\n\t\t\t\t\tscrollHeight,\r\n\r\n\t\t\t\t\tcss,\r\n\r\n\t\t\t\t\tvx,\r\n\t\t\t\t\tvy,\r\n\r\n\t\t\t\t\tcanScrollX,\r\n\t\t\t\t\tcanScrollY,\r\n\r\n\t\t\t\t\tscrollPosX,\r\n\t\t\t\t\tscrollPosY;\r\n\r\n\r\n\t\t\t\tscrollWidth = el.scrollWidth;\r\n\t\t\t\tscrollHeight = el.scrollHeight;\r\n\r\n\t\t\t\tcss = styler.css(el);\r\n\r\n\t\t\t\tscrollPosX = el.scrollLeft;\r\n\t\t\t\tscrollPosY = el.scrollTop;\r\n\r\n\t\t\t\tif (el === winScroller) {\r\n\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');\r\n\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');\r\n\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvx = canScrollX && (abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (abs(left - x) <= sens && !!scrollPosX);\r\n\r\n\t\t\t\tvy = canScrollY && (abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (abs(top - y) <= sens && !!scrollPosY);\r\n\r\n\r\n\t\t\t\tif (!autoScrolls[layersOut]) {\r\n\t\t\t\t\tfor (var i = 0; i <= layersOut; i++) {\r\n\t\t\t\t\t\tif (!autoScrolls[i]) {\r\n\t\t\t\t\t\t\tautoScrolls[i] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\r\n\t\t\t\t\tautoScrolls[layersOut].el = el;\r\n\t\t\t\t\tautoScrolls[layersOut].vx = vx;\r\n\t\t\t\t\tautoScrolls[layersOut].vy = vy;\r\n\r\n\t\t\t\t\tclearInterval(autoScrolls[layersOut].pid);\r\n\r\n\t\t\t\t\tif (el && (vx != 0 || vy != 0)) {\r\n\t\t\t\t\t\tscrollThisInstance = true;\r\n\t\t\t\t\t\t/* jshint loopfunc:true */\r\n\t\t\t\t\t\tautoScrolls[layersOut].pid = setInterval((function () {\r\n\t\t\t\t\t\t\t// emulate drag over during autoscroll (fallback), emulating native DnD behaviour\r\n\t\t\t\t\t\t\tif (isFallback && this.layer === 0) {\r\n\t\t\t\t\t\t\t\tSortable.active._emulateDragOver(true);\r\n\t\t\t\t\t\t\t\tSortable.active._onTouchMove(touchEvt, true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\r\n\t\t\t\t\t\t\tvar scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\r\n\r\n\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\r\n\t\t\t\t\t\t\t\tif (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, touchEvt, autoScrolls[this.layer].el) !== 'continue') {\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeom.scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\r\n\t\t\t\t\t\t}).bind({layer: layersOut}), 24);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlayersOut++;\r\n\t\t\t} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = _getParentAutoScrollElement(currentParent, false)));\r\n\t\t\tscrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\r\n\t\t}\r\n\t}, 30),\r\n\r\n\t_clearAutoScrolls = function () {\r\n\t\tautoScrolls.forEach(function(autoScroll) {\r\n\t\t\tclearInterval(autoScroll.pid);\r\n\t\t});\r\n\t\tautoScrolls = [];\r\n\t},\r\n\r\n\t_handleAutoScroll = function(evt, options,fallback) {\r\n\t\tvar x = evt.clientX,\r\n\t\t\ty = evt.clientY,\r\n\r\n\t\t\telem = document.elementFromPoint(x, y);\r\n\r\n\t\t// IE does not seem to have native autoscroll,\r\n\t\t// Edge's autoscroll seems too conditional,\r\n\t\t// MACOS Safari does not have autoscroll,\r\n\t\t// Firefox and Chrome are good\r\n\t\tif (fallback || Edge || IE11OrLess || Safari) {\r\n\t\t\t_throttleTimeout = _autoScroll(evt, options, elem, fallback);\r\n\r\n\t\t\t// Listener for pointer element change\r\n\t\t\tvar ogElemScroller = _getParentAutoScrollElement(elem, true);\r\n\t\t\tif (\r\n\t\t\t\tscrolling &&\r\n\t\t\t\t(\r\n\t\t\t\t\t!pointerElemChangedInterval ||\r\n\t\t\t\t\tx !== lastPointerElemX ||\r\n\t\t\t\t\ty !== lastPointerElemY\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\r\n\t\t\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\r\n\t\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\r\n\t\t\t\tpointerElemChangedInterval = setInterval(function() {\r\n\t\t\t\t\tif (!dragEl) return;\r\n\t\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\r\n\t\t\t\t\tvar newElem = _getParentAutoScrollElement(document.elementFromPoint(x, y), true);\r\n\t\t\t\t\tif (newElem !== ogElemScroller) {\r\n\t\t\t\t\t\togElemScroller = newElem;\r\n\t\t\t\t\t\t_clearAutoScrolls();\r\n\t\t\t\t\t\t_throttleTimeout = _autoScroll(evt, options, ogElemScroller, fallback);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 10);\r\n\t\t\t\tlastPointerElemX = x;\r\n\t\t\t\tlastPointerElemY = y;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\r\n\t\t\tif (!options.bubbleScroll || _getParentAutoScrollElement(elem, true) === scrollingElement()) {\r\n\t\t\t\t_clearAutoScrolls();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t_throttleTimeout = _autoScroll(evt, options, _getParentAutoScrollElement(elem, false), false);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tvar _throttleTimeout;\r\n\tfunction _throttle(callback, ms) {\r\n\t\treturn langx.debounce(callback,ms);\r\n\t}\r\n\r\n\tfunction _cancelThrottle() {\r\n\t\t//clearTimeout(_throttleTimeout);\r\n\t\t//_throttleTimeout = void 0;\r\n\t\tif (_throttleTimeout && _throttleTimeout.stop) {\r\n\t\t\t_throttleTimeout.stop();\r\n\t\t\t_throttleTimeout = void 0;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\treturn {\r\n\t\tautoScrolls,\r\n\t\t\r\n\t\t_isScrolledPast,\r\n\t\t_getRelativeScrollOffset,\r\n\t\t_autoScroll,\r\n\r\n\t\t_clearAutoScrolls,\r\n\t\t_handleAutoScroll,\r\n\r\n\t\t_throttle,\r\n\t\t_cancelThrottle\r\n\t}\r\n});\ndefine('skylark-sortable/Sortable',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-hoster/isBrowser\",\r\n\t\"skylark-langx-hoster/isMobile\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-transforms\",\r\n\t\"skylark-domx-scrolls/scrollingElement\",\r\n\t\"skylark-domx-layouts/oriented\",\r\n\t\"skylark-devices-points/touch\",\r\n\t\"./autoscroll\"\r\n],function(\r\n\tskylark,\r\n\tlangx,\r\n\tisBrowser,\r\n\tisMobile,\r\n\t$,\r\n\tbrowser,\r\n\tnoder,\r\n\tfinder,\r\n\tgeom,\r\n\tstyler,\r\n\teventer,\r\n\ttransforms,\r\n\tscrollingElement,\r\n\toriented,\r\n\ttouch,\r\n\tautoscroll\r\n){\r\n\tfunction log(category,message) {\r\n\t\t$(\"#console\").append(\"<div>\"+category+\":\"+message+\"</div>\");\t\r\n\t}\t\r\n\r\n\r\n\tvar dragEl,\r\n\t\tparentEl,\r\n\t\tghostEl,\r\n\t\tcloneEl,\r\n\t\trootEl,\r\n\t\tnextEl,\r\n\t\tlastDownEl,\r\n\r\n\t\tscrollEl,\r\n\t\tscrollParentEl,\r\n\t\tscrollCustomFn,\r\n\r\n\t\toldIndex,\r\n\t\tnewIndex,\r\n\t\toldDraggableIndex,\r\n\t\tnewDraggableIndex,\r\n\r\n\t\tactiveGroup,\r\n\t\tputSortable,\r\n\r\n\t\tawaitingDragStarted = false,\r\n\t\tignoreNextClick = false,\r\n\t\tsortables = [],\r\n\r\n\t\tpointerElemChangedInterval,\r\n\t\tlastPointerElemX,\r\n\t\tlastPointerElemY,\r\n\r\n\t\ttapEvt,\r\n\t\ttouchEvt,\r\n\r\n\t\tmoved,\r\n\r\n\r\n\t\tlastTarget,\r\n\t\tlastDirection,\r\n\t\tpastFirstInvertThresh = false,\r\n\t\tisCircumstantialInvert = false,\r\n\t\tlastMode, // 'swap' or 'insert'\r\n\r\n\t\ttargetMoveDistance,\r\n\r\n\t\t// For positioning ghost absolutely\r\n\t\tghostRelativeParent,\r\n\t\tghostRelativeParentInitialScroll = [], // (left, top)\r\n\r\n\t\trealDragElRect, // dragEl rect after current animation\r\n\r\n\t\t/** @const */\r\n\t\tR_SPACE = /\\s+/g,\r\n\r\n\t\texpando = 'Sortable' + (new Date).getTime(),\r\n\r\n\t\twin = window,\r\n\t\tdocument = win.document,\r\n\t\tparseInt = win.parseInt,\r\n\t\tsetTimeout = win.setTimeout,\r\n\r\n\t\tPolymer = win.Polymer,\r\n\r\n\t\tcaptureMode = {\r\n\t\t\tcapture: false,\r\n\t\t\tpassive: false\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\r\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\r\n\t\tFireFox = !!navigator.userAgent.match(/firefox/i),\r\n\t\tSafari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),\r\n\r\n\t\tIOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),\r\n\t\t*/\r\n\t\tIE11OrLess = isBrowser && isBrowser.ie,\r\n\t\tEdge = isBrowser && isBrowser.edge,\r\n\t\tFireFox = isBrowser && isBrowser.firefox,\r\n\t\tSafari = isBrowser && isBrowser.safari,\r\n\r\n\t\tIOS = isMobile && isMobile.apple.device,\r\n\t\tPositionGhostAbsolutely = isMobile.apple.device, //IOS\r\n\r\n\t\tCSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\r\n\r\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\r\n\t\tsupportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device,\r\n\r\n\t\t/*\r\n\t\tsupportCssPointerEvents = (function() {\r\n\t\t\t// false when <= IE11\r\n\t\t\tif (IE11OrLess) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar el = document.createElement('x');\r\n\t\t\tel.style.cssText = 'pointer-events:auto';\r\n\t\t\treturn el.style.pointerEvents === 'auto';\r\n\t\t})(),\r\n\t\t*/\r\n\t\tsupportCssPointerEvents = browser.support.cssPointerEvents;\r\n\r\n\t\t_silent = false,\r\n\t\t_alignedSilent = false,\r\n\r\n\t\tabs = Math.abs,\r\n\t\tmin = Math.min,\r\n\t\tmax = Math.max,\r\n\r\n\t\tsavedInputChecked = [],\r\n\r\n\t\t/**\r\n\t\t * Detects children direction.\r\n\t\t */\r\n\t\t_detectDirection = function(el, options) {\r\n\t\t\toptions.excluding = [ghostEl,dragEl];\r\n\t\t\treturn oriented(el,options);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\r\n\t\t * @param  {Number} x      X position\r\n\t\t * @param  {Number} y      Y position\r\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\r\n\t\t */\r\n\t\t_detectNearestEmptySortable = function(x, y) {\r\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\r\n\t\t\t\tif (_lastChild(sortables[i])) continue;\r\n\r\n\t\t\t\tvar rect = geom.boundingRect(sortables[i]),\r\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\r\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\r\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\r\n\r\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\r\n\t\t\t\t\treturn sortables[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_isClientInRowColumn = function(x, y, el, axis, options) {\r\n\t\t\tvar targetRect = geom.boundingRect(el),\r\n\t\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\r\n\t\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\r\n\t\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\r\n\r\n\t\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\r\n\t\t},\r\n\r\n\t\t_isElInRowColumn = function(el1, el2, axis) {\r\n\t\t\tvar el1Rect = el1 === dragEl && realDragElRect || geom.boundingRect(el1),\r\n\t\t\t\tel2Rect = el2 === dragEl && realDragElRect || geom.boundingRect(el2),\r\n\t\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\r\n\t\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\r\n\t\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\r\n\t\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\r\n\t\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\r\n\t\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\r\n\r\n\t\t\treturn (\r\n\t\t\t\tel1S1Opp === el2S1Opp ||\r\n\t\t\t\tel1S2Opp === el2S2Opp ||\r\n\t\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\r\n\t\t\t);\r\n\t\t},\r\n\r\n\r\n\t\t_prepareGroup = function (options) {\r\n\t\t\tfunction toFn(value, pull) {\r\n\t\t\t\treturn function(to, from, dragEl, evt) {\r\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\r\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\r\n\r\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\r\n\t\t\t\t\t\t// Default pull value\r\n\t\t\t\t\t\t// Default pull and put value if same group\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else if (value == null || value === false) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t} else if (pull && value === 'clone') {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t} else if (typeof value === 'function') {\r\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\r\n\r\n\t\t\t\t\t\treturn (value === true ||\r\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\r\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar group = {};\r\n\t\t\tvar originalGroup = options.group;\r\n\r\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\r\n\t\t\t\toriginalGroup = {name: originalGroup};\r\n\t\t\t}\r\n\r\n\t\t\tgroup.name = originalGroup.name;\r\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\r\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\r\n\t\t\tgroup.revertClone = originalGroup.revertClone;\r\n\r\n\t\t\toptions.group = group;\r\n\t\t},\r\n\r\n\t\t_checkAlignment = function(evt) {\r\n\t\t\tif (!dragEl || !dragEl.parentNode) return;\r\n\t\t\tdragEl.parentNode[expando] && dragEl.parentNode[expando]._computeIsAligned(evt);\r\n\t\t},\r\n\r\n\t\t_hideGhostForTarget = function() {\r\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t\t\tstyler.css(ghostEl, 'display', 'none');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_unhideGhostForTarget = function() {\r\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\r\n\t\t\t\tstyler.css(ghostEl, 'display', '');\r\n\t\t\t}\r\n\t\t};\r\n\r\n\r\n\r\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\r\n\tdocument.addEventListener('click', function(evt) {\r\n\t\tif (ignoreNextClick) {\r\n\t\t\tevt.preventDefault();\r\n\t\t\tevt.stopPropagation && evt.stopPropagation();\r\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\r\n\t\t\tignoreNextClick = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}, true);\r\n\r\n\tvar nearestEmptyInsertDetectEvent = function(evt) {\r\n\t\tif (dragEl) {\r\n\t\t\tevt = evt.touches ? evt.touches[0] : evt;\r\n\t\t\tvar nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\r\n\r\n\t\t\tif (nearest) {\r\n\t\t\t\t// Create imitation event\r\n\t\t\t\tvar event = {};\r\n\t\t\t\tfor (var i in evt) {\r\n\t\t\t\t\tevent[i] = evt[i];\r\n\t\t\t\t}\r\n\t\t\t\tevent.target = event.rootEl = nearest;\r\n\t\t\t\tevent.preventDefault = void 0;\r\n\t\t\t\tevent.stopPropagation = void 0;\r\n\t\t\t\tnearest[expando]._onDragOver(event);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tfunction _find(ctx, tagName, iterator) {\r\n\t\tif (ctx) {\r\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n\r\n\t\t\tif (iterator) {\r\n\t\t\t\tfor (; i < n; i++) {\r\n\t\t\t\t\titerator(list[i], i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n\t * @param  {HTMLElement} el       Parent element\r\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\r\n\t */\r\n\tfunction _lastChild(el) {\r\n\t\t/*\r\n\t\tvar last = el.lastElementChild;\r\n\r\n\t\twhile (last && (last === ghostEl || styler.css(last, 'display') === 'none')) {\r\n\t\t\tlast = last.previousElementSibling;\r\n\t\t}\r\n\r\n\t\treturn last || null;\r\n\t\t*/\r\n\t\treturn finder.lastChild(el,{\r\n\t\t\tignoreHidden : true,\r\n\t\t\texcluding : [ghostEl]\r\n\t\t})\r\n\t}\r\n\r\n\tfunction _ghostIsLast(evt, axis, el) {\r\n\t\tvar elRect = geom.boundingRect(_lastChild(el)),\r\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\r\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\r\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\r\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\r\n\t\t\tspacer = 10;\r\n\r\n\t\treturn (\r\n\t\t\taxis === 'vertical' ?\r\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\r\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Generate id\r\n\t * @param   {HTMLElement} el\r\n\t * @returns {String}\r\n\t * @private\r\n\t */\r\n\tfunction _generateId(el) {\r\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\r\n\t\t\ti = str.length,\r\n\t\t\tsum = 0;\r\n\r\n\t\twhile (i--) {\r\n\t\t\tsum += str.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn sum.toString(36);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of an element within its parent for a selected set of\r\n\t * elements\r\n\t * @param  {HTMLElement} el\r\n\t * @param  {selector} selector\r\n\t * @return {number}\r\n\t */\r\n\tfunction _index(el, selector) {\r\n\t\treturn finder.index(el,function(el){\r\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== cloneEl && (!selector || finder.matches(el, selector))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tfunction _saveInputCheckedState(root) {\r\n\t\tsavedInputChecked.length = 0;\r\n\r\n\t\tvar inputs = root.getElementsByTagName('input');\r\n\t\tvar idx = inputs.length;\r\n\r\n\t\twhile (idx--) {\r\n\t\t\tvar el = inputs[idx];\r\n\t\t\tel.checked && savedInputChecked.push(el);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _nextTick(fn) {\r\n\t\t//return setTimeout(fn, 0);\r\n\t\treturn langx.defer(fn);\r\n\t}\r\n\r\n\tfunction _cancelNextTick(id) {\r\n\t\t//return clearTimeout(id);\r\n\t\treturn id && id.stop();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the \"bounding client rect\" of given element\r\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\r\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\r\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\r\n\t * @return {Object}                        The boundingClientRect of el\r\n\t */\r\n\tfunction _getRect(el, adjustForTransform, container, adjustForFixed) {\r\n\t\tif (!el.getBoundingClientRect && el !== win) return;\r\n\t\tvar {\r\n\t\t\ttop,\r\n\t\t\tleft,\r\n\t\t\tbottom,\r\n\t\t\tright,\r\n\t\t\twidth,\r\n\t\t\theight\r\n\t\t} = geom.boundingRect(el);\r\n\t\t\r\n\t\tif (adjustForTransform && el !== win) {\r\n\t\t\t// Adjust for scale()\r\n\t\t\tvar matrix = transforms.matrix(container || el),\r\n\t\t\t\tscaleX = matrix && matrix.a,\r\n\t\t\t\tscaleY = matrix && matrix.d;\r\n\r\n\t\t\tif (matrix) {\r\n\t\t\t\ttop /= scaleY;\r\n\t\t\t\tleft /= scaleX;\r\n\r\n\t\t\t\twidth /= scaleX;\r\n\t\t\t\theight /= scaleY;\r\n\r\n\t\t\t\tbottom = top + height;\r\n\t\t\t\tright = left + width;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttop: top,\r\n\t\t\tleft: left,\r\n\t\t\tbottom: bottom,\r\n\t\t\tright: right,\r\n\t\t\twidth: width,\r\n\t\t\theight: height\r\n\t\t};\r\n\t}\r\n\r\n\r\n\r\n\t// Fixed #973:\r\n\teventer.on(document, 'touchmove', function(evt) {\r\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\r\n\t\t\tevt.preventDefault();\r\n\t\t}\r\n\t});\r\n\r\n\r\n\t/**\r\n\t * @class  Sortable\r\n\t * @param  {HTMLElement}  el\r\n\t * @param  {Object}       [options]\r\n\t */\r\n\tfunction Sortable(el, options) {\r\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\r\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, not ' + {}.toString.call(el);\r\n\t\t}\r\n\r\n\t\tthis.el = el; // root element\r\n\t\tthis.options = options = langx.mixin({}, options);\r\n\r\n\r\n\t\t// Export instance\r\n\t\tel[expando] = this;\r\n\r\n\t\t// Default options\r\n\t\tvar defaults = {\r\n\t\t\tgroup: null,\r\n\t\t\tsort: true,\r\n\t\t\tdisabled: false,\r\n\t\t\tstore: null,\r\n\t\t\thandle: null,\r\n\t\t\tscroll: true,\r\n\t\t\tscrollSensitivity: 30,\r\n\t\t\tscrollSpeed: 10,\r\n\t\t\tbubbleScroll: true,\r\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\r\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\r\n\t\t\tinvertSwap: false, // invert always\r\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\r\n\t\t\tremoveCloneOnHide: true,\r\n\t\t\tdirection: function() {\r\n\t\t\t\treturn _detectDirection(el, this.options);\r\n\t\t\t},\r\n\t\t\tghostClass: 'sortable-ghost',\r\n\t\t\tchosenClass: 'sortable-chosen',\r\n\t\t\tdragClass: 'sortable-drag',\r\n\t\t\tignore: 'a, img',\r\n\t\t\tfilter: null,\r\n\t\t\tpreventOnFilter: true,\r\n\t\t\tanimation: 0,\r\n\t\t\teasing: null,\r\n\t\t\tsetData: function (dataTransfer, dragEl) {\r\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\r\n\t\t\t},\r\n\t\t\tdropBubble: false,\r\n\t\t\tdragoverBubble: false,\r\n\t\t\tdataIdAttr: 'data-id',\r\n\t\t\tdelay: 0,\r\n\t\t\tdelayOnTouchOnly: false,\r\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\r\n\t\t\tforceFallback: false,\r\n\t\t\tfallbackClass: 'sortable-fallback',\r\n\t\t\tfallbackOnBody: false,\r\n\t\t\tfallbackTolerance: 0,\r\n\t\t\tfallbackOffset: {x: 0, y: 0},\r\n\t\t\tsupportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\r\n\t\t\temptyInsertThreshold: 5\r\n\t\t};\r\n\r\n\r\n\t\t// Set default options\r\n\t\tfor (var name in defaults) {\r\n\t\t\t!(name in options) && (options[name] = defaults[name]);\r\n\t\t}\r\n\r\n\t\t_prepareGroup(options);\r\n\r\n\t\t// Bind all private methods\r\n\t\tfor (var fn in this) {\r\n\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\r\n\t\t\t\tthis[fn] = this[fn].bind(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Setup drag mode\r\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\r\n\r\n\t\tif (this.nativeDraggable) {\r\n\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\r\n\t\t\tthis.options.touchStartThreshold = 1;\r\n\t\t}\r\n\r\n\t\t// Bind events\r\n\t\ttouch.mousy(el);\r\n\r\n\t\teventer.on(el, 'mousedown', this._onTapStart);\r\n\r\n\t\tif (this.nativeDraggable) {\r\n\t\t\teventer.on(el, 'dragover', this);\r\n\t\t\teventer.on(el, 'dragenter', this);\r\n\t\t}\r\n\r\n\t\tsortables.push(this.el);\r\n\r\n\t\t// Restore sorting\r\n\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\r\n\t}\r\n\r\n\tSortable.prototype = /** @lends Sortable.prototype */ {\r\n\t\tconstructor: Sortable,\r\n\r\n\t\t_computeIsAligned: function(evt) {\r\n\t\t\tvar target;\r\n\r\n\t\t\tif (ghostEl && !supportCssPointerEvents) {\r\n\t\t\t\t_hideGhostForTarget();\r\n\t\t\t\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\r\n\t\t\t\t_unhideGhostForTarget();\r\n\t\t\t} else {\r\n\t\t\t\ttarget = evt.target;\r\n\t\t\t}\r\n\r\n\t\t\ttarget = finder.closest(target, this.options.draggable, this.el, false);\r\n\t\t\tif (_alignedSilent) return;\r\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\r\n\r\n\t\t\tvar children = this.el.children;\r\n\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\r\n\t\t\t\tif (finder.closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\r\n\t\t\t\t\tchildren[i].sortableMouseAligned = _isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\r\n\t\t\tif (!finder.closest(target, this.options.draggable, this.el, true)) {\r\n\t\t\t\tlastTarget = null;\r\n\t\t\t}\r\n\r\n\t\t\t_alignedSilent = true;\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\t_alignedSilent = false;\r\n\t\t\t}, 30);\r\n\r\n\t\t},\r\n\r\n\t\t_getDirection: function(evt, target) {\r\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\r\n\t\t},\r\n\r\n\r\n\t\t// handle moudedown event\r\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\r\n\t\t\t//if (!evt.cancelable) return;\r\n\t\t\tvar _this = this,\r\n\t\t\t\tel = this.el,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tpreventOnFilter = options.preventOnFilter,\r\n\t\t\t\ttype = evt.type,\r\n\t\t\t\ttouch = evt.touches && evt.touches[0],\r\n\t\t\t\ttarget = (touch || evt).target,\r\n\t\t\t\toriginalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\r\n\t\t\t\tfilter = options.filter,\r\n\t\t\t\tstartIndex,\r\n\t\t\t\tstartDraggableIndex;\r\n\r\n\t\t\t_saveInputCheckedState(el);\r\n\r\n\t\t\t// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\r\n\t\t\tif (dragEl) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\r\n\t\t\t\treturn; // only left button and enabled\r\n\t\t\t}\r\n\r\n\t\t\t// cancel dnd if original target is content editable\r\n\t\t\tif (originalTarget.isContentEditable) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, false);\r\n\r\n\r\n\t\t\tif (lastDownEl === target) {\r\n\t\t\t\t// Ignoring duplicate `down`\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlog(\"_onTapStart\",target.tagName+\",\"+target.className);\r\n\r\n\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\tstartIndex = _index(target);\r\n\t\t\tstartDraggableIndex = _index(target, options.draggable);\r\n\r\n\t\t\t// Check filter\r\n\t\t\tif (typeof filter === 'function') {\r\n\t\t\t\tif (filter.call(this, evt, target, this)) {\r\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\r\n\t\t\t\t\treturn; // cancel dnd\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (filter) {\r\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\r\n\t\t\t\t\tcriteria = finder.closest(originalTarget, criteria.trim(), el, false);\r\n\r\n\t\t\t\t\tif (criteria) {\r\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (filter) {\r\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\r\n\t\t\t\t\treturn; // cancel dnd\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (options.handle && !finder.closest(originalTarget, options.handle, el, false)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Prepare `dragstart`\r\n\t\t\tthis._prepareDragStart(evt, touch, target, startIndex, startDraggableIndex);\r\n\t\t},\r\n\r\n\r\n\t\t_handleAutoScroll: function(evt, fallback) {\r\n\r\n\t\t\tif (!dragEl || !this.options.scroll) return;\r\n\r\n\t\t\treturn autoscroll._handleAutoScroll(evt,this.options,fallback);\r\n\t\t},\r\n\r\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex, /** Number */startDraggableIndex) {\r\n\t\t\tvar _this = this,\r\n\t\t\t\tel = _this.el,\r\n\t\t\t\toptions = _this.options,\r\n\t\t\t\townerDocument = el.ownerDocument,\r\n\t\t\t\tdragStartFn;\r\n\t\t\tlog(\"_prepareDragStart\",\"start\");\r\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\r\n\t\t\t\trootEl = el;\r\n\t\t\t\tdragEl = target;\r\n\t\t\t\tparentEl = dragEl.parentNode;\r\n\t\t\t\tnextEl = dragEl.nextSibling;\r\n\t\t\t\tlastDownEl = target;\r\n\t\t\t\tactiveGroup = options.group;\r\n\t\t\t\toldIndex = startIndex;\r\n\t\t\t\toldDraggableIndex = startDraggableIndex;\r\n\r\n\t\t\t\ttapEvt = {\r\n\t\t\t\t\ttarget: dragEl,\r\n\t\t\t\t\tclientX: (touch || evt).clientX,\r\n\t\t\t\t\tclientY: (touch || evt).clientY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis._lastX = (touch || evt).clientX;\r\n\t\t\t\tthis._lastY = (touch || evt).clientY;\r\n\r\n\t\t\t\tdragEl.style['will-change'] = 'all';\r\n\t\t\t\t// undo animation if needed\r\n\t\t\t\tdragEl.style.transition = '';\r\n\t\t\t\tdragEl.style.transform = '';\r\n\r\n\t\t\t\tdragStartFn = function () {\r\n\t\t\t\t\t// Delayed drag has been triggered\r\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\r\n\t\t\t\t\t_this._disableDelayedDragEvents();\r\n\r\n\t\t\t\t\tif (!FireFox && _this.nativeDraggable) {\r\n\t\t\t\t\t\tdragEl.draggable = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Bind the events: dragstart/dragend\r\n\t\t\t\t\t_this._triggerDragStart(evt, touch);\r\n\r\n\t\t\t\t\t// Drag start event\r\n\t\t\t\t\t_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\r\n\r\n\t\t\t\t\t// Chosen item\r\n\t\t\t\t\tstyler.toggleClass(dragEl, options.chosenClass, true);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Disable \"draggable\"\r\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\r\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\r\n\t\t\t\t});\r\n\r\n\t\t\t\teventer.on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\r\n\t\t\t\teventer.on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\r\n\t\t\t\t///eventer.on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\r\n\r\n\t\t\t\teventer.on(ownerDocument, 'mouseup', _this._onDrop);\r\n\t\t\t\t///eventer.on(ownerDocument, 'touchend', _this._onDrop);\r\n\t\t\t\t///eventer.on(ownerDocument, 'touchcancel', _this._onDrop);\r\n\r\n\t\t\t\t// Make dragEl draggable (must be before delay for FireFox)\r\n\t\t\t\tif (FireFox && this.nativeDraggable) {\r\n\t\t\t\t\tthis.options.touchStartThreshold = 4;\r\n\t\t\t\t\tdragEl.draggable = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Delay is impossible for native DnD in Edge or IE\r\n\t\t\t\tif (options.delay && (options.delayOnTouchOnly ? touch : true) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\r\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\r\n\t\t\t\t\t// before the delay has been reached:\r\n\t\t\t\t\t// disable the delayed drag\r\n\t\t\t\t\teventer.on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\r\n\t\t\t\t\t//eventer.on(ownerDocument, 'touchend', _this._disableDelayedDrag);\r\n\t\t\t\t\t//eventer.on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\r\n\t\t\t\t\teventer.on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\r\n\t\t\t\t\t//eventer.on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\r\n\t\t\t\t\t//options.supportPointer && eventer.on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\r\n\r\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdragStartFn();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {\r\n\t\t\tvar touch = e.touches ? e.touches[0] : e;\r\n\t\t\tif (max(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY))\r\n\t\t\t\t\t>= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))\r\n\t\t\t) {\r\n\t\t\t\tthis._disableDelayedDrag();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_disableDelayedDrag: function () {\r\n\t\t\tdragEl && _disableDraggable(dragEl);\r\n\t\t\tclearTimeout(this._dragStartTimer);\r\n\r\n\t\t\tthis._disableDelayedDragEvents();\r\n\t\t},\r\n\r\n\t\t_disableDelayedDragEvents: function () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._disableDelayedDrag);\r\n\t\t\teventer.off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\r\n\t\t},\r\n\r\n\t\t//native dnd mode : register _OnDragStart for dragstart event handler \r\n\t\t//moused dnd mode : register  _onTouchMove for mousemove event hander, _onTouchMove calls _OnDragStart\r\n\t\t_triggerDragStart: function (/** Event */evt, /** Touch */touch) {\r\n\t\t\tlog(\"_triggerDragStart\",\"start\");\r\n\t\t\tlog(\"_triggerDragStart\",\"nativeDraggable is \" +  this.nativeDraggable);\r\n\t\t\tif (!this.nativeDraggable) {\r\n\t\t\t\teventer.on(document, 'mousemove', this._onTouchMove);\r\n\t\t\t} else {\r\n\t\t\t\teventer.on(dragEl, 'dragend', this);\r\n\t\t\t\teventer.on(rootEl, 'dragstart', this._onDragStart);\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (document.selection) {\r\n\t\t\t\t\t// Timeout neccessary for IE9\r\n\t\t\t\t\t_nextTick(function () {\r\n\t\t\t\t\t\tdocument.selection.empty();\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\twindow.getSelection().removeAllRanges();\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t//\r\n\t\t//\r\n\t\t_dragStarted: function (fallback, evt) {\r\n\t\t\tawaitingDragStarted = false;\r\n\t\t\tif (rootEl && dragEl) {\r\n\t\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\t\teventer.on(document, 'dragover', this._handleAutoScroll);\r\n\t\t\t\t\teventer.on(document, 'dragover', _checkAlignment);\r\n\t\t\t\t}\r\n\t\t\t\tvar options = this.options;\r\n\r\n\t\t\t\t// Apply effect\r\n\t\t\t\t!fallback && styler.toggleClass(dragEl, options.dragClass, false);\r\n\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\r\n\t\t\t\t// In case dragging an animated element\r\n\t\t\t\tstyler.css(dragEl, 'transform', '');\r\n\r\n\t\t\t\tSortable.active = this;\r\n\r\n\t\t\t\tfallback && this._appendGhost();\r\n\r\n\t\t\t\t// Drag start event\r\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\r\n\t\t\t} else {\r\n\t\t\t\tthis._nulling();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_emulateDragOver: function (forAutoScroll) {\r\n\t\t\tif (touchEvt) {\r\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._lastX = touchEvt.clientX;\r\n\t\t\t\tthis._lastY = touchEvt.clientY;\r\n\r\n\t\t\t\t_hideGhostForTarget();\r\n\r\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\r\n\t\t\t\tvar parent = target;\r\n\r\n\t\t\t\twhile (target && target.shadowRoot) {\r\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\r\n\t\t\t\t\tif (target === parent) break;\r\n\t\t\t\t\tparent = target;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (parent[expando]) {\r\n\t\t\t\t\t\t\tvar inserted;\r\n\r\n\t\t\t\t\t\t\tinserted = parent[expando]._onDragOver({\r\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\r\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\r\n\t\t\t\t\t\t\t\ttarget: target,\r\n\t\t\t\t\t\t\t\trootEl: parent\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (inserted && !this.options.dragoverBubble) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttarget = parent; // store last element\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* jshint boss:true */\r\n\t\t\t\t\twhile (parent = parent.parentNode);\r\n\t\t\t\t}\r\n\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(touchEvt);\r\n\r\n\t\t\t\t_unhideGhostForTarget();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t_onTouchMove: function (/**TouchEvent*/evt, forAutoScroll) {\r\n\t\t\tlog(\"_onTouchMove\",\"start\");\r\n\t\t\tif (tapEvt) {\r\n\t\t\t\tvar\toptions = this.options,\r\n\t\t\t\t\tfallbackTolerance = options.fallbackTolerance,\r\n\t\t\t\t\tfallbackOffset = options.fallbackOffset,\r\n\t\t\t\t\ttouch = evt.touches ? evt.touches[0] : evt,\r\n\t\t\t\t\tmatrix = ghostEl && transforms.matrix(ghostEl),\r\n\t\t\t\t\tscaleX = ghostEl && matrix && matrix.a,\r\n\t\t\t\t\tscaleY = ghostEl && matrix && matrix.d,\r\n\t\t\t\t\trelativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && _getRelativeScrollOffset(ghostRelativeParent),\r\n\t\t\t\t\tdx = ((touch.clientX - tapEvt.clientX)\r\n\t\t\t\t\t\t\t+ fallbackOffset.x) / (scaleX || 1)\r\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\r\n\t\t\t\t\tdy = ((touch.clientY - tapEvt.clientY)\r\n\t\t\t\t\t\t\t+ fallbackOffset.y) / (scaleY || 1)\r\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\r\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\r\n\r\n\t\t\t\t// only set the status to dragging, when we are actually dragging\r\n\t\t\t\tif (!Sortable.active && !awaitingDragStarted) {\r\n\t\t\t\t\tif (fallbackTolerance &&\r\n\t\t\t\t\t\tmin(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._onDragStart(evt, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!forAutoScroll && this._handleAutoScroll(touch, true);\r\n\r\n\t\t\t\tmoved = true;\r\n\t\t\t\ttouchEvt = touch;\r\n\r\n\t\t\t\tif (ghostEl) {\r\n\t\t\t\t\tstyler.css(ghostEl, 'webkitTransform', translate3d);\r\n\t\t\t\t\tstyler.css(ghostEl, 'mozTransform', translate3d);\r\n\t\t\t\t\tstyler.css(ghostEl, 'msTransform', translate3d);\r\n\t\t\t\t\tstyler.css(ghostEl, 'transform', translate3d);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//evt.cancelable && evt.preventDefault();\r\n\t\t\t\tevt.preventDefault()\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_appendGhost: function () {\r\n\t\t\t// Bug if using scale(): https://stackoverflow.com/questions/2637058\r\n\t\t\t// Not being adjusted for\r\n\t\t\tif (!ghostEl) {\r\n\t\t\t\tvar container = this.options.fallbackOnBody ? document.body : rootEl,\r\n\t\t\t\t\trect = _getRect(dragEl, true, container, !PositionGhostAbsolutely),\r\n\t\t\t\t\tcss = styler.css(dragEl),\r\n\t\t\t\t\toptions = this.options;\r\n\r\n\t\t\t\t// Position absolutely\r\n\t\t\t\tif (PositionGhostAbsolutely) {\r\n\t\t\t\t\t// Get relatively positioned parent\r\n\t\t\t\t\tghostRelativeParent = container;\r\n\r\n\t\t\t\t\twhile (\r\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'position') === 'static' &&\r\n\t\t\t\t\t\tstyler.css(ghostRelativeParent, 'transform') === 'none' &&\r\n\t\t\t\t\t\tghostRelativeParent !== document\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tghostRelativeParent = ghostRelativeParent.parentNode;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ghostRelativeParent !== document) {\r\n\t\t\t\t\t\tvar ghostRelativeParentRect = _getRect(ghostRelativeParent, true);\r\n\r\n\t\t\t\t\t\trect.top -= ghostRelativeParentRect.top;\r\n\t\t\t\t\t\trect.left -= ghostRelativeParentRect.left;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\r\n\t\t\t\t\t\tif (ghostRelativeParent === document) ghostRelativeParent = scrollingElement();\r\n\r\n\t\t\t\t\t\trect.top += ghostRelativeParent.scrollTop;\r\n\t\t\t\t\t\trect.left += ghostRelativeParent.scrollLeft;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tghostRelativeParent = scrollingElement();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tghostRelativeParentInitialScroll = _getRelativeScrollOffset(ghostRelativeParent);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tghostEl = dragEl.cloneNode(true);\r\n\r\n\t\t\t\tstyler.toggleClass(ghostEl, options.ghostClass, false);\r\n\t\t\t\tstyler.toggleClass(ghostEl, options.fallbackClass, true);\r\n\t\t\t\tstyler.toggleClass(ghostEl, options.dragClass, true);\r\n\r\n\t\t\t\tstyler.css(ghostEl, 'box-sizing', 'border-box');\r\n\t\t\t\tstyler.css(ghostEl, 'margin', 0);\r\n\t\t\t\tstyler.css(ghostEl, 'top', rect.top);\r\n\t\t\t\tstyler.css(ghostEl, 'left', rect.left);\r\n\t\t\t\tstyler.css(ghostEl, 'width', rect.width);\r\n\t\t\t\tstyler.css(ghostEl, 'height', rect.height);\r\n\t\t\t\tstyler.css(ghostEl, 'opacity', '0.8');\r\n\t\t\t\tstyler.css(ghostEl, 'position', (PositionGhostAbsolutely ? 'absolute' : 'fixed'));\r\n\t\t\t\tstyler.css(ghostEl, 'zIndex', '100000');\r\n\t\t\t\tstyler.css(ghostEl, 'pointerEvents', 'none');\r\n\r\n\t\t\t\tcontainer.appendChild(ghostEl);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t_animate: function (prevRect, target) {\r\n\t\t\tvar ms = this.options.animation;\r\n\r\n\t\t\tif (ms) {\r\n\t\t\t\tvar currentRect = geom.boundingRect(target);\r\n\r\n\t\t\t\tif (target === dragEl) {\r\n\t\t\t\t\trealDragElRect = currentRect;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (prevRect.nodeType === 1) {\r\n\t\t\t\t\tprevRect = geom.boundingRect(prevRect);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if actually moving position\r\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\r\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar matrix = transforms.matrix(this.el),\r\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\r\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\r\n\r\n\t\t\t\t\tstyler.css(target, 'transition', 'none');\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d('\r\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\r\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis._repaint(target);\r\n\t\t\t\t\tstyler.css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\r\n\t\t\t\t\tstyler.css(target, 'transform', 'translate3d(0,0,0)');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\r\n\t\t\t\ttarget.animated = setTimeout(function () {\r\n\t\t\t\t\tstyler.css(target, 'transition', '');\r\n\t\t\t\t\tstyler.css(target, 'transform', '');\r\n\t\t\t\t\ttarget.animated = false;\r\n\t\t\t\t}, ms);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_repaint: function(target) {\r\n\t\t\treturn target.offsetWidth;\r\n\t\t},\r\n\r\n\t\t_offMoveEvents: function() {\r\n\t\t\teventer.off(document, 'dragover', nearestEmptyInsertDetectEvent);\r\n\t\t\teventer.off(document, 'mousemove', nearestEmptyInsertDetectEvent);\r\n\t\t},\r\n\r\n\t\t_offUpEvents: function () {\r\n\t\t\tvar ownerDocument = this.el.ownerDocument;\r\n\r\n\t\t\teventer.off(ownerDocument, 'mouseup', this._onDrop);\r\n\t\t\teventer.off(document, 'selectstart', this);\r\n\t\t},\r\n\r\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\r\n\t\t\tvar _this = this;\r\n\t\t\tvar dataTransfer = evt.dataTransfer;\r\n\t\t\tvar options = _this.options;\r\n\r\n\t\t\t// Setup clone\r\n\t\t\tcloneEl = noder.clone(dragEl,true);\r\n\r\n\t\t\tcloneEl.draggable = false;\r\n\t\t\tcloneEl.style['will-change'] = '';\r\n\r\n\t\t\tthis._hideClone();\r\n\r\n\t\t\tstyler.toggleClass(cloneEl, _this.options.chosenClass, false);\r\n\r\n\r\n\t\t\t// #1143: IFrame support workaround\r\n\t\t\t_this._cloneId = _nextTick(function () {\r\n\t\t\t\tif (!_this.options.removeCloneOnHide) {\r\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\r\n\t\t\t\t}\r\n\t\t\t\t_dispatchEvent(_this, rootEl, 'clone', dragEl);\r\n\t\t\t});\r\n\r\n\r\n\t\t\t!fallback && styler.toggleClass(dragEl, options.dragClass, true);\r\n\r\n\t\t\t// Set proper drop events\r\n\t\t\tif (fallback) {\r\n\t\t\t\tignoreNextClick = true;\r\n\t\t\t\t_this._loopId = setInterval(_this._emulateDragOver, 50);\r\n\t\t\t} else {\r\n\t\t\t\t// Undo what was set in _prepareDragStart before drag started\r\n\t\t\t\teventer.off(document, 'mouseup', _this._onDrop);\r\n\t\t\t\t///eventer.off(document, 'touchend', _this._onDrop);\r\n\t\t\t\t///eventer.off(document, 'touchcancel', _this._onDrop);\r\n\r\n\t\t\t\tif (dataTransfer) {\r\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\r\n\t\t\t\t\toptions.setData && options.setData.call(_this, dataTransfer, dragEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\teventer.on(document, 'drop', _this);\r\n\r\n\t\t\t\t// #1276 fix:\r\n\t\t\t\tstyler.css(dragEl, 'transform', 'translateZ(0)');\r\n\t\t\t}\r\n\r\n\t\t\tawaitingDragStarted = true;\r\n\r\n\t\t\t_this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\r\n\t\t\teventer.on(document, 'selectstart', _this);\r\n\t\t\tif (Safari) {\r\n\t\t\t\tstyler.css(document.body, 'user-select', 'none');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\r\n\t\t_onDragOver: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\ttarget = evt.target,\r\n\t\t\t\tdragRect,\r\n\t\t\t\ttargetRect,\r\n\t\t\t\trevert,\r\n\t\t\t\toptions = this.options,\r\n\t\t\t\tgroup = options.group,\r\n\t\t\t\tactiveSortable = Sortable.active,\r\n\t\t\t\tisOwner = (activeGroup === group),\r\n\t\t\t\tcanSort = options.sort,\r\n\t\t\t\t_this = this;\r\n\r\n\t\t\tif (_silent) return;\r\n\r\n\t\t\t// Return invocation when dragEl is inserted (or completed)\r\n\t\t\tfunction completed(insertion) {\r\n\t\t\t\tif (insertion) {\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(_this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (activeSortable) {\r\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\r\n\t\t\t\t\t\tstyler.toggleClass(dragEl, options.ghostClass, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (putSortable !== _this && _this !== Sortable.active) {\r\n\t\t\t\t\t\tputSortable = _this;\r\n\t\t\t\t\t} else if (_this === Sortable.active) {\r\n\t\t\t\t\t\tputSortable = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Animation\r\n\t\t\t\t\tdragRect && _this._animate(dragRect, dragEl);\r\n\t\t\t\t\ttarget && targetRect && _this._animate(targetRect, target);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\r\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\r\n\t\t\t\t\tlastTarget = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// no bubbling and not fallback\r\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\r\n\t\t\t\t\t_this._handleAutoScroll(evt);\r\n\t\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(evt);\r\n\r\n\t\t\t\t\t// Do not detect for empty insert if already inserted\r\n\t\t\t\t\t!insertion && nearestEmptyInsertDetectEvent(evt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Call when dragEl has been inserted\r\n\t\t\tfunction changed() {\r\n\t\t\t\t_dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl), oldDraggableIndex, _index(dragEl, options.draggable), evt);\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets the direction dragEl must be swapped relative to target in order to make it\r\n\t\t\t * seem that dragEl has been \"inserted\" into that element's position\r\n\t\t\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\r\n\t\t\t * @return {Number}                   Direction dragEl must be swapped\r\n\t\t\t */\r\n\t\t\tfunction _getInsertDirection(target) {\r\n\t\t\t\tvar dragElIndex = _index(dragEl),\r\n\t\t\t\t\ttargetIndex = _index(target);\r\n\r\n\t\t\t\tif (dragElIndex < targetIndex) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\r\n\t\t\t\tvar targetRect = geom.boundingRect(target),\r\n\t\t\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\r\n\t\t\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\r\n\t\t\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\r\n\t\t\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\r\n\t\t\t\t\tdragRect = geom.boundingRect(dragEl),\r\n\t\t\t\t\tinvert = false;\r\n\r\n\r\n\t\t\t\tif (!invertSwap) {\r\n\t\t\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\r\n\t\t\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\r\n\t\t\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh &&\r\n\t\t\t\t\t\t\t(lastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\r\n\t\t\t\t\t\t\tpastFirstInvertThresh = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!pastFirstInvertThresh) {\r\n\t\t\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\r\n\t\t\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\r\n\t\t\t\t\t\t\t// dragEl shadow (target move distance shadow)\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlastDirection === 1 ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn lastDirection * -1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinvert = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Regular\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\r\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn _getInsertDirection(target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinvert = invert || invertSwap;\r\n\r\n\t\t\t\tif (invert) {\r\n\t\t\t\t\t// Invert of regular\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\r\n\t\t\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (evt.preventDefault !== void 0) {\r\n\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t}\r\n\r\n\r\n\t\t\tmoved = true;\r\n\r\n\t\t\ttarget = finder.closest(target, options.draggable, el, true);\r\n\r\n\t\t\t// target is dragEl or target is animated\r\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\r\n\t\t\t\treturn completed(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (target !== dragEl) {\r\n\t\t\t\tignoreNextClick = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (activeSortable && !options.disabled &&\r\n\t\t\t\t(isOwner\r\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\tputSortable === this ||\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t(this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\r\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tvar axis = this._getDirection(evt, target);\r\n\r\n\t\t\t\tdragRect = geom.boundingRect(dragEl);\r\n\r\n\t\t\t\tif (revert) {\r\n\t\t\t\t\tthis._hideClone();\r\n\t\t\t\t\tparentEl = rootEl; // actualization\r\n\r\n\t\t\t\t\tif (nextEl) {\r\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trootEl.appendChild(dragEl);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn completed(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar elLastChild = _lastChild(el);\r\n\r\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\r\n\t\t\t\t\t// assign target only if condition is true\r\n\t\t\t\t\tif (elLastChild && el === evt.target) {\r\n\t\t\t\t\t\ttarget = elLastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (target) {\r\n\t\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\r\n\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\tparentEl = el; // actualization\r\n\t\t\t\t\t\trealDragElRect = null;\r\n\r\n\t\t\t\t\t\tchanged();\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\r\n\t\t\t\t\tvar direction = 0,\r\n\t\t\t\t\t\ttargetBeforeFirstSwap,\r\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\r\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\r\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\r\n\t\t\t\t\t\tscrolledPastTop = autoscroll._isScrolledPast(target, 'top') || autoscroll._isScrolledPast(dragEl, 'top'),\r\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\r\n\r\n\r\n\t\t\t\t\tif (lastTarget !== target) {\r\n\t\t\t\t\t\tlastMode = null;\r\n\t\t\t\t\t\ttargetBeforeFirstSwap = geom.boundingRect(target)[side1];\r\n\t\t\t\t\t\tpastFirstInvertThresh = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\r\n\t\t\t\t\t\tdifferentLevel ||\r\n\t\t\t\t\t\tscrolledPastTop ||\r\n\t\t\t\t\t\toptions.invertSwap ||\r\n\t\t\t\t\t\tlastMode === 'insert' ||\r\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\r\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\r\n\t\t\t\t\t\tlastMode === 'swap'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// New target that we will be inside\r\n\t\t\t\t\t\tif (lastMode !== 'swap') {\r\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\r\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\r\n\t\t\t\t\t\t\tisCircumstantialInvert,\r\n\t\t\t\t\t\t\tlastTarget === target);\r\n\t\t\t\t\t\tlastMode = 'swap';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Insert at position\r\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\r\n\t\t\t\t\t\tlastMode = 'insert';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (direction === 0) return completed(false);\r\n\r\n\t\t\t\t\trealDragElRect = null;\r\n\t\t\t\t\tlastTarget = target;\r\n\r\n\t\t\t\t\tlastDirection = direction;\r\n\r\n\t\t\t\t\ttargetRect = geom.boundingRect(target);\r\n\r\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\r\n\t\t\t\t\t\tafter = false;\r\n\r\n\t\t\t\t\tafter = direction === 1;\r\n\r\n\t\t\t\t\tvar moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\r\n\r\n\t\t\t\t\tif (moveVector !== false) {\r\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\r\n\t\t\t\t\t\t\tafter = (moveVector === 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_silent = true;\r\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\r\n\r\n\t\t\t\t\t\tif (isOwner) {\r\n\t\t\t\t\t\t\tactiveSortable._hideClone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (after && !nextSibling) {\r\n\t\t\t\t\t\t\tel.appendChild(dragEl);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\r\n\t\t\t\t\t\tif (scrolledPastTop) {\r\n\t\t\t\t\t\t\tgeom.scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\r\n\r\n\t\t\t\t\t\t// must be done before animation\r\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\r\n\t\t\t\t\t\t\ttargetMoveDistance = abs(targetBeforeFirstSwap - geom.boundingRect(target)[side1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchanged();\r\n\r\n\t\t\t\t\t\treturn completed(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (el.contains(dragEl)) {\r\n\t\t\t\t\treturn completed(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t_onDrop: function (/**Event*/evt) {\r\n\t\t\tvar el = this.el,\r\n\t\t\t\toptions = this.options;\r\n\t\t\tawaitingDragStarted = false;\r\n\t\t\tscrolling = false;\r\n\t\t\tisCircumstantialInvert = false;\r\n\t\t\tpastFirstInvertThresh = false;\r\n\r\n\t\t\tclearInterval(this._loopId);\r\n\r\n\t\t\tclearInterval(pointerElemChangedInterval);\r\n\t\t\t\r\n\t\t\tautoscroll._clearAutoScrolls();\r\n\t\t\tautoscroll._cancelThrottle();\r\n\r\n\t\t\tclearTimeout(this._dragStartTimer);\r\n\r\n\t\t\t_cancelNextTick(this._cloneId);\r\n\t\t\t_cancelNextTick(this._dragStartId);\r\n\r\n\t\t\t// Unbind events\r\n\t\t\teventer.off(document, 'mousemove', this._onTouchMove);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(document, 'drop', this);\r\n\t\t\t\teventer.off(el, 'dragstart', this._onDragStart);\r\n\t\t\t\teventer.off(document, 'dragover', this._handleAutoScroll);\r\n\t\t\t\teventer.off(document, 'dragover', _checkAlignment);\r\n\t\t\t}\r\n\r\n\t\t\tif (Safari) {\r\n\t\t\t\tstyler.css(document.body, 'user-select', '');\r\n\t\t\t}\r\n\r\n\t\t\tthis._offMoveEvents();\r\n\t\t\tthis._offUpEvents();\r\n\r\n\t\t\tif (evt) {\r\n\t\t\t\tif (moved) {\r\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\r\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\r\n\r\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\r\n\t\t\t\t\t// Remove clone\r\n\t\t\t\t\tcloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dragEl) {\r\n\t\t\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\t\t\teventer.off(dragEl, 'dragend', this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_disableDraggable(dragEl);\r\n\t\t\t\t\tdragEl.style['will-change'] = '';\r\n\r\n\t\t\t\t\t// Remove class's\r\n\t\t\t\t\tstyler.toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\r\n\t\t\t\t\tstyler.toggleClass(dragEl, this.options.chosenClass, false);\r\n\r\n\t\t\t\t\t// Drag stop event\r\n\t\t\t\t\t_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\r\n\r\n\t\t\t\t\tif (rootEl !== parentEl) {\r\n\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t// Add event\r\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// Remove event\r\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t\t// drag from one list and drop into another\r\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tputSortable && putSortable.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\r\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\r\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\r\n\t\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\r\n\r\n\t\t\t\t\t\t\tif (newIndex >= 0) {\r\n\t\t\t\t\t\t\t\t// drag & drop within the same list\r\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (Sortable.active) {\r\n\t\t\t\t\t\t/* jshint eqnull:true */\r\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\r\n\t\t\t\t\t\t\tnewIndex = oldIndex;\r\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\r\n\r\n\t\t\t\t\t\t// Save sorting\r\n\t\t\t\t\t\tthis.save();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._nulling();\r\n\t\t},\r\n\r\n\t\t_nulling: function() {\r\n\t\t\trootEl =\r\n\t\t\tdragEl =\r\n\t\t\tparentEl =\r\n\t\t\tghostEl =\r\n\t\t\tnextEl =\r\n\t\t\tcloneEl =\r\n\t\t\tlastDownEl =\r\n\r\n\t\t\tscrollEl =\r\n\t\t\tscrollParentEl =\r\n\t\t\tautoscroll.autoScrolls.length =\r\n\r\n\t\t\tpointerElemChangedInterval =\r\n\t\t\tlastPointerElemX =\r\n\t\t\tlastPointerElemY =\r\n\r\n\t\t\ttapEvt =\r\n\t\t\ttouchEvt =\r\n\r\n\t\t\tmoved =\r\n\t\t\tnewIndex =\r\n\t\t\toldIndex =\r\n\r\n\t\t\tlastTarget =\r\n\t\t\tlastDirection =\r\n\r\n\t\t\trealDragElRect =\r\n\r\n\t\t\tputSortable =\r\n\t\t\tactiveGroup =\r\n\t\t\tSortable.active = null;\r\n\r\n\t\t\tsavedInputChecked.forEach(function (el) {\r\n\t\t\t\tel.checked = true;\r\n\t\t\t});\r\n\r\n\t\t\tsavedInputChecked.length = 0;\r\n\t\t},\r\n\r\n\t\thandleEvent: function (/**Event*/evt) {\r\n\t\t\tswitch (evt.type) {\r\n\t\t\t\tcase 'drop':\r\n\t\t\t\tcase 'dragend':\r\n\t\t\t\t\tthis._onDrop(evt);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'dragenter':\r\n\t\t\t\tcase 'dragover':\r\n\t\t\t\t\tif (dragEl) {\r\n\t\t\t\t\t\tthis._onDragOver(evt);\r\n\t\t\t\t\t\t_globalDragOver(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'selectstart':\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Serializes the item into an array of string.\r\n\t\t * @returns {String[]}\r\n\t\t */\r\n\t\ttoArray: function () {\r\n\t\t\tvar order = [],\r\n\t\t\t\tel,\r\n\t\t\t\tchildren = this.el.children,\r\n\t\t\t\ti = 0,\r\n\t\t\t\tn = children.length,\r\n\t\t\t\toptions = this.options;\r\n\r\n\t\t\tfor (; i < n; i++) {\r\n\t\t\t\tel = children[i];\r\n\t\t\t\tif (finder.closest(el, options.draggable, this.el, false)) {\r\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn order;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Sorts the elements according to the array.\r\n\t\t * @param  {String[]}  order  order of the items\r\n\t\t */\r\n\t\tsort: function (order) {\r\n\t\t\tvar items = {}, rootEl = this.el;\r\n\r\n\t\t\tthis.toArray().forEach(function (id, i) {\r\n\t\t\t\tvar el = rootEl.children[i];\r\n\r\n\t\t\t\tif (finder.closest(el, this.options.draggable, rootEl, false)) {\r\n\t\t\t\t\titems[id] = el;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\torder.forEach(function (id) {\r\n\t\t\t\tif (items[id]) {\r\n\t\t\t\t\trootEl.removeChild(items[id]);\r\n\t\t\t\t\trootEl.appendChild(items[id]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Save the current sorting\r\n\t\t */\r\n\t\tsave: function () {\r\n\t\t\tvar store = this.options.store;\r\n\t\t\tstore && store.set && store.set(this);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\r\n\t\t * @param   {HTMLElement}  el\r\n\t\t * @param   {String}       [selector]  default: `options.draggable`\r\n\t\t * @returns {HTMLElement|null}\r\n\t\t */\r\n\t\tclosest: function (el, selector) {\r\n\t\t\treturn finder.closest(el, selector || this.options.draggable, this.el, false);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Set/get option\r\n\t\t * @param   {string} name\r\n\t\t * @param   {*}      [value]\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\toption: function (name, value) {\r\n\t\t\tvar options = this.options;\r\n\r\n\t\t\tif (value === void 0) {\r\n\t\t\t\treturn options[name];\r\n\t\t\t} else {\r\n\t\t\t\toptions[name] = value;\r\n\r\n\t\t\t\tif (name === 'group') {\r\n\t\t\t\t\t_prepareGroup(options);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Destroy\r\n\t\t */\r\n\t\tdestroy: function () {\r\n\t\t\tvar el = this.el;\r\n\r\n\t\t\tel[expando] = null;\r\n\r\n\t\t\teventer.off(el, 'mousedown', this._onTapStart);\r\n\r\n\r\n\t\t\tif (this.nativeDraggable) {\r\n\t\t\t\teventer.off(el, 'dragover', this);\r\n\t\t\t\teventer.off(el, 'dragenter', this);\r\n\t\t\t}\r\n\t\t\t// Remove draggable attributes\r\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\r\n\t\t\t\tel.removeAttribute('draggable');\r\n\t\t\t});\r\n\r\n\t\t\tthis._onDrop();\r\n\r\n\t\t\tsortables.splice(sortables.indexOf(this.el), 1);\r\n\r\n\t\t\tthis.el = el = null;\r\n\t\t},\r\n\r\n\t\t_hideClone: function() {\r\n\t\t\tif (!cloneEl.cloneHidden) {\r\n\t\t\t\tstyler.css(cloneEl, 'display', 'none');\r\n\t\t\t\tcloneEl.cloneHidden = true;\r\n\t\t\t\tif (cloneEl.parentNode && this.options.removeCloneOnHide) {\r\n\t\t\t\t\tcloneEl.parentNode.removeChild(cloneEl);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_showClone: function(putSortable) {\r\n\t\t\tif (putSortable.lastPutMode !== 'clone') {\r\n\t\t\t\tthis._hideClone();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (cloneEl.cloneHidden) {\r\n\t\t\t\t// show clone at dragEl or original position\r\n\t\t\t\tif (rootEl.contains(dragEl) && !this.options.group.revertClone) {\r\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\r\n\t\t\t\t} else if (nextEl) {\r\n\t\t\t\t\trootEl.insertBefore(cloneEl, nextEl);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trootEl.appendChild(cloneEl);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.options.group.revertClone) {\r\n\t\t\t\t\tthis._animate(dragEl, cloneEl);\r\n\t\t\t\t}\r\n\t\t\t\tstyler.css(cloneEl, 'display', '');\r\n\t\t\t\tcloneEl.cloneHidden = false;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n    function _globalDragOver(/**Event*/evt) {\r\n\t\tif (evt.dataTransfer) {\r\n\t\t\tevt.dataTransfer.dropEffect = 'move';\r\n\t\t}\r\n\t\tevt.cancelable && evt.preventDefault();\r\n\t}\r\n\r\n\tfunction _dispatchEvent(\r\n\t\tsortable, rootEl, name,\r\n\t\ttargetEl, toEl, fromEl,\r\n\t\tstartIndex, newIndex,\r\n\t\tstartDraggableIndex, newDraggableIndex,\r\n\t\toriginalEvt\r\n\t) {\r\n\t\tsortable = (sortable || rootEl[expando]);\r\n\t\tvar evt,\r\n\t\t\toptions = sortable.options,\r\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\r\n\r\n\t\tevt = eventer.create(name,{\r\n\t\t\tto : toEl || rootEl,\r\n\t\t\tfrom : fromEl || rootEl,\r\n\t\t\titem : targetEl || rootEl,\r\n\t\t\tclone : cloneEl,\r\n\t\t\toldIndex : startIndex,\r\n\t\t\tnewIndex : newIndex,\r\n\t\t\toldDraggableIndex : startDraggableIndex,\r\n\t\t\tnewDraggableIndex : newDraggableIndex,\r\n\t\t\toriginalEvent : originalEvt,\r\n\t\t\tpullMode : putSortable ? putSortable.lastPutMode : undefined\r\n\t\t});\r\n\t\tif (rootEl) {\r\n\t\t\trootEl.dispatchEvent(evt);\r\n\t\t}\r\n\r\n\t\tif (options[onName]) {\r\n\t\t\toptions[onName].call(sortable, evt);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\r\n\t\tvar evt,\r\n\t\t\tsortable = fromEl[expando],\r\n\t\t\tonMoveFn = sortable.options.onMove,\r\n\t\t\tretVal;\r\n\r\n\t\tevt = eventer.create(\"move\",{\r\n\t\t\tto : toEl,\r\n\t\t\tfrom : fromEl,\r\n\t\t\tdragged : dragEl,\r\n\t\t\tdraggedRect: dragRect,\r\n\t\t\trelated : targetEl || toEl,\r\n\t\t\trelatedRect : targetRect || geom.boundingRect(toEl),\r\n\t\t\twillInsertAfter : willInsertAfter,\r\n\t\t\toriginalEvent : originalEvt\r\n\t\t});\r\n\r\n\t\tfromEl.dispatchEvent(evt);\r\n\r\n\t\tif (onMoveFn) {\r\n\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\r\n\t\t}\r\n\r\n\t\treturn retVal;\r\n\t}\r\n\r\n\tfunction _disableDraggable(el) {\r\n\t\tel.draggable = false;\r\n\t}\r\n\r\n\tfunction _unsilent() {\r\n\t\t_silent = false;\r\n\t}\r\n\r\n\r\n\t// Export utils\r\n\tSortable.utils = {\r\n\t\ton: eventer.on,\r\n\t\toff: eventer.off,\r\n\t\tcss: styler.css,\r\n\t\tfind: _find,\r\n\t\tis: function (el, selector) {\r\n\t\t\treturn !!finder.closest(el, selector, el, false);\r\n\t\t},\r\n\t\textend: langx.mixin,\r\n\t\tthrottle: autoscroll._throttle,\r\n\t\tclosest: finder.closest,\r\n\t\ttoggleClass: styler.toggleClass,\r\n\t\tclone: \tfunction (el) {\r\n\t\t\t\t\treturn noder.clone(el,true);\r\n\t\t\t\t},\r\n\t\tindex: _index,\r\n\t\tnextTick: _nextTick,\r\n\t\tcancelNextTick: _cancelNextTick,\r\n\t\tdetectDirection: _detectDirection,\r\n\t\tgetChild: function(el, childNum, options) {\r\n\t\t\toptions.excluding = [];\r\n\t\t\toptions.closesting = options.draggable;\r\n\t\t\treturn finder.childAt(el,childNum,options);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Create sortable instance\r\n\t * @param {HTMLElement}  el\r\n\t * @param {Object}      [options]\r\n\t */\r\n\tSortable.create = function (el, options) {\r\n\t\treturn new Sortable(el, options);\r\n\t};\r\n\r\n\r\n\t// Export\r\n\tSortable.version = '1.9.0';\r\n\r\n\treturn skylark.attach(\"intg.Sortable\",Sortable);\r\n});\ndefine('skylark-sortable/main',[\r\n\t\"./Sortable\"\r\n],function(Sortable){\r\n\treturn Sortable;\r\n});\ndefine('skylark-sortable', ['skylark-sortable/main'], function (main) { return main; });\n\n"]}